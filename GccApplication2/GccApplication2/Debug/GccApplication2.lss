
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00001604  00001698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020c  0080018a  0080018a  00001722  2**0
                  ALLOC
  3 .comment      00000041  00000000  00000000  00001722  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009b1b  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e69  00000000  00000000  0000b75f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002441  00000000  00000000  0000d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d48  00000000  00000000  0000fa0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000265d  00000000  00000000  00010754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005020  00000000  00000000  00012db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000470  00000000  00000000  00017dd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__vector_9>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__vector_18>
      4c:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_21>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	26 06       	cpc	r2, r22
      ba:	6b 09       	sbc	r22, r11

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e4 e0       	ldi	r30, 0x04	; 4
      d0:	f6 e1       	ldi	r31, 0x16	; 22
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	aa 38       	cpi	r26, 0x8A	; 138
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	23 e0       	ldi	r18, 0x03	; 3
      e0:	aa e8       	ldi	r26, 0x8A	; 138
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a6 39       	cpi	r26, 0x96	; 150
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	ce e5       	ldi	r28, 0x5E	; 94
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__tablejump2__>
      fe:	cc 35       	cpi	r28, 0x5C	; 92
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 af 09 	call	0x135e	; 0x135e <main>
     108:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_Z14llamarCallbackv>:
	return 1;
}

void llamarCallback()
{
	canales[fnLlamar].callback(valor_leido);
     110:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <fnLlamar>
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	fc 01       	movw	r30, r24
     118:	ee 0f       	add	r30, r30
     11a:	ff 1f       	adc	r31, r31
     11c:	88 0f       	add	r24, r24
     11e:	99 1f       	adc	r25, r25
     120:	88 0f       	add	r24, r24
     122:	99 1f       	adc	r25, r25
     124:	88 0f       	add	r24, r24
     126:	99 1f       	adc	r25, r25
     128:	e8 0f       	add	r30, r24
     12a:	f9 1f       	adc	r31, r25
     12c:	ed 56       	subi	r30, 0x6D	; 109
     12e:	fe 4f       	sbci	r31, 0xFE	; 254
     130:	02 80       	ldd	r0, Z+2	; 0x02
     132:	f3 81       	ldd	r31, Z+3	; 0x03
     134:	e0 2d       	mov	r30, r0
     136:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <valor_leido>
     13a:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <valor_leido+0x1>
     13e:	09 95       	icall
     140:	08 95       	ret

00000142 <_Z8adc_initP7adc_cfg>:
uint8_t seteados[6];		// Almacena que canales estan en uso.
uint16_t valor_leido;		// Almacena el ultimo valor leido (util).
uint8_t i;

int adc_init(adc_cfg *cfg)
{
     142:	fc 01       	movw	r30, r24
	if(cfg->channel>5)
     144:	80 81       	ld	r24, Z
     146:	91 81       	ldd	r25, Z+1	; 0x01
     148:	06 97       	sbiw	r24, 0x06	; 6
     14a:	0c f0       	brlt	.+2      	; 0x14e <_Z8adc_initP7adc_cfg+0xc>
     14c:	95 c0       	rjmp	.+298    	; 0x278 <_Z8adc_initP7adc_cfg+0x136>
	{
		return 0;
	}
	if(iniciado==0)
     14e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <iniciado>
     152:	81 11       	cpse	r24, r1
     154:	6d c0       	rjmp	.+218    	; 0x230 <_Z8adc_initP7adc_cfg+0xee>
	{
		ADMUX &= ~(1<<ADLAR);
     156:	ac e7       	ldi	r26, 0x7C	; 124
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	8c 91       	ld	r24, X
     15c:	8f 7d       	andi	r24, 0xDF	; 223
     15e:	8c 93       	st	X, r24
		ADMUX |= (1<<REFS0);
     160:	8c 91       	ld	r24, X
     162:	80 64       	ori	r24, 0x40	; 64
     164:	8c 93       	st	X, r24
		ADMUX &= ~(1<<MUX3 | 1<<MUX2 | 1<<MUX1 | 1<<MUX0);
     166:	8c 91       	ld	r24, X
     168:	80 7f       	andi	r24, 0xF0	; 240
     16a:	8c 93       	st	X, r24

		switch(cfg->channel)
     16c:	80 81       	ld	r24, Z
     16e:	91 81       	ldd	r25, Z+1	; 0x01
     170:	83 30       	cpi	r24, 0x03	; 3
     172:	91 05       	cpc	r25, r1
     174:	d1 f0       	breq	.+52     	; 0x1aa <_Z8adc_initP7adc_cfg+0x68>
     176:	34 f4       	brge	.+12     	; 0x184 <_Z8adc_initP7adc_cfg+0x42>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	91 05       	cpc	r25, r1
     17c:	51 f0       	breq	.+20     	; 0x192 <_Z8adc_initP7adc_cfg+0x50>
     17e:	02 97       	sbiw	r24, 0x02	; 2
     180:	71 f0       	breq	.+28     	; 0x19e <_Z8adc_initP7adc_cfg+0x5c>
     182:	2a c0       	rjmp	.+84     	; 0x1d8 <_Z8adc_initP7adc_cfg+0x96>
     184:	85 30       	cpi	r24, 0x05	; 5
     186:	91 05       	cpc	r25, r1
     188:	e1 f0       	breq	.+56     	; 0x1c2 <_Z8adc_initP7adc_cfg+0x80>
     18a:	ac f0       	brlt	.+42     	; 0x1b6 <_Z8adc_initP7adc_cfg+0x74>
     18c:	06 97       	sbiw	r24, 0x06	; 6
     18e:	f9 f0       	breq	.+62     	; 0x1ce <_Z8adc_initP7adc_cfg+0x8c>
     190:	23 c0       	rjmp	.+70     	; 0x1d8 <_Z8adc_initP7adc_cfg+0x96>
		{
			case 0: break;
			case 1:
			{
				ADMUX |= (1<<MUX0);
     192:	ac e7       	ldi	r26, 0x7C	; 124
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	8c 91       	ld	r24, X
     198:	81 60       	ori	r24, 0x01	; 1
     19a:	8c 93       	st	X, r24
			}break;
     19c:	1d c0       	rjmp	.+58     	; 0x1d8 <_Z8adc_initP7adc_cfg+0x96>
			case 2:
			{
				ADMUX |= (1<<MUX1);
     19e:	ac e7       	ldi	r26, 0x7C	; 124
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	8c 91       	ld	r24, X
     1a4:	82 60       	ori	r24, 0x02	; 2
     1a6:	8c 93       	st	X, r24
			}break;
     1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <_Z8adc_initP7adc_cfg+0x96>
			case 3:
			{
				ADMUX |= ( (1<<MUX1) | (1<<MUX0));
     1aa:	ac e7       	ldi	r26, 0x7C	; 124
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	8c 91       	ld	r24, X
     1b0:	83 60       	ori	r24, 0x03	; 3
     1b2:	8c 93       	st	X, r24
			}break;
     1b4:	11 c0       	rjmp	.+34     	; 0x1d8 <_Z8adc_initP7adc_cfg+0x96>
			case 4:
			{
				ADMUX |= (1<<MUX2);
     1b6:	ac e7       	ldi	r26, 0x7C	; 124
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	8c 91       	ld	r24, X
     1bc:	84 60       	ori	r24, 0x04	; 4
     1be:	8c 93       	st	X, r24
			}break;
     1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <_Z8adc_initP7adc_cfg+0x96>
			case 5:
			{
				ADMUX |= ((1<<MUX2)|(1<<MUX0));
     1c2:	ac e7       	ldi	r26, 0x7C	; 124
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	8c 91       	ld	r24, X
     1c8:	85 60       	ori	r24, 0x05	; 5
     1ca:	8c 93       	st	X, r24
			}break;
     1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <_Z8adc_initP7adc_cfg+0x96>
			case 6:
			{
				ADMUX |= ((1<<MUX2) |(1<<MUX1));
     1ce:	ac e7       	ldi	r26, 0x7C	; 124
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	8c 91       	ld	r24, X
     1d4:	86 60       	ori	r24, 0x06	; 6
     1d6:	8c 93       	st	X, r24
			}break;
		}

		ADCSRA |= 1<<ADEN;
     1d8:	aa e7       	ldi	r26, 0x7A	; 122
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	8c 91       	ld	r24, X
     1de:	80 68       	ori	r24, 0x80	; 128
     1e0:	8c 93       	st	X, r24
		ADCSRA &= ~(1<<ADATE);
     1e2:	8c 91       	ld	r24, X
     1e4:	8f 7d       	andi	r24, 0xDF	; 223
     1e6:	8c 93       	st	X, r24
		ADCSRA |= (1<<ADPS2 | 1<<ADPS1 | 1<<ADPS2);
     1e8:	8c 91       	ld	r24, X
     1ea:	86 60       	ori	r24, 0x06	; 6
     1ec:	8c 93       	st	X, r24
		ADCSRA |= 1<<ADIE;
     1ee:	8c 91       	ld	r24, X
     1f0:	88 60       	ori	r24, 0x08	; 8
     1f2:	8c 93       	st	X, r24
		sei();
     1f4:	78 94       	sei
		ADCSRA |= 1<<ADSC;
     1f6:	8c 91       	ld	r24, X
     1f8:	80 64       	ori	r24, 0x40	; 64
     1fa:	8c 93       	st	X, r24
		for(i=0;i<6;i++)
		{
			seteados[i]=0;
     1fc:	ad e8       	ldi	r26, 0x8D	; 141
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	1c 92       	st	X, r1
     202:	11 96       	adiw	r26, 0x01	; 1
     204:	1c 92       	st	X, r1
     206:	11 97       	sbiw	r26, 0x01	; 1
     208:	12 96       	adiw	r26, 0x02	; 2
     20a:	1c 92       	st	X, r1
     20c:	12 97       	sbiw	r26, 0x02	; 2
     20e:	13 96       	adiw	r26, 0x03	; 3
     210:	1c 92       	st	X, r1
     212:	13 97       	sbiw	r26, 0x03	; 3
     214:	14 96       	adiw	r26, 0x04	; 4
     216:	1c 92       	st	X, r1
     218:	14 97       	sbiw	r26, 0x04	; 4
     21a:	15 96       	adiw	r26, 0x05	; 5
     21c:	1c 92       	st	X, r1
     21e:	86 e0       	ldi	r24, 0x06	; 6
     220:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__data_end>
		}
		
		iniciado=1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <iniciado>
		canalConvirtiendo = cfg->channel;
     22a:	80 81       	ld	r24, Z
     22c:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <canalConvirtiendo>
	}
	if (seteados[cfg->channel] != 0)
     230:	80 81       	ld	r24, Z
     232:	91 81       	ldd	r25, Z+1	; 0x01
     234:	dc 01       	movw	r26, r24
     236:	a3 57       	subi	r26, 0x73	; 115
     238:	be 4f       	sbci	r27, 0xFE	; 254
     23a:	2c 91       	ld	r18, X
     23c:	21 11       	cpse	r18, r1
     23e:	1f c0       	rjmp	.+62     	; 0x27e <_Z8adc_initP7adc_cfg+0x13c>
	{
		return 0;
	}
	seteados[cfg->channel] = 1;
     240:	dc 01       	movw	r26, r24
     242:	a3 57       	subi	r26, 0x73	; 115
     244:	be 4f       	sbci	r27, 0xFE	; 254
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	2c 93       	st	X, r18
	canales[cfg->channel] = * cfg;
     24a:	80 81       	ld	r24, Z
     24c:	91 81       	ldd	r25, Z+1	; 0x01
     24e:	dc 01       	movw	r26, r24
     250:	aa 0f       	add	r26, r26
     252:	bb 1f       	adc	r27, r27
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	a8 0f       	add	r26, r24
     262:	b9 1f       	adc	r27, r25
     264:	ad 56       	subi	r26, 0x6D	; 109
     266:	be 4f       	sbci	r27, 0xFE	; 254
     268:	8a e0       	ldi	r24, 0x0A	; 10
     26a:	01 90       	ld	r0, Z+
     26c:	0d 92       	st	X+, r0
     26e:	8a 95       	dec	r24
     270:	e1 f7       	brne	.-8      	; 0x26a <_Z8adc_initP7adc_cfg+0x128>
	return 1;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	08 95       	ret

int adc_init(adc_cfg *cfg)
{
	if(cfg->channel>5)
	{
		return 0;
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	08 95       	ret
		iniciado=1;
		canalConvirtiendo = cfg->channel;
	}
	if (seteados[cfg->channel] != 0)
	{
		return 0;
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
	}
	seteados[cfg->channel] = 1;
	canales[cfg->channel] = * cfg;
	return 1;
}
     282:	08 95       	ret

00000284 <__vector_21>:
{
	canales[fnLlamar].callback(valor_leido);
}
//uint8_t corte=0;
ISR (ADC_vect)
{
     284:	1f 92       	push	r1
     286:	0f 92       	push	r0
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	2f 93       	push	r18
     290:	3f 93       	push	r19
     292:	4f 93       	push	r20
     294:	5f 93       	push	r21
     296:	6f 93       	push	r22
     298:	7f 93       	push	r23
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
     29e:	af 93       	push	r26
     2a0:	bf 93       	push	r27
     2a2:	cf 93       	push	r28
     2a4:	ef 93       	push	r30
     2a6:	ff 93       	push	r31
	if(contador>=100)
     2a8:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <contador>
     2ac:	84 36       	cpi	r24, 0x64	; 100
     2ae:	08 f4       	brcc	.+2      	; 0x2b2 <__vector_21+0x2e>
     2b0:	7a c0       	rjmp	.+244    	; 0x3a6 <__vector_21+0x122>
	{
		valor_leido = ADC;
     2b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2b6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     2ba:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <valor_leido+0x1>
     2be:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <valor_leido>
		fnLlamar = canalConvirtiendo;
     2c2:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <canalConvirtiendo>
     2c6:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <fnLlamar>
		fnqueue_add(llamarCallback);
     2ca:	88 e8       	ldi	r24, 0x88	; 136
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z11fnqueue_addPFvvE>
		for(i=1;i<=6;i++)
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__data_end>
		{
			if(seteados[(canalConvirtiendo+i)%6]==1)
     2d8:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <canalConvirtiendo>
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	c9 01       	movw	r24, r18
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	66 e0       	ldi	r22, 0x06	; 6
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divmodhi4>
     2ea:	58 2f       	mov	r21, r24
     2ec:	fc 01       	movw	r30, r24
     2ee:	e3 57       	subi	r30, 0x73	; 115
     2f0:	fe 4f       	sbci	r31, 0xFE	; 254
     2f2:	80 81       	ld	r24, Z
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	09 f0       	breq	.+2      	; 0x2fa <__vector_21+0x76>
     2f8:	5f c0       	rjmp	.+190    	; 0x3b8 <__vector_21+0x134>
     2fa:	0e c0       	rjmp	.+28     	; 0x318 <__vector_21+0x94>
     2fc:	48 2f       	mov	r20, r24
     2fe:	c9 01       	movw	r24, r18
     300:	bf 01       	movw	r22, r30
     302:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divmodhi4>
     306:	58 2f       	mov	r21, r24
     308:	dc 01       	movw	r26, r24
     30a:	a3 57       	subi	r26, 0x73	; 115
     30c:	be 4f       	sbci	r27, 0xFE	; 254
     30e:	8c 91       	ld	r24, X
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	29 f4       	brne	.+10     	; 0x31e <__vector_21+0x9a>
     314:	c0 93 8a 01 	sts	0x018A, r28	; 0x80018a <__data_end>
			{
				canalConvirtiendo=(canalConvirtiendo+i)%6;
     318:	50 93 d1 01 	sts	0x01D1, r21	; 0x8001d1 <canalConvirtiendo>
				break;
     31c:	09 c0       	rjmp	.+18     	; 0x330 <__vector_21+0xac>
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	84 0f       	add	r24, r20
     322:	2f 5f       	subi	r18, 0xFF	; 255
     324:	3f 4f       	sbci	r19, 0xFF	; 255
	if(contador>=100)
	{
		valor_leido = ADC;
		fnLlamar = canalConvirtiendo;
		fnqueue_add(llamarCallback);
		for(i=1;i<=6;i++)
     326:	c4 2f       	mov	r28, r20
     328:	88 30       	cpi	r24, 0x08	; 8
     32a:	41 f7       	brne	.-48     	; 0x2fc <__vector_21+0x78>
     32c:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <__data_end>
			{
				canalConvirtiendo=(canalConvirtiendo+i)%6;
				break;
			}
		}
        ADMUX &= ~(1<<MUX3 | 1<<MUX2 | 1<<MUX1 | 1<<MUX0);
     330:	ec e7       	ldi	r30, 0x7C	; 124
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	80 7f       	andi	r24, 0xF0	; 240
     338:	80 83       	st	Z, r24
        switch(canalConvirtiendo)
     33a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <canalConvirtiendo>
     33e:	83 30       	cpi	r24, 0x03	; 3
     340:	c1 f0       	breq	.+48     	; 0x372 <__vector_21+0xee>
     342:	28 f4       	brcc	.+10     	; 0x34e <__vector_21+0xca>
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	49 f0       	breq	.+18     	; 0x35a <__vector_21+0xd6>
     348:	82 30       	cpi	r24, 0x02	; 2
     34a:	69 f0       	breq	.+26     	; 0x366 <__vector_21+0xe2>
     34c:	29 c0       	rjmp	.+82     	; 0x3a0 <__vector_21+0x11c>
     34e:	85 30       	cpi	r24, 0x05	; 5
     350:	e1 f0       	breq	.+56     	; 0x38a <__vector_21+0x106>
     352:	a8 f0       	brcs	.+42     	; 0x37e <__vector_21+0xfa>
     354:	86 30       	cpi	r24, 0x06	; 6
     356:	f9 f0       	breq	.+62     	; 0x396 <__vector_21+0x112>
     358:	23 c0       	rjmp	.+70     	; 0x3a0 <__vector_21+0x11c>
        {
            case 0: break;
            case 1:
            {
                ADMUX |= (1<<MUX0);
     35a:	ec e7       	ldi	r30, 0x7C	; 124
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	81 60       	ori	r24, 0x01	; 1
     362:	80 83       	st	Z, r24
            }break;
     364:	1d c0       	rjmp	.+58     	; 0x3a0 <__vector_21+0x11c>
            case 2:
            {
                ADMUX |= (1<<MUX1);
     366:	ec e7       	ldi	r30, 0x7C	; 124
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	82 60       	ori	r24, 0x02	; 2
     36e:	80 83       	st	Z, r24
            }break;
     370:	17 c0       	rjmp	.+46     	; 0x3a0 <__vector_21+0x11c>
            case 3:
            {
                ADMUX |= ( (1<<MUX1) | (1<<MUX0));
     372:	ec e7       	ldi	r30, 0x7C	; 124
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	83 60       	ori	r24, 0x03	; 3
     37a:	80 83       	st	Z, r24
            }break;
     37c:	11 c0       	rjmp	.+34     	; 0x3a0 <__vector_21+0x11c>
            case 4:
            {
                ADMUX |= (1<<MUX2);
     37e:	ec e7       	ldi	r30, 0x7C	; 124
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	84 60       	ori	r24, 0x04	; 4
     386:	80 83       	st	Z, r24
            }break;
     388:	0b c0       	rjmp	.+22     	; 0x3a0 <__vector_21+0x11c>
            case 5:
            {
                ADMUX |= ((1<<MUX2)|(1<<MUX0));
     38a:	ec e7       	ldi	r30, 0x7C	; 124
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	85 60       	ori	r24, 0x05	; 5
     392:	80 83       	st	Z, r24
            }break;
     394:	05 c0       	rjmp	.+10     	; 0x3a0 <__vector_21+0x11c>
            case 6:
            {
                ADMUX |= ((1<<MUX2) |(1<<MUX1));
     396:	ec e7       	ldi	r30, 0x7C	; 124
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	86 60       	ori	r24, 0x06	; 6
     39e:	80 83       	st	Z, r24
            }break;
        }
		contador = 0;
     3a0:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <contador>
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <__vector_21+0x128>
	} else
	{
		contador++;
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <contador>

	}
	ADCSRA |= 1<<ADSC;
     3ac:	ea e7       	ldi	r30, 0x7A	; 122
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	80 64       	ori	r24, 0x40	; 64
     3b4:	80 83       	st	Z, r24

}
     3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <__vector_21+0x142>
     3b8:	2e 5f       	subi	r18, 0xFE	; 254
     3ba:	3f 4f       	sbci	r19, 0xFF	; 255
	if(contador>=100)
	{
		valor_leido = ADC;
		fnLlamar = canalConvirtiendo;
		fnqueue_add(llamarCallback);
		for(i=1;i<=6;i++)
     3bc:	43 e0       	ldi	r20, 0x03	; 3
     3be:	c2 e0       	ldi	r28, 0x02	; 2
		{
			if(seteados[(canalConvirtiendo+i)%6]==1)
     3c0:	e6 e0       	ldi	r30, 0x06	; 6
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	9c cf       	rjmp	.-200    	; 0x2fe <__vector_21+0x7a>
		contador++;

	}
	ADCSRA |= 1<<ADSC;

}
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	cf 91       	pop	r28
     3cc:	bf 91       	pop	r27
     3ce:	af 91       	pop	r26
     3d0:	9f 91       	pop	r25
     3d2:	8f 91       	pop	r24
     3d4:	7f 91       	pop	r23
     3d6:	6f 91       	pop	r22
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <_Z14critical_beginv>:
    // módulo de región crítica. Esto puede suceder cuando se está ejecutando
    // una rutina de interrupción. En este caso, no deshabilitar las
    // interrupciones

    // Lectura atómica del registro
    uint8_t status_register = SREG;
     3ea:	2f b7       	in	r18, 0x3f	; 63
    cli();
     3ec:	f8 94       	cli

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
     3ee:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZL11anidamiento>
     3f2:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZL11anidamiento+0x1>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     3f6:	89 2b       	or	r24, r25
     3f8:	19 f4       	brne	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
     3fa:	22 23       	and	r18, r18
     3fc:	9c f4       	brge	.+38     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     3fe:	08 c0       	rjmp	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     400:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZL11anidamiento>
     404:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZL11anidamiento+0x1>
     408:	89 2b       	or	r24, r25
     40a:	91 f0       	breq	.+36     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     40c:	22 23       	and	r18, r18
     40e:	84 f0       	brlt	.+32     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
    {
        anidamiento++;
     410:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZL11anidamiento>
     414:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZL11anidamiento+0x1>
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <_ZL11anidamiento+0x1>
     41e:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <_ZL11anidamiento>
     422:	08 95       	ret
    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     424:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZL11anidamiento>
     428:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZL11anidamiento+0x1>
     42c:	89 2b       	or	r24, r25
     42e:	81 f7       	brne	.-32     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     430:	08 95       	ret

00000432 <_Z12critical_endv>:
    // crítica, no hacer nada.
}

void critical_end(void)
{
    uint8_t status_register = SREG;
     432:	2f b7       	in	r18, 0x3f	; 63
    cli();
     434:	f8 94       	cli

    if (anidamiento > 0) {
     436:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZL11anidamiento>
     43a:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZL11anidamiento+0x1>
     43e:	18 16       	cp	r1, r24
     440:	19 06       	cpc	r1, r25
     442:	8c f4       	brge	.+34     	; 0x466 <_Z12critical_endv+0x34>
        anidamiento--;
     444:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZL11anidamiento>
     448:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZL11anidamiento+0x1>
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <_ZL11anidamiento+0x1>
     452:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <_ZL11anidamiento>
        if (anidamiento == 0)
     456:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZL11anidamiento>
     45a:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZL11anidamiento+0x1>
     45e:	89 2b       	or	r24, r25
     460:	29 f4       	brne	.+10     	; 0x46c <_Z12critical_endv+0x3a>
            sei();
     462:	78 94       	sei
     464:	08 95       	ret
    }
    else if ((status_register & 0x80) != 0)
     466:	22 23       	and	r18, r18
     468:	0c f4       	brge	.+2      	; 0x46c <_Z12critical_endv+0x3a>
        sei();
     46a:	78 94       	sei
     46c:	08 95       	ret

0000046e <_Z12fnqueue_initv>:
	fnqueue_tail,
	fnqueue_count;

bool fnqueue_init(void)
{
	fnqueue_head = 0;
     46e:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <_ZL12fnqueue_head>
	fnqueue_tail = 0;
     472:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <_ZL12fnqueue_tail>
	fnqueue_count = 0;
     476:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <_ZL13fnqueue_count>
    
    return true;
}
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	08 95       	ret

0000047e <_Z11fnqueue_runv>:

bool fnqueue_run(void)
{
    critical_begin();
     47e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z14critical_beginv>
    if (fnqueue_count > 0)
     482:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <_ZL13fnqueue_count>
     486:	88 23       	and	r24, r24
     488:	11 f1       	breq	.+68     	; 0x4ce <_Z11fnqueue_runv+0x50>
    {
        critical_end();
     48a:	0e 94 19 02 	call	0x432	; 0x432 <_Z12critical_endv>

        fnqueue_functions[fnqueue_head]();
     48e:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <_ZL12fnqueue_head>
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	ee 0f       	add	r30, r30
     496:	ff 1f       	adc	r31, r31
     498:	e8 52       	subi	r30, 0x28	; 40
     49a:	fe 4f       	sbci	r31, 0xFE	; 254
     49c:	01 90       	ld	r0, Z+
     49e:	f0 81       	ld	r31, Z
     4a0:	e0 2d       	mov	r30, r0
     4a2:	09 95       	icall
        critical_begin();
     4a4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z14critical_beginv>
        fnqueue_head = (fnqueue_head + 1) % FNQUEUE_LENGTH;
     4a8:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZL12fnqueue_head>
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	8f 70       	andi	r24, 0x0F	; 15
     4b2:	90 78       	andi	r25, 0x80	; 128
     4b4:	99 23       	and	r25, r25
     4b6:	24 f4       	brge	.+8      	; 0x4c0 <_Z11fnqueue_runv+0x42>
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	80 6f       	ori	r24, 0xF0	; 240
     4bc:	9f 6f       	ori	r25, 0xFF	; 255
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <_ZL12fnqueue_head>
        fnqueue_count--;
     4c4:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <_ZL13fnqueue_count>
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <_ZL13fnqueue_count>
    }
    critical_end();
     4ce:	0e 94 19 02 	call	0x432	; 0x432 <_Z12critical_endv>

	return 1;
}
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	08 95       	ret

000004d6 <_Z11fnqueue_addPFvvE>:

bool fnqueue_add(void (*function)(void))
{
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	ec 01       	movw	r28, r24
	bool result = false;
	
    critical_begin();
     4dc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z14critical_beginv>
    if (fnqueue_count < FNQUEUE_LENGTH)
     4e0:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <_ZL13fnqueue_count>
     4e4:	20 31       	cpi	r18, 0x10	; 16
     4e6:	d0 f4       	brcc	.+52     	; 0x51c <_Z11fnqueue_addPFvvE+0x46>
    {
        fnqueue_functions[fnqueue_tail] = function;
     4e8:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <_ZL12fnqueue_tail>
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	fc 01       	movw	r30, r24
     4f0:	ee 0f       	add	r30, r30
     4f2:	ff 1f       	adc	r31, r31
     4f4:	e8 52       	subi	r30, 0x28	; 40
     4f6:	fe 4f       	sbci	r31, 0xFE	; 254
     4f8:	d1 83       	std	Z+1, r29	; 0x01
     4fa:	c0 83       	st	Z, r28
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	8f 70       	andi	r24, 0x0F	; 15
     500:	90 78       	andi	r25, 0x80	; 128
     502:	99 23       	and	r25, r25
     504:	24 f4       	brge	.+8      	; 0x50e <_Z11fnqueue_addPFvvE+0x38>
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	80 6f       	ori	r24, 0xF0	; 240
     50a:	9f 6f       	ori	r25, 0xFF	; 255
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <_ZL12fnqueue_tail>
        fnqueue_count++;
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <_ZL13fnqueue_count>
        result = true;
     518:	c1 e0       	ldi	r28, 0x01	; 1
     51a:	01 c0       	rjmp	.+2      	; 0x51e <_Z11fnqueue_addPFvvE+0x48>
	return 1;
}

bool fnqueue_add(void (*function)(void))
{
	bool result = false;
     51c:	c0 e0       	ldi	r28, 0x00	; 0
        fnqueue_functions[fnqueue_tail] = function;
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
        fnqueue_count++;
        result = true;
    }
    critical_end();
     51e:	0e 94 19 02 	call	0x432	; 0x432 <_Z12critical_endv>
    return result;
     522:	8c 2f       	mov	r24, r28
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <_ZN5Print17availableForWriteEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	08 95       	ret

00000530 <_ZN5Print5flushEv>:
     530:	08 95       	ret

00000532 <_ZN13LiquidCrystal11pulseEnableEv>:
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	ec 01       	movw	r28, r24
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	8e 81       	ldd	r24, Y+6	; 0x06
     53c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <digitalWrite>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 e7 06 	call	0xdce	; 0xdce <delayMicroseconds>
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	8e 81       	ldd	r24, Y+6	; 0x06
     54c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <digitalWrite>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 e7 06 	call	0xdce	; 0xdce <delayMicroseconds>
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	8e 81       	ldd	r24, Y+6	; 0x06
     55c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <digitalWrite>
     560:	84 e6       	ldi	r24, 0x64	; 100
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 e7 06 	call	0xdce	; 0xdce <delayMicroseconds>
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <_ZN13LiquidCrystal10write4bitsEh>:
     56e:	cf 92       	push	r12
     570:	df 92       	push	r13
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	6c 01       	movw	r12, r24
     580:	8c 01       	movw	r16, r24
     582:	09 5f       	subi	r16, 0xF9	; 249
     584:	1f 4f       	sbci	r17, 0xFF	; 255
     586:	c0 e0       	ldi	r28, 0x00	; 0
     588:	d0 e0       	ldi	r29, 0x00	; 0
     58a:	e6 2e       	mov	r14, r22
     58c:	f1 2c       	mov	r15, r1
     58e:	b7 01       	movw	r22, r14
     590:	0c 2e       	mov	r0, r28
     592:	02 c0       	rjmp	.+4      	; 0x598 <_ZN13LiquidCrystal10write4bitsEh+0x2a>
     594:	75 95       	asr	r23
     596:	67 95       	ror	r22
     598:	0a 94       	dec	r0
     59a:	e2 f7       	brpl	.-8      	; 0x594 <_ZN13LiquidCrystal10write4bitsEh+0x26>
     59c:	61 70       	andi	r22, 0x01	; 1
     59e:	f8 01       	movw	r30, r16
     5a0:	81 91       	ld	r24, Z+
     5a2:	8f 01       	movw	r16, r30
     5a4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <digitalWrite>
     5a8:	21 96       	adiw	r28, 0x01	; 1
     5aa:	c4 30       	cpi	r28, 0x04	; 4
     5ac:	d1 05       	cpc	r29, r1
     5ae:	79 f7       	brne	.-34     	; 0x58e <_ZN13LiquidCrystal10write4bitsEh+0x20>
     5b0:	c6 01       	movw	r24, r12
     5b2:	0e 94 99 02 	call	0x532	; 0x532 <_ZN13LiquidCrystal11pulseEnableEv>
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	08 95       	ret

000005c8 <_ZN13LiquidCrystal10write8bitsEh>:
     5c8:	cf 92       	push	r12
     5ca:	df 92       	push	r13
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	6c 01       	movw	r12, r24
     5da:	8c 01       	movw	r16, r24
     5dc:	09 5f       	subi	r16, 0xF9	; 249
     5de:	1f 4f       	sbci	r17, 0xFF	; 255
     5e0:	c0 e0       	ldi	r28, 0x00	; 0
     5e2:	d0 e0       	ldi	r29, 0x00	; 0
     5e4:	e6 2e       	mov	r14, r22
     5e6:	f1 2c       	mov	r15, r1
     5e8:	b7 01       	movw	r22, r14
     5ea:	0c 2e       	mov	r0, r28
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <_ZN13LiquidCrystal10write8bitsEh+0x2a>
     5ee:	75 95       	asr	r23
     5f0:	67 95       	ror	r22
     5f2:	0a 94       	dec	r0
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <_ZN13LiquidCrystal10write8bitsEh+0x26>
     5f6:	61 70       	andi	r22, 0x01	; 1
     5f8:	f8 01       	movw	r30, r16
     5fa:	81 91       	ld	r24, Z+
     5fc:	8f 01       	movw	r16, r30
     5fe:	0e 94 8e 07 	call	0xf1c	; 0xf1c <digitalWrite>
     602:	21 96       	adiw	r28, 0x01	; 1
     604:	c8 30       	cpi	r28, 0x08	; 8
     606:	d1 05       	cpc	r29, r1
     608:	79 f7       	brne	.-34     	; 0x5e8 <_ZN13LiquidCrystal10write8bitsEh+0x20>
     60a:	c6 01       	movw	r24, r12
     60c:	0e 94 99 02 	call	0x532	; 0x532 <_ZN13LiquidCrystal11pulseEnableEv>
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	08 95       	ret

00000622 <_ZN13LiquidCrystal4sendEhh>:
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	ec 01       	movw	r28, r24
     62a:	16 2f       	mov	r17, r22
     62c:	64 2f       	mov	r22, r20
     62e:	8c 81       	ldd	r24, Y+4	; 0x04
     630:	0e 94 8e 07 	call	0xf1c	; 0xf1c <digitalWrite>
     634:	8d 81       	ldd	r24, Y+5	; 0x05
     636:	8f 3f       	cpi	r24, 0xFF	; 255
     638:	19 f0       	breq	.+6      	; 0x640 <_ZN13LiquidCrystal4sendEhh+0x1e>
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <digitalWrite>
     640:	8f 85       	ldd	r24, Y+15	; 0x0f
     642:	84 ff       	sbrs	r24, 4
     644:	05 c0       	rjmp	.+10     	; 0x650 <_ZN13LiquidCrystal4sendEhh+0x2e>
     646:	61 2f       	mov	r22, r17
     648:	ce 01       	movw	r24, r28
     64a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_ZN13LiquidCrystal10write8bitsEh>
     64e:	11 c0       	rjmp	.+34     	; 0x672 <_ZN13LiquidCrystal4sendEhh+0x50>
     650:	61 2f       	mov	r22, r17
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	75 95       	asr	r23
     656:	67 95       	ror	r22
     658:	75 95       	asr	r23
     65a:	67 95       	ror	r22
     65c:	75 95       	asr	r23
     65e:	67 95       	ror	r22
     660:	75 95       	asr	r23
     662:	67 95       	ror	r22
     664:	ce 01       	movw	r24, r28
     666:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN13LiquidCrystal10write4bitsEh>
     66a:	61 2f       	mov	r22, r17
     66c:	ce 01       	movw	r24, r28
     66e:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN13LiquidCrystal10write4bitsEh>
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	08 95       	ret

0000067a <_ZN13LiquidCrystal5clearEv>:
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13LiquidCrystal4sendEhh>
     682:	80 ed       	ldi	r24, 0xD0	; 208
     684:	97 e0       	ldi	r25, 0x07	; 7
     686:	0e 94 e7 06 	call	0xdce	; 0xdce <delayMicroseconds>
     68a:	08 95       	ret

0000068c <_ZN13LiquidCrystal9setCursorEhh>:
     68c:	fc 01       	movw	r30, r24
     68e:	44 30       	cpi	r20, 0x04	; 4
     690:	08 f0       	brcs	.+2      	; 0x694 <_ZN13LiquidCrystal9setCursorEhh+0x8>
     692:	43 e0       	ldi	r20, 0x03	; 3
     694:	83 89       	ldd	r24, Z+19	; 0x13
     696:	48 17       	cp	r20, r24
     698:	10 f0       	brcs	.+4      	; 0x69e <_ZN13LiquidCrystal9setCursorEhh+0x12>
     69a:	4f ef       	ldi	r20, 0xFF	; 255
     69c:	48 0f       	add	r20, r24
     69e:	df 01       	movw	r26, r30
     6a0:	a4 0f       	add	r26, r20
     6a2:	b1 1d       	adc	r27, r1
     6a4:	54 96       	adiw	r26, 0x14	; 20
     6a6:	9c 91       	ld	r25, X
     6a8:	69 0f       	add	r22, r25
     6aa:	60 68       	ori	r22, 0x80	; 128
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	cf 01       	movw	r24, r30
     6b0:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13LiquidCrystal4sendEhh>
     6b4:	08 95       	ret

000006b6 <_ZN13LiquidCrystal7displayEv>:
     6b6:	fc 01       	movw	r30, r24
     6b8:	60 89       	ldd	r22, Z+16	; 0x10
     6ba:	26 2f       	mov	r18, r22
     6bc:	24 60       	ori	r18, 0x04	; 4
     6be:	20 8b       	std	Z+16, r18	; 0x10
     6c0:	6c 60       	ori	r22, 0x0C	; 12
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13LiquidCrystal4sendEhh>
     6c8:	08 95       	ret

000006ca <_ZN13LiquidCrystal5beginEhhh>:
     6ca:	af 92       	push	r10
     6cc:	bf 92       	push	r11
     6ce:	cf 92       	push	r12
     6d0:	df 92       	push	r13
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	ec 01       	movw	r28, r24
     6e0:	42 30       	cpi	r20, 0x02	; 2
     6e2:	18 f0       	brcs	.+6      	; 0x6ea <_ZN13LiquidCrystal5beginEhhh+0x20>
     6e4:	8f 85       	ldd	r24, Y+15	; 0x0f
     6e6:	88 60       	ori	r24, 0x08	; 8
     6e8:	8f 87       	std	Y+15, r24	; 0x0f
     6ea:	4b 8b       	std	Y+19, r20	; 0x13
     6ec:	1c 8a       	std	Y+20, r1	; 0x14
     6ee:	80 e4       	ldi	r24, 0x40	; 64
     6f0:	8d 8b       	std	Y+21, r24	; 0x15
     6f2:	6e 8b       	std	Y+22, r22	; 0x16
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	60 5c       	subi	r22, 0xC0	; 192
     6f8:	7f 4f       	sbci	r23, 0xFF	; 255
     6fa:	6f 8b       	std	Y+23, r22	; 0x17
     6fc:	22 23       	and	r18, r18
     6fe:	29 f0       	breq	.+10     	; 0x70a <_ZN13LiquidCrystal5beginEhhh+0x40>
     700:	41 30       	cpi	r20, 0x01	; 1
     702:	19 f4       	brne	.+6      	; 0x70a <_ZN13LiquidCrystal5beginEhhh+0x40>
     704:	8f 85       	ldd	r24, Y+15	; 0x0f
     706:	84 60       	ori	r24, 0x04	; 4
     708:	8f 87       	std	Y+15, r24	; 0x0f
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	8c 81       	ldd	r24, Y+4	; 0x04
     70e:	0e 94 55 07 	call	0xeaa	; 0xeaa <pinMode>
     712:	8d 81       	ldd	r24, Y+5	; 0x05
     714:	8f 3f       	cpi	r24, 0xFF	; 255
     716:	19 f0       	breq	.+6      	; 0x71e <_ZN13LiquidCrystal5beginEhhh+0x54>
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	0e 94 55 07 	call	0xeaa	; 0xeaa <pinMode>
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	8e 81       	ldd	r24, Y+6	; 0x06
     722:	0e 94 55 07 	call	0xeaa	; 0xeaa <pinMode>
     726:	7e 01       	movw	r14, r28
     728:	87 e0       	ldi	r24, 0x07	; 7
     72a:	e8 0e       	add	r14, r24
     72c:	f1 1c       	adc	r15, r1
     72e:	00 e0       	ldi	r16, 0x00	; 0
     730:	10 e0       	ldi	r17, 0x00	; 0
     732:	68 94       	set
     734:	aa 24       	eor	r10, r10
     736:	a3 f8       	bld	r10, 3
     738:	b1 2c       	mov	r11, r1
     73a:	68 94       	set
     73c:	cc 24       	eor	r12, r12
     73e:	c2 f8       	bld	r12, 2
     740:	d1 2c       	mov	r13, r1
     742:	8f 85       	ldd	r24, Y+15	; 0x0f
     744:	84 fd       	sbrc	r24, 4
     746:	03 c0       	rjmp	.+6      	; 0x74e <_ZN13LiquidCrystal5beginEhhh+0x84>
     748:	8c 2d       	mov	r24, r12
     74a:	9d 2d       	mov	r25, r13
     74c:	02 c0       	rjmp	.+4      	; 0x752 <_ZN13LiquidCrystal5beginEhhh+0x88>
     74e:	8a 2d       	mov	r24, r10
     750:	9b 2d       	mov	r25, r11
     752:	08 17       	cp	r16, r24
     754:	19 07       	cpc	r17, r25
     756:	4c f4       	brge	.+18     	; 0x76a <_ZN13LiquidCrystal5beginEhhh+0xa0>
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	f7 01       	movw	r30, r14
     75c:	81 91       	ld	r24, Z+
     75e:	7f 01       	movw	r14, r30
     760:	0e 94 55 07 	call	0xeaa	; 0xeaa <pinMode>
     764:	0f 5f       	subi	r16, 0xFF	; 255
     766:	1f 4f       	sbci	r17, 0xFF	; 255
     768:	ec cf       	rjmp	.-40     	; 0x742 <_ZN13LiquidCrystal5beginEhhh+0x78>
     76a:	80 e5       	ldi	r24, 0x50	; 80
     76c:	93 ec       	ldi	r25, 0xC3	; 195
     76e:	0e 94 e7 06 	call	0xdce	; 0xdce <delayMicroseconds>
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	8c 81       	ldd	r24, Y+4	; 0x04
     776:	0e 94 8e 07 	call	0xf1c	; 0xf1c <digitalWrite>
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	8e 81       	ldd	r24, Y+6	; 0x06
     77e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <digitalWrite>
     782:	8d 81       	ldd	r24, Y+5	; 0x05
     784:	8f 3f       	cpi	r24, 0xFF	; 255
     786:	19 f0       	breq	.+6      	; 0x78e <_ZN13LiquidCrystal5beginEhhh+0xc4>
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <digitalWrite>
     78e:	6f 85       	ldd	r22, Y+15	; 0x0f
     790:	64 fd       	sbrc	r22, 4
     792:	1d c0       	rjmp	.+58     	; 0x7ce <_ZN13LiquidCrystal5beginEhhh+0x104>
     794:	63 e0       	ldi	r22, 0x03	; 3
     796:	ce 01       	movw	r24, r28
     798:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN13LiquidCrystal10write4bitsEh>
     79c:	84 e9       	ldi	r24, 0x94	; 148
     79e:	91 e1       	ldi	r25, 0x11	; 17
     7a0:	0e 94 e7 06 	call	0xdce	; 0xdce <delayMicroseconds>
     7a4:	63 e0       	ldi	r22, 0x03	; 3
     7a6:	ce 01       	movw	r24, r28
     7a8:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN13LiquidCrystal10write4bitsEh>
     7ac:	84 e9       	ldi	r24, 0x94	; 148
     7ae:	91 e1       	ldi	r25, 0x11	; 17
     7b0:	0e 94 e7 06 	call	0xdce	; 0xdce <delayMicroseconds>
     7b4:	63 e0       	ldi	r22, 0x03	; 3
     7b6:	ce 01       	movw	r24, r28
     7b8:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN13LiquidCrystal10write4bitsEh>
     7bc:	86 e9       	ldi	r24, 0x96	; 150
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 e7 06 	call	0xdce	; 0xdce <delayMicroseconds>
     7c4:	62 e0       	ldi	r22, 0x02	; 2
     7c6:	ce 01       	movw	r24, r28
     7c8:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN13LiquidCrystal10write4bitsEh>
     7cc:	19 c0       	rjmp	.+50     	; 0x800 <_ZN13LiquidCrystal5beginEhhh+0x136>
     7ce:	60 62       	ori	r22, 0x20	; 32
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	ce 01       	movw	r24, r28
     7d4:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13LiquidCrystal4sendEhh>
     7d8:	84 e9       	ldi	r24, 0x94	; 148
     7da:	91 e1       	ldi	r25, 0x11	; 17
     7dc:	0e 94 e7 06 	call	0xdce	; 0xdce <delayMicroseconds>
     7e0:	6f 85       	ldd	r22, Y+15	; 0x0f
     7e2:	60 62       	ori	r22, 0x20	; 32
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	ce 01       	movw	r24, r28
     7e8:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13LiquidCrystal4sendEhh>
     7ec:	86 e9       	ldi	r24, 0x96	; 150
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 e7 06 	call	0xdce	; 0xdce <delayMicroseconds>
     7f4:	6f 85       	ldd	r22, Y+15	; 0x0f
     7f6:	60 62       	ori	r22, 0x20	; 32
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	ce 01       	movw	r24, r28
     7fc:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13LiquidCrystal4sendEhh>
     800:	6f 85       	ldd	r22, Y+15	; 0x0f
     802:	60 62       	ori	r22, 0x20	; 32
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	ce 01       	movw	r24, r28
     808:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13LiquidCrystal4sendEhh>
     80c:	84 e0       	ldi	r24, 0x04	; 4
     80e:	88 8b       	std	Y+16, r24	; 0x10
     810:	ce 01       	movw	r24, r28
     812:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN13LiquidCrystal7displayEv>
     816:	ce 01       	movw	r24, r28
     818:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN13LiquidCrystal5clearEv>
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	89 8b       	std	Y+17, r24	; 0x11
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	66 e0       	ldi	r22, 0x06	; 6
     824:	ce 01       	movw	r24, r28
     826:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13LiquidCrystal4sendEhh>
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	df 90       	pop	r13
     838:	cf 90       	pop	r12
     83a:	bf 90       	pop	r11
     83c:	af 90       	pop	r10
     83e:	08 95       	ret

00000840 <_ZN13LiquidCrystalC1Ehhhhhh>:
     840:	cf 92       	push	r12
     842:	ef 92       	push	r14
     844:	0f 93       	push	r16
     846:	fc 01       	movw	r30, r24
     848:	13 82       	std	Z+3, r1	; 0x03
     84a:	12 82       	std	Z+2, r1	; 0x02
     84c:	85 e0       	ldi	r24, 0x05	; 5
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	91 83       	std	Z+1, r25	; 0x01
     852:	80 83       	st	Z, r24
     854:	64 83       	std	Z+4, r22	; 0x04
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	85 83       	std	Z+5, r24	; 0x05
     85a:	46 83       	std	Z+6, r20	; 0x06
     85c:	27 83       	std	Z+7, r18	; 0x07
     85e:	00 87       	std	Z+8, r16	; 0x08
     860:	e1 86       	std	Z+9, r14	; 0x09
     862:	c2 86       	std	Z+10, r12	; 0x0a
     864:	13 86       	std	Z+11, r1	; 0x0b
     866:	14 86       	std	Z+12, r1	; 0x0c
     868:	15 86       	std	Z+13, r1	; 0x0d
     86a:	16 86       	std	Z+14, r1	; 0x0e
     86c:	17 86       	std	Z+15, r1	; 0x0f
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	60 e1       	ldi	r22, 0x10	; 16
     874:	cf 01       	movw	r24, r30
     876:	0e 94 65 03 	call	0x6ca	; 0x6ca <_ZN13LiquidCrystal5beginEhhh>
     87a:	0f 91       	pop	r16
     87c:	ef 90       	pop	r14
     87e:	cf 90       	pop	r12
     880:	08 95       	ret

00000882 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	0e 94 11 03 	call	0x622	; 0x622 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	08 95       	ret

0000088e <_Z11guardarTempa>:
/************************/
/*                          AUXILIARES                                  */
/************************/
void guardarTemp(int8_t temp)
{
	temps[indiceArreglo]=temp;
     88e:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <_ZL13indiceArreglo>
     892:	02 2e       	mov	r0, r18
     894:	00 0c       	add	r0, r0
     896:	33 0b       	sbc	r19, r19
     898:	f9 01       	movw	r30, r18
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	ea 5e       	subi	r30, 0xEA	; 234
     8a0:	fd 4f       	sbci	r31, 0xFD	; 253
     8a2:	08 2e       	mov	r0, r24
     8a4:	00 0c       	add	r0, r0
     8a6:	99 0b       	sbc	r25, r25
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	80 83       	st	Z, r24
	indiceArreglo=(indiceArreglo+1)%100;
     8ac:	c9 01       	movw	r24, r18
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	64 e6       	ldi	r22, 0x64	; 100
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divmodhi4>
     8b8:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <_ZL13indiceArreglo>
	if (cantTemps<=100)
     8bc:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <_ZL9cantTemps>
     8c0:	85 36       	cpi	r24, 0x65	; 101
     8c2:	1c f4       	brge	.+6      	; 0x8ca <_Z11guardarTempa+0x3c>
	cantTemps++;
     8c4:	8f 5f       	subi	r24, 0xFF	; 255
     8c6:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <_ZL9cantTemps>
     8ca:	08 95       	ret

000008cc <_Z17updateCurrentTempv>:
}

void updateCurrentTemp()
{
	tempActual=temperaturaMedida;
     8cc:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <_ZL17temperaturaMedida>
     8d0:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZL10tempActual>
     8d4:	08 95       	ret

000008d6 <_Z17updateAverageTempv>:
}
void updateAverageTemp()
{
	int16_t sumaTemps=0;
	tempPromedio=0;
     8d6:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <_ZL12tempPromedio>
	if(cantTemps>0)
     8da:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <_ZL9cantTemps>
     8de:	14 16       	cp	r1, r20
     8e0:	ec f4       	brge	.+58     	; 0x91c <__stack+0x1d>
	{
		for(int i = 0; i<cantTemps; i++)
     8e2:	64 2f       	mov	r22, r20
     8e4:	04 2e       	mov	r0, r20
     8e6:	00 0c       	add	r0, r0
     8e8:	77 0b       	sbc	r23, r23
     8ea:	16 16       	cp	r1, r22
     8ec:	17 06       	cpc	r1, r23
     8ee:	84 f4       	brge	.+32     	; 0x910 <__stack+0x11>
     8f0:	e6 e1       	ldi	r30, 0x16	; 22
     8f2:	f2 e0       	ldi	r31, 0x02	; 2
     8f4:	44 0f       	add	r20, r20
     8f6:	55 0b       	sbc	r21, r21
     8f8:	4a 5e       	subi	r20, 0xEA	; 234
     8fa:	5d 4f       	sbci	r21, 0xFD	; 253
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
		{
			sumaTemps+=temps[i];
     900:	21 91       	ld	r18, Z+
     902:	31 91       	ld	r19, Z+
     904:	82 0f       	add	r24, r18
     906:	93 1f       	adc	r25, r19
{
	int16_t sumaTemps=0;
	tempPromedio=0;
	if(cantTemps>0)
	{
		for(int i = 0; i<cantTemps; i++)
     908:	e4 17       	cp	r30, r20
     90a:	f5 07       	cpc	r31, r21
     90c:	c9 f7       	brne	.-14     	; 0x900 <__stack+0x1>
     90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0x15>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
		{
			sumaTemps+=temps[i];
		}
		tempPromedio=sumaTemps/cantTemps;
     914:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divmodhi4>
     918:	60 93 13 02 	sts	0x0213, r22	; 0x800213 <_ZL12tempPromedio>
     91c:	08 95       	ret

0000091e <_Z13updateMaxTempv>:
	}
}
void updateMaxTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     91e:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <_ZL13indiceArreglo>
     922:	16 16       	cp	r1, r22
     924:	bc f4       	brge	.+46     	; 0x954 <_Z13updateMaxTempv+0x36>
     926:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <_ZL7tempMax>
     92a:	e6 e1       	ldi	r30, 0x16	; 22
     92c:	f2 e0       	ldi	r31, 0x02	; 2
     92e:	66 0f       	add	r22, r22
     930:	77 0b       	sbc	r23, r23
     932:	6a 5e       	subi	r22, 0xEA	; 234
     934:	7d 4f       	sbci	r23, 0xFD	; 253
	{
		if (temps[i]>tempMax)
     936:	81 91       	ld	r24, Z+
     938:	91 91       	ld	r25, Z+
     93a:	24 2f       	mov	r18, r20
     93c:	04 2e       	mov	r0, r20
     93e:	00 0c       	add	r0, r0
     940:	33 0b       	sbc	r19, r19
     942:	28 17       	cp	r18, r24
     944:	39 07       	cpc	r19, r25
     946:	08 f4       	brcc	.+2      	; 0x94a <_Z13updateMaxTempv+0x2c>
		{
			tempMax=temps[i];
     948:	48 2f       	mov	r20, r24
		tempPromedio=sumaTemps/cantTemps;
	}
}
void updateMaxTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     94a:	e6 17       	cp	r30, r22
     94c:	f7 07       	cpc	r31, r23
     94e:	99 f7       	brne	.-26     	; 0x936 <_Z13updateMaxTempv+0x18>
     950:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <_ZL7tempMax>
     954:	08 95       	ret

00000956 <_Z13updateMinTempv>:
		}
	}
}
void updateMinTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     956:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <_ZL13indiceArreglo>
     95a:	16 16       	cp	r1, r22
     95c:	bc f4       	brge	.+46     	; 0x98c <_Z13updateMinTempv+0x36>
     95e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
     962:	e6 e1       	ldi	r30, 0x16	; 22
     964:	f2 e0       	ldi	r31, 0x02	; 2
     966:	66 0f       	add	r22, r22
     968:	77 0b       	sbc	r23, r23
     96a:	6a 5e       	subi	r22, 0xEA	; 234
     96c:	7d 4f       	sbci	r23, 0xFD	; 253
	{
		if (temps[i]<tempMin)
     96e:	81 91       	ld	r24, Z+
     970:	91 91       	ld	r25, Z+
     972:	24 2f       	mov	r18, r20
     974:	04 2e       	mov	r0, r20
     976:	00 0c       	add	r0, r0
     978:	33 0b       	sbc	r19, r19
     97a:	82 17       	cp	r24, r18
     97c:	93 07       	cpc	r25, r19
     97e:	08 f4       	brcc	.+2      	; 0x982 <_Z13updateMinTempv+0x2c>
		{
			tempMin=temps[i];
     980:	48 2f       	mov	r20, r24
		}
	}
}
void updateMinTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     982:	e6 17       	cp	r30, r22
     984:	f7 07       	cpc	r31, r23
     986:	99 f7       	brne	.-26     	; 0x96e <_Z13updateMinTempv+0x18>
     988:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
     98c:	08 95       	ret

0000098e <_Z14tomar_medicioni>:
/************************/


void tomar_medicion(int valor)
{
	temperaturaMedida=valor;
     98e:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <_ZL17temperaturaMedida>
     992:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <_ZL17temperaturaMedida+0x1>
	guardarTemp(valor);
     996:	0e 94 47 04 	call	0x88e	; 0x88e <_Z11guardarTempa>
	updateCurrentTemp();
     99a:	0e 94 66 04 	call	0x8cc	; 0x8cc <_Z17updateCurrentTempv>
	updateMinTemp();
     99e:	0e 94 ab 04 	call	0x956	; 0x956 <_Z13updateMinTempv>
	updateMaxTemp();
     9a2:	0e 94 8f 04 	call	0x91e	; 0x91e <_Z13updateMaxTempv>
	updateAverageTemp();
     9a6:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_Z17updateAverageTempv>
     9aa:	08 95       	ret

000009ac <_Z15showCurrentTempv>:
		}
	}
}
void showCurrentTemp()
{
	lcd.setCursor(0,0);
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	88 ef       	ldi	r24, 0xF8	; 248
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Actual       ");
     9b8:	6d e0       	ldi	r22, 0x0D	; 13
     9ba:	71 e0       	ldi	r23, 0x01	; 1
     9bc:	88 ef       	ldi	r24, 0xF8	; 248
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN5Print5printEPKc>
	lcd.setCursor(1,1);
     9c4:	41 e0       	ldi	r20, 0x01	; 1
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	88 ef       	ldi	r24, 0xF8	; 248
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempActual);
     9d0:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <_ZL10tempActual>
     9d4:	06 2e       	mov	r0, r22
     9d6:	00 0c       	add	r0, r0
     9d8:	77 0b       	sbc	r23, r23
     9da:	4a e0       	ldi	r20, 0x0A	; 10
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	88 ef       	ldi	r24, 0xF8	; 248
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN5Print5printEii>
     9e6:	08 95       	ret

000009e8 <_Z15showAverageTempv>:
}

void showAverageTemp()
{
	lcd.setCursor(0,0);
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	88 ef       	ldi	r24, 0xF8	; 248
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Promedio           ");
     9f4:	60 e2       	ldi	r22, 0x20	; 32
     9f6:	71 e0       	ldi	r23, 0x01	; 1
     9f8:	88 ef       	ldi	r24, 0xF8	; 248
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN5Print5printEPKc>
	lcd.setCursor(1,1);
     a00:	41 e0       	ldi	r20, 0x01	; 1
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	88 ef       	ldi	r24, 0xF8	; 248
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempPromedio);
     a0c:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <_ZL12tempPromedio>
     a10:	06 2e       	mov	r0, r22
     a12:	00 0c       	add	r0, r0
     a14:	77 0b       	sbc	r23, r23
     a16:	4a e0       	ldi	r20, 0x0A	; 10
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	88 ef       	ldi	r24, 0xF8	; 248
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN5Print5printEii>
     a22:	08 95       	ret

00000a24 <_Z11showMaxTempv>:
}

void showMaxTemp()
{
	lcd.setCursor(0,0);
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	88 ef       	ldi	r24, 0xF8	; 248
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Maxima     ");
     a30:	69 e3       	ldi	r22, 0x39	; 57
     a32:	71 e0       	ldi	r23, 0x01	; 1
     a34:	88 ef       	ldi	r24, 0xF8	; 248
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN5Print5printEPKc>
	lcd.setCursor(1,1);
     a3c:	41 e0       	ldi	r20, 0x01	; 1
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	88 ef       	ldi	r24, 0xF8	; 248
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempMax);
     a48:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <_ZL7tempMax>
     a4c:	06 2e       	mov	r0, r22
     a4e:	00 0c       	add	r0, r0
     a50:	77 0b       	sbc	r23, r23
     a52:	4a e0       	ldi	r20, 0x0A	; 10
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	88 ef       	ldi	r24, 0xF8	; 248
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN5Print5printEii>
     a5e:	08 95       	ret

00000a60 <_Z11showMinTempv>:
}

void showMinTemp()
{
	lcd.setCursor(0,0);
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	88 ef       	ldi	r24, 0xF8	; 248
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Minima       ");
     a6c:	6a e4       	ldi	r22, 0x4A	; 74
     a6e:	71 e0       	ldi	r23, 0x01	; 1
     a70:	88 ef       	ldi	r24, 0xF8	; 248
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN5Print5printEPKc>
	lcd.setCursor(1,1);
     a78:	41 e0       	ldi	r20, 0x01	; 1
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	88 ef       	ldi	r24, 0xF8	; 248
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempMin);
     a84:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     a88:	06 2e       	mov	r0, r22
     a8a:	00 0c       	add	r0, r0
     a8c:	77 0b       	sbc	r23, r23
     a8e:	4a e0       	ldi	r20, 0x0A	; 10
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	88 ef       	ldi	r24, 0xF8	; 248
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 a8 0a 	call	0x1550	; 0x1550 <_ZN5Print5printEii>
     a9a:	08 95       	ret

00000a9c <_Z11enviarDatosv>:
		}
	}
}

void enviarDatos()
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     aa0:	c9 ef       	ldi	r28, 0xF9	; 249
     aa2:	d2 e0       	ldi	r29, 0x02	; 2
     aa4:	e8 81       	ld	r30, Y
     aa6:	f9 81       	ldd	r31, Y+1	; 0x01
     aa8:	01 90       	ld	r0, Z+
     aaa:	f0 81       	ld	r31, Z
     aac:	e0 2d       	mov	r30, r0
     aae:	61 e6       	ldi	r22, 0x61	; 97
     ab0:	ce 01       	movw	r24, r28
     ab2:	09 95       	icall
     ab4:	e8 81       	ld	r30, Y
     ab6:	f9 81       	ldd	r31, Y+1	; 0x01
     ab8:	01 90       	ld	r0, Z+
     aba:	f0 81       	ld	r31, Z
     abc:	e0 2d       	mov	r30, r0
     abe:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <_ZL10tempActual>
     ac2:	ce 01       	movw	r24, r28
     ac4:	09 95       	icall
     ac6:	e8 81       	ld	r30, Y
     ac8:	f9 81       	ldd	r31, Y+1	; 0x01
     aca:	01 90       	ld	r0, Z+
     acc:	f0 81       	ld	r31, Z
     ace:	e0 2d       	mov	r30, r0
     ad0:	6d e4       	ldi	r22, 0x4D	; 77
     ad2:	ce 01       	movw	r24, r28
     ad4:	09 95       	icall
     ad6:	e8 81       	ld	r30, Y
     ad8:	f9 81       	ldd	r31, Y+1	; 0x01
     ada:	01 90       	ld	r0, Z+
     adc:	f0 81       	ld	r31, Z
     ade:	e0 2d       	mov	r30, r0
     ae0:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <_ZL7tempMax>
     ae4:	ce 01       	movw	r24, r28
     ae6:	09 95       	icall
     ae8:	e8 81       	ld	r30, Y
     aea:	f9 81       	ldd	r31, Y+1	; 0x01
     aec:	01 90       	ld	r0, Z+
     aee:	f0 81       	ld	r31, Z
     af0:	e0 2d       	mov	r30, r0
     af2:	6d e6       	ldi	r22, 0x6D	; 109
     af4:	ce 01       	movw	r24, r28
     af6:	09 95       	icall
     af8:	e8 81       	ld	r30, Y
     afa:	f9 81       	ldd	r31, Y+1	; 0x01
     afc:	01 90       	ld	r0, Z+
     afe:	f0 81       	ld	r31, Z
     b00:	e0 2d       	mov	r30, r0
     b02:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     b06:	ce 01       	movw	r24, r28
     b08:	09 95       	icall
     b0a:	e8 81       	ld	r30, Y
     b0c:	f9 81       	ldd	r31, Y+1	; 0x01
     b0e:	01 90       	ld	r0, Z+
     b10:	f0 81       	ld	r31, Z
     b12:	e0 2d       	mov	r30, r0
     b14:	60 e7       	ldi	r22, 0x70	; 112
     b16:	ce 01       	movw	r24, r28
     b18:	09 95       	icall
     b1a:	e8 81       	ld	r30, Y
     b1c:	f9 81       	ldd	r31, Y+1	; 0x01
     b1e:	01 90       	ld	r0, Z+
     b20:	f0 81       	ld	r31, Z
     b22:	e0 2d       	mov	r30, r0
     b24:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <_ZL12tempPromedio>
     b28:	ce 01       	movw	r24, r28
     b2a:	09 95       	icall
	Serial.write(tempMax);
	Serial.write('m');
	Serial.write(tempMin);
	Serial.write('p');
	Serial.write(tempPromedio);
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <setup>:
}


void setup()
{
	fnqueue_init();
     b32:	0e 94 37 02 	call	0x46e	; 0x46e <_Z12fnqueue_initv>
	lcd.begin(numCols,numRows);
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	42 e0       	ldi	r20, 0x02	; 2
     b3a:	60 e1       	ldi	r22, 0x10	; 16
     b3c:	88 ef       	ldi	r24, 0xF8	; 248
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	0e 94 65 03 	call	0x6ca	; 0x6ca <_ZN13LiquidCrystal5beginEhhh>
	sensor_setup(tomar_medicion);
     b44:	87 ec       	ldi	r24, 0xC7	; 199
     b46:	94 e0       	ldi	r25, 0x04	; 4
     b48:	0e 94 87 06 	call	0xd0e	; 0xd0e <_Z12sensor_setupPFviE>
	lcd.setCursor(0,0);
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	88 ef       	ldi	r24, 0xF8	; 248
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("            ");
     b58:	6d e5       	ldi	r22, 0x5D	; 93
     b5a:	71 e0       	ldi	r23, 0x01	; 1
     b5c:	88 ef       	ldi	r24, 0xF8	; 248
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN5Print5printEPKc>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     b64:	26 e0       	ldi	r18, 0x06	; 6
     b66:	40 e8       	ldi	r20, 0x80	; 128
     b68:	55 e2       	ldi	r21, 0x25	; 37
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	89 ef       	ldi	r24, 0xF9	; 249
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	0e 94 a7 08 	call	0x114e	; 0x114e <_ZN14HardwareSerial5beginEmh>
     b76:	e6 e1       	ldi	r30, 0x16	; 22
     b78:	f2 e0       	ldi	r31, 0x02	; 2
     b7a:	8e ed       	ldi	r24, 0xDE	; 222
     b7c:	92 e0       	ldi	r25, 0x02	; 2
	
	Serial.begin(9600);
	
	// Inicializa las temps
	for(int i = 0; i<MAX_TEMPS; i++)
	temps[i] = 0;
     b7e:	11 92       	st	Z+, r1
     b80:	11 92       	st	Z+, r1
	lcd.print("            ");
	
	Serial.begin(9600);
	
	// Inicializa las temps
	for(int i = 0; i<MAX_TEMPS; i++)
     b82:	e8 17       	cp	r30, r24
     b84:	f9 07       	cpc	r31, r25
     b86:	d9 f7       	brne	.-10     	; 0xb7e <setup+0x4c>
	temps[i] = 0;
	
	
	lcd.setCursor(0,0);
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	88 ef       	ldi	r24, 0xF8	; 248
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("hol           ");
     b94:	6a e6       	ldi	r22, 0x6A	; 106
     b96:	71 e0       	ldi	r23, 0x01	; 1
     b98:	88 ef       	ldi	r24, 0xF8	; 248
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN5Print5printEPKc>


	//setup del timer2
	cli();
     ba0:	f8 94       	cli
	TCCR2A = 0;// set entire TCCR2A register to 0
     ba2:	a0 eb       	ldi	r26, 0xB0	; 176
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	1c 92       	st	X, r1
	TCCR2B = 0;// same for TCCR2B
     ba8:	e1 eb       	ldi	r30, 0xB1	; 177
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);  // ctc for timer 0
     bae:	8c 91       	ld	r24, X
     bb0:	82 60       	ori	r24, 0x02	; 2
     bb2:	8c 93       	st	X, r24
	TIMSK2 |= (1<<TOIE2); //setea la interrupcion por overflow
     bb4:	a0 e7       	ldi	r26, 0x70	; 112
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	8c 91       	ld	r24, X
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	8c 93       	st	X, r24
	TCNT2 = 0; //set timer en 0
     bbe:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  // CS#2 y CS#0 bits -> Timer0 preescaler = 1024
     bc2:	80 81       	ld	r24, Z
     bc4:	87 60       	ori	r24, 0x07	; 7
     bc6:	80 83       	st	Z, r24
	sei();
     bc8:	78 94       	sei
     bca:	08 95       	ret

00000bcc <loop>:

}

void loop()
{
	fnqueue_run();
     bcc:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z11fnqueue_runv>
     bd0:	08 95       	ret

00000bd2 <__vector_9>:
}


ISR(TIMER2_OVF_vect) // TIMER2_OVF_vect
{
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	ef 93       	push	r30
     bf2:	ff 93       	push	r31
	TCNT2 = 0;
     bf4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	timerOvf= (timerOvf + 1) % 9;
     bf8:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_ZL8timerOvf>
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	69 e0       	ldi	r22, 0x09	; 9
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__divmodhi4>
     c08:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <_ZL8timerOvf>
	if(timerOvf == 0 ) //como el prescaler esta seteado en 1024, cada 9 interrupciones cuento 1 seg(0.144 seg)
     c0c:	81 11       	cpse	r24, r1
     c0e:	0d c0       	rjmp	.+26     	; 0xc2a <__vector_9+0x58>
	{
		contador++;
     c10:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <_ZL8contador>
     c14:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <_ZL8contador+0x1>
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <_ZL8contador+0x1>
     c1e:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <_ZL8contador>
		//timerOvf=0;
		fnqueue_add(procesarTimer);
     c22:	82 e6       	ldi	r24, 0x62	; 98
     c24:	96 e0       	ldi	r25, 0x06	; 6
     c26:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z11fnqueue_addPFvvE>
	}
	
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
     c2e:	bf 91       	pop	r27
     c30:	af 91       	pop	r26
     c32:	9f 91       	pop	r25
     c34:	8f 91       	pop	r24
     c36:	7f 91       	pop	r23
     c38:	6f 91       	pop	r22
     c3a:	5f 91       	pop	r21
     c3c:	4f 91       	pop	r20
     c3e:	3f 91       	pop	r19
     c40:	2f 91       	pop	r18
     c42:	0f 90       	pop	r0
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	0f 90       	pop	r0
     c48:	1f 90       	pop	r1
     c4a:	18 95       	reti

00000c4c <_GLOBAL__sub_I_lcd>:
     c4c:	cf 92       	push	r12
     c4e:	ef 92       	push	r14
     c50:	0f 93       	push	r16
static int8_t cantTemps = 0;
static int8_t indiceArreglo = 0;

static uint8_t timerOvf = 0;

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
     c52:	0f 2e       	mov	r0, r31
     c54:	f7 e0       	ldi	r31, 0x07	; 7
     c56:	cf 2e       	mov	r12, r31
     c58:	f0 2d       	mov	r31, r0
     c5a:	0f 2e       	mov	r0, r31
     c5c:	f6 e0       	ldi	r31, 0x06	; 6
     c5e:	ef 2e       	mov	r14, r31
     c60:	f0 2d       	mov	r31, r0
     c62:	05 e0       	ldi	r16, 0x05	; 5
     c64:	24 e0       	ldi	r18, 0x04	; 4
     c66:	49 e0       	ldi	r20, 0x09	; 9
     c68:	68 e0       	ldi	r22, 0x08	; 8
     c6a:	88 ef       	ldi	r24, 0xF8	; 248
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 20 04 	call	0x840	; 0x840 <_ZN13LiquidCrystalC1Ehhhhhh>
		contador++;
		//timerOvf=0;
		fnqueue_add(procesarTimer);
	}
	
     c72:	0f 91       	pop	r16
     c74:	ef 90       	pop	r14
     c76:	cf 90       	pop	r12
     c78:	08 95       	ret

00000c7a <_Z14recibirComandov>:
	lcd.print(tempMin);
}

void recibirComando()
{
	if(Serial.available()>0)
     c7a:	89 ef       	ldi	r24, 0xF9	; 249
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN14HardwareSerial9availableEv>
     c82:	18 16       	cp	r1, r24
     c84:	19 06       	cpc	r1, r25
     c86:	ec f4       	brge	.+58     	; 0xcc2 <_Z14recibirComandov+0x48>
	{
		switch(Serial.read())
     c88:	89 ef       	ldi	r24, 0xF9	; 249
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	0e 94 dd 07 	call	0xfba	; 0xfba <_ZN14HardwareSerial4readEv>
     c90:	81 36       	cpi	r24, 0x61	; 97
     c92:	91 05       	cpc	r25, r1
     c94:	a1 f0       	breq	.+40     	; 0xcbe <_Z14recibirComandov+0x44>
     c96:	24 f4       	brge	.+8      	; 0xca0 <_Z14recibirComandov+0x26>
     c98:	8d 34       	cpi	r24, 0x4D	; 77
     c9a:	91 05       	cpc	r25, r1
     c9c:	69 f0       	breq	.+26     	; 0xcb8 <_Z14recibirComandov+0x3e>
     c9e:	08 95       	ret
     ca0:	8d 36       	cpi	r24, 0x6D	; 109
     ca2:	91 05       	cpc	r25, r1
     ca4:	31 f0       	breq	.+12     	; 0xcb2 <_Z14recibirComandov+0x38>
     ca6:	80 37       	cpi	r24, 0x70	; 112
     ca8:	91 05       	cpc	r25, r1
     caa:	59 f4       	brne	.+22     	; 0xcc2 <_Z14recibirComandov+0x48>
		{
			case 'p':
			{
				showAverageTemp();
     cac:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <_Z15showAverageTempv>
			}break;
     cb0:	08 95       	ret
			case 'm':
			{
				showMinTemp();
     cb2:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z11showMinTempv>
			}break;
     cb6:	08 95       	ret
			case 'M':
			{
				showMaxTemp();
     cb8:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z11showMaxTempv>
			}break;
     cbc:	08 95       	ret
			case 'a':
			{
				showCurrentTemp();
     cbe:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_Z15showCurrentTempv>
     cc2:	08 95       	ret

00000cc4 <_Z13procesarTimerv>:
	Serial.write(tempPromedio);
}

void procesarTimer()
{
	recibirComando();
     cc4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_Z14recibirComandov>
	enviarDatos();
     cc8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z11enviarDatosv>
     ccc:	08 95       	ret

00000cce <_Z19procesar_adc_sensorv>:


void procesar_adc_sensor()
{
	
	uint16_t medicion = analogVal * 5 * 100 / 1024;			// formula de conversion de temp del lm35
     cce:	40 91 ee 02 	lds	r20, 0x02EE	; 0x8002ee <_ZL9analogVal>
     cd2:	50 91 ef 02 	lds	r21, 0x02EF	; 0x8002ef <_ZL9analogVal+0x1>
	callback_sensor(medicion);
     cd6:	24 ef       	ldi	r18, 0xF4	; 244
     cd8:	31 e0       	ldi	r19, 0x01	; 1
     cda:	42 9f       	mul	r20, r18
     cdc:	c0 01       	movw	r24, r0
     cde:	43 9f       	mul	r20, r19
     ce0:	90 0d       	add	r25, r0
     ce2:	52 9f       	mul	r21, r18
     ce4:	90 0d       	add	r25, r0
     ce6:	11 24       	eor	r1, r1
     ce8:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <callback_sensor>
     cec:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <callback_sensor+0x1>
     cf0:	89 2f       	mov	r24, r25
     cf2:	86 95       	lsr	r24
     cf4:	86 95       	lsr	r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	09 95       	icall
     cfa:	08 95       	ret

00000cfc <_Z15sensor_callbackj>:
}

void sensor_callback(uint16_t valor)
{
	analogVal=valor;
     cfc:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <_ZL9analogVal+0x1>
     d00:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <_ZL9analogVal>
	fnqueue_add(procesar_adc_sensor);
     d04:	87 e6       	ldi	r24, 0x67	; 103
     d06:	96 e0       	ldi	r25, 0x06	; 6
     d08:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z11fnqueue_addPFvvE>
     d0c:	08 95       	ret

00000d0e <_Z12sensor_setupPFviE>:
}

int sensor_setup(void (* callback_s)(int))
{
	callback_sensor=callback_s ;
     d0e:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <callback_sensor+0x1>
     d12:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <callback_sensor>
	config.channel=1;
     d16:	e4 ee       	ldi	r30, 0xE4	; 228
     d18:	f2 e0       	ldi	r31, 0x02	; 2
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24
	config.value=0;
     d22:	15 82       	std	Z+5, r1	; 0x05
     d24:	14 82       	std	Z+4, r1	; 0x04
	config.callback=sensor_callback;
     d26:	8e e7       	ldi	r24, 0x7E	; 126
     d28:	96 e0       	ldi	r25, 0x06	; 6
     d2a:	93 83       	std	Z+3, r25	; 0x03
     d2c:	82 83       	std	Z+2, r24	; 0x02
	adc_init(&config);
     d2e:	cf 01       	movw	r24, r30
     d30:	0e 94 a1 00 	call	0x142	; 0x142 <_Z8adc_initP7adc_cfg>
	return 1;
	//...
}
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	08 95       	ret

00000d3a <__vector_16>:
     d3a:	1f 92       	push	r1
     d3c:	0f 92       	push	r0
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	0f 92       	push	r0
     d42:	11 24       	eor	r1, r1
     d44:	2f 93       	push	r18
     d46:	3f 93       	push	r19
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	af 93       	push	r26
     d4e:	bf 93       	push	r27
     d50:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <timer0_millis>
     d54:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <timer0_millis+0x1>
     d58:	a0 91 f3 02 	lds	r26, 0x02F3	; 0x8002f3 <timer0_millis+0x2>
     d5c:	b0 91 f4 02 	lds	r27, 0x02F4	; 0x8002f4 <timer0_millis+0x3>
     d60:	30 91 f0 02 	lds	r19, 0x02F0	; 0x8002f0 <timer0_fract>
     d64:	23 e0       	ldi	r18, 0x03	; 3
     d66:	23 0f       	add	r18, r19
     d68:	2d 37       	cpi	r18, 0x7D	; 125
     d6a:	20 f4       	brcc	.+8      	; 0xd74 <__vector_16+0x3a>
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	a1 1d       	adc	r26, r1
     d70:	b1 1d       	adc	r27, r1
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <__vector_16+0x44>
     d74:	26 e8       	ldi	r18, 0x86	; 134
     d76:	23 0f       	add	r18, r19
     d78:	02 96       	adiw	r24, 0x02	; 2
     d7a:	a1 1d       	adc	r26, r1
     d7c:	b1 1d       	adc	r27, r1
     d7e:	20 93 f0 02 	sts	0x02F0, r18	; 0x8002f0 <timer0_fract>
     d82:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <timer0_millis>
     d86:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <timer0_millis+0x1>
     d8a:	a0 93 f3 02 	sts	0x02F3, r26	; 0x8002f3 <timer0_millis+0x2>
     d8e:	b0 93 f4 02 	sts	0x02F4, r27	; 0x8002f4 <timer0_millis+0x3>
     d92:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <timer0_overflow_count>
     d96:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <timer0_overflow_count+0x1>
     d9a:	a0 91 f7 02 	lds	r26, 0x02F7	; 0x8002f7 <timer0_overflow_count+0x2>
     d9e:	b0 91 f8 02 	lds	r27, 0x02F8	; 0x8002f8 <timer0_overflow_count+0x3>
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	a1 1d       	adc	r26, r1
     da6:	b1 1d       	adc	r27, r1
     da8:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <timer0_overflow_count>
     dac:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <timer0_overflow_count+0x1>
     db0:	a0 93 f7 02 	sts	0x02F7, r26	; 0x8002f7 <timer0_overflow_count+0x2>
     db4:	b0 93 f8 02 	sts	0x02F8, r27	; 0x8002f8 <timer0_overflow_count+0x3>
     db8:	bf 91       	pop	r27
     dba:	af 91       	pop	r26
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <delayMicroseconds>:
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	39 f0       	breq	.+14     	; 0xde0 <delayMicroseconds+0x12>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	02 97       	sbiw	r24, 0x02	; 2
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <delayMicroseconds+0xe>
     de0:	08 95       	ret

00000de2 <init>:
     de2:	78 94       	sei
     de4:	84 b5       	in	r24, 0x24	; 36
     de6:	82 60       	ori	r24, 0x02	; 2
     de8:	84 bd       	out	0x24, r24	; 36
     dea:	84 b5       	in	r24, 0x24	; 36
     dec:	81 60       	ori	r24, 0x01	; 1
     dee:	84 bd       	out	0x24, r24	; 36
     df0:	85 b5       	in	r24, 0x25	; 37
     df2:	82 60       	ori	r24, 0x02	; 2
     df4:	85 bd       	out	0x25, r24	; 37
     df6:	85 b5       	in	r24, 0x25	; 37
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	85 bd       	out	0x25, r24	; 37
     dfc:	ee e6       	ldi	r30, 0x6E	; 110
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	80 83       	st	Z, r24
     e06:	e1 e8       	ldi	r30, 0x81	; 129
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	10 82       	st	Z, r1
     e0c:	80 81       	ld	r24, Z
     e0e:	82 60       	ori	r24, 0x02	; 2
     e10:	80 83       	st	Z, r24
     e12:	80 81       	ld	r24, Z
     e14:	81 60       	ori	r24, 0x01	; 1
     e16:	80 83       	st	Z, r24
     e18:	e0 e8       	ldi	r30, 0x80	; 128
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	80 83       	st	Z, r24
     e22:	e1 eb       	ldi	r30, 0xB1	; 177
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	84 60       	ori	r24, 0x04	; 4
     e2a:	80 83       	st	Z, r24
     e2c:	e0 eb       	ldi	r30, 0xB0	; 176
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	81 60       	ori	r24, 0x01	; 1
     e34:	80 83       	st	Z, r24
     e36:	ea e7       	ldi	r30, 0x7A	; 122
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	84 60       	ori	r24, 0x04	; 4
     e3e:	80 83       	st	Z, r24
     e40:	80 81       	ld	r24, Z
     e42:	82 60       	ori	r24, 0x02	; 2
     e44:	80 83       	st	Z, r24
     e46:	80 81       	ld	r24, Z
     e48:	81 60       	ori	r24, 0x01	; 1
     e4a:	80 83       	st	Z, r24
     e4c:	80 81       	ld	r24, Z
     e4e:	80 68       	ori	r24, 0x80	; 128
     e50:	80 83       	st	Z, r24
     e52:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     e56:	08 95       	ret

00000e58 <turnOffPWM>:
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	81 f0       	breq	.+32     	; 0xe7c <turnOffPWM+0x24>
     e5c:	28 f4       	brcc	.+10     	; 0xe68 <turnOffPWM+0x10>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	99 f0       	breq	.+38     	; 0xe88 <turnOffPWM+0x30>
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	a1 f0       	breq	.+40     	; 0xe8e <turnOffPWM+0x36>
     e66:	08 95       	ret
     e68:	87 30       	cpi	r24, 0x07	; 7
     e6a:	a9 f0       	breq	.+42     	; 0xe96 <turnOffPWM+0x3e>
     e6c:	88 30       	cpi	r24, 0x08	; 8
     e6e:	b9 f0       	breq	.+46     	; 0xe9e <turnOffPWM+0x46>
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	d1 f4       	brne	.+52     	; 0xea8 <turnOffPWM+0x50>
     e74:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e78:	8f 7d       	andi	r24, 0xDF	; 223
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <turnOffPWM+0x2a>
     e7c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e80:	8f 77       	andi	r24, 0x7F	; 127
     e82:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e86:	08 95       	ret
     e88:	84 b5       	in	r24, 0x24	; 36
     e8a:	8f 77       	andi	r24, 0x7F	; 127
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <turnOffPWM+0x3a>
     e8e:	84 b5       	in	r24, 0x24	; 36
     e90:	8f 7d       	andi	r24, 0xDF	; 223
     e92:	84 bd       	out	0x24, r24	; 36
     e94:	08 95       	ret
     e96:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e9a:	8f 77       	andi	r24, 0x7F	; 127
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <turnOffPWM+0x4c>
     e9e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     ea2:	8f 7d       	andi	r24, 0xDF	; 223
     ea4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     ea8:	08 95       	ret

00000eaa <pinMode>:
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	fc 01       	movw	r30, r24
     eb2:	e4 58       	subi	r30, 0x84	; 132
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	24 91       	lpm	r18, Z
     eb8:	fc 01       	movw	r30, r24
     eba:	e0 57       	subi	r30, 0x70	; 112
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	84 91       	lpm	r24, Z
     ec0:	88 23       	and	r24, r24
     ec2:	49 f1       	breq	.+82     	; 0xf16 <pinMode+0x6c>
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	fc 01       	movw	r30, r24
     ecc:	e2 55       	subi	r30, 0x52	; 82
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	a5 91       	lpm	r26, Z+
     ed2:	b4 91       	lpm	r27, Z
     ed4:	8c 55       	subi	r24, 0x5C	; 92
     ed6:	9f 4f       	sbci	r25, 0xFF	; 255
     ed8:	fc 01       	movw	r30, r24
     eda:	c5 91       	lpm	r28, Z+
     edc:	d4 91       	lpm	r29, Z
     ede:	9f b7       	in	r25, 0x3f	; 63
     ee0:	61 11       	cpse	r22, r1
     ee2:	08 c0       	rjmp	.+16     	; 0xef4 <pinMode+0x4a>
     ee4:	f8 94       	cli
     ee6:	8c 91       	ld	r24, X
     ee8:	20 95       	com	r18
     eea:	82 23       	and	r24, r18
     eec:	8c 93       	st	X, r24
     eee:	88 81       	ld	r24, Y
     ef0:	82 23       	and	r24, r18
     ef2:	0a c0       	rjmp	.+20     	; 0xf08 <pinMode+0x5e>
     ef4:	62 30       	cpi	r22, 0x02	; 2
     ef6:	51 f4       	brne	.+20     	; 0xf0c <pinMode+0x62>
     ef8:	f8 94       	cli
     efa:	8c 91       	ld	r24, X
     efc:	32 2f       	mov	r19, r18
     efe:	30 95       	com	r19
     f00:	83 23       	and	r24, r19
     f02:	8c 93       	st	X, r24
     f04:	88 81       	ld	r24, Y
     f06:	82 2b       	or	r24, r18
     f08:	88 83       	st	Y, r24
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <pinMode+0x6a>
     f0c:	f8 94       	cli
     f0e:	8c 91       	ld	r24, X
     f10:	82 2b       	or	r24, r18
     f12:	8c 93       	st	X, r24
     f14:	9f bf       	out	0x3f, r25	; 63
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <digitalWrite>:
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	1f 92       	push	r1
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	f9 01       	movw	r30, r18
     f30:	e8 59       	subi	r30, 0x98	; 152
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	84 91       	lpm	r24, Z
     f36:	f9 01       	movw	r30, r18
     f38:	e4 58       	subi	r30, 0x84	; 132
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	14 91       	lpm	r17, Z
     f3e:	f9 01       	movw	r30, r18
     f40:	e0 57       	subi	r30, 0x70	; 112
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	04 91       	lpm	r16, Z
     f46:	00 23       	and	r16, r16
     f48:	c9 f0       	breq	.+50     	; 0xf7c <digitalWrite+0x60>
     f4a:	88 23       	and	r24, r24
     f4c:	21 f0       	breq	.+8      	; 0xf56 <digitalWrite+0x3a>
     f4e:	69 83       	std	Y+1, r22	; 0x01
     f50:	0e 94 2c 07 	call	0xe58	; 0xe58 <turnOffPWM>
     f54:	69 81       	ldd	r22, Y+1	; 0x01
     f56:	e0 2f       	mov	r30, r16
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	ec 55       	subi	r30, 0x5C	; 92
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	a5 91       	lpm	r26, Z+
     f64:	b4 91       	lpm	r27, Z
     f66:	9f b7       	in	r25, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	8c 91       	ld	r24, X
     f6c:	61 11       	cpse	r22, r1
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <digitalWrite+0x5a>
     f70:	10 95       	com	r17
     f72:	81 23       	and	r24, r17
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <digitalWrite+0x5c>
     f76:	81 2b       	or	r24, r17
     f78:	8c 93       	st	X, r24
     f7a:	9f bf       	out	0x3f, r25	; 63
     f7c:	0f 90       	pop	r0
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	08 95       	ret

00000f88 <_ZN14HardwareSerial9availableEv>:
     f88:	fc 01       	movw	r30, r24
     f8a:	81 8d       	ldd	r24, Z+25	; 0x19
     f8c:	22 8d       	ldd	r18, Z+26	; 0x1a
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	80 5c       	subi	r24, 0xC0	; 192
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	82 1b       	sub	r24, r18
     f96:	91 09       	sbc	r25, r1
     f98:	8f 73       	andi	r24, 0x3F	; 63
     f9a:	99 27       	eor	r25, r25
     f9c:	08 95       	ret

00000f9e <_ZN14HardwareSerial4peekEv>:
     f9e:	fc 01       	movw	r30, r24
     fa0:	91 8d       	ldd	r25, Z+25	; 0x19
     fa2:	82 8d       	ldd	r24, Z+26	; 0x1a
     fa4:	98 17       	cp	r25, r24
     fa6:	31 f0       	breq	.+12     	; 0xfb4 <_ZN14HardwareSerial4peekEv+0x16>
     fa8:	82 8d       	ldd	r24, Z+26	; 0x1a
     faa:	e8 0f       	add	r30, r24
     fac:	f1 1d       	adc	r31, r1
     fae:	85 8d       	ldd	r24, Z+29	; 0x1d
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	08 95       	ret
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	9f ef       	ldi	r25, 0xFF	; 255
     fb8:	08 95       	ret

00000fba <_ZN14HardwareSerial4readEv>:
     fba:	fc 01       	movw	r30, r24
     fbc:	91 8d       	ldd	r25, Z+25	; 0x19
     fbe:	82 8d       	ldd	r24, Z+26	; 0x1a
     fc0:	98 17       	cp	r25, r24
     fc2:	61 f0       	breq	.+24     	; 0xfdc <_ZN14HardwareSerial4readEv+0x22>
     fc4:	82 8d       	ldd	r24, Z+26	; 0x1a
     fc6:	df 01       	movw	r26, r30
     fc8:	a8 0f       	add	r26, r24
     fca:	b1 1d       	adc	r27, r1
     fcc:	5d 96       	adiw	r26, 0x1d	; 29
     fce:	8c 91       	ld	r24, X
     fd0:	92 8d       	ldd	r25, Z+26	; 0x1a
     fd2:	9f 5f       	subi	r25, 0xFF	; 255
     fd4:	9f 73       	andi	r25, 0x3F	; 63
     fd6:	92 8f       	std	Z+26, r25	; 0x1a
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	08 95       	ret
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	9f ef       	ldi	r25, 0xFF	; 255
     fe0:	08 95       	ret

00000fe2 <_Z14serialEventRunv>:
     fe2:	81 e6       	ldi	r24, 0x61	; 97
     fe4:	99 e0       	ldi	r25, 0x09	; 9
     fe6:	89 2b       	or	r24, r25
     fe8:	49 f0       	breq	.+18     	; 0xffc <_Z14serialEventRunv+0x1a>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	89 2b       	or	r24, r25
     ff0:	29 f0       	breq	.+10     	; 0xffc <_Z14serialEventRunv+0x1a>
     ff2:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_Z17Serial0_availablev>
     ff6:	81 11       	cpse	r24, r1
     ff8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     ffc:	08 95       	ret

00000ffe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
     ffe:	fc 01       	movw	r30, r24
    1000:	84 8d       	ldd	r24, Z+28	; 0x1c
    1002:	df 01       	movw	r26, r30
    1004:	a8 0f       	add	r26, r24
    1006:	b1 1d       	adc	r27, r1
    1008:	a3 5a       	subi	r26, 0xA3	; 163
    100a:	bf 4f       	sbci	r27, 0xFF	; 255
    100c:	2c 91       	ld	r18, X
    100e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	8f 73       	andi	r24, 0x3F	; 63
    1016:	99 27       	eor	r25, r25
    1018:	84 8f       	std	Z+28, r24	; 0x1c
    101a:	a6 89       	ldd	r26, Z+22	; 0x16
    101c:	b7 89       	ldd	r27, Z+23	; 0x17
    101e:	2c 93       	st	X, r18
    1020:	a0 89       	ldd	r26, Z+16	; 0x10
    1022:	b1 89       	ldd	r27, Z+17	; 0x11
    1024:	8c 91       	ld	r24, X
    1026:	80 64       	ori	r24, 0x40	; 64
    1028:	8c 93       	st	X, r24
    102a:	93 8d       	ldd	r25, Z+27	; 0x1b
    102c:	84 8d       	ldd	r24, Z+28	; 0x1c
    102e:	98 13       	cpse	r25, r24
    1030:	06 c0       	rjmp	.+12     	; 0x103e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    1032:	02 88       	ldd	r0, Z+18	; 0x12
    1034:	f3 89       	ldd	r31, Z+19	; 0x13
    1036:	e0 2d       	mov	r30, r0
    1038:	80 81       	ld	r24, Z
    103a:	8f 7d       	andi	r24, 0xDF	; 223
    103c:	80 83       	st	Z, r24
    103e:	08 95       	ret

00001040 <_ZN14HardwareSerial5flushEv>:
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ec 01       	movw	r28, r24
    1046:	88 8d       	ldd	r24, Y+24	; 0x18
    1048:	88 23       	and	r24, r24
    104a:	c9 f0       	breq	.+50     	; 0x107e <_ZN14HardwareSerial5flushEv+0x3e>
    104c:	ea 89       	ldd	r30, Y+18	; 0x12
    104e:	fb 89       	ldd	r31, Y+19	; 0x13
    1050:	80 81       	ld	r24, Z
    1052:	85 fd       	sbrc	r24, 5
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <_ZN14HardwareSerial5flushEv+0x20>
    1056:	a8 89       	ldd	r26, Y+16	; 0x10
    1058:	b9 89       	ldd	r27, Y+17	; 0x11
    105a:	8c 91       	ld	r24, X
    105c:	86 fd       	sbrc	r24, 6
    105e:	0f c0       	rjmp	.+30     	; 0x107e <_ZN14HardwareSerial5flushEv+0x3e>
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	07 fc       	sbrc	r0, 7
    1064:	f5 cf       	rjmp	.-22     	; 0x1050 <_ZN14HardwareSerial5flushEv+0x10>
    1066:	80 81       	ld	r24, Z
    1068:	85 ff       	sbrs	r24, 5
    106a:	f2 cf       	rjmp	.-28     	; 0x1050 <_ZN14HardwareSerial5flushEv+0x10>
    106c:	a8 89       	ldd	r26, Y+16	; 0x10
    106e:	b9 89       	ldd	r27, Y+17	; 0x11
    1070:	8c 91       	ld	r24, X
    1072:	85 ff       	sbrs	r24, 5
    1074:	ed cf       	rjmp	.-38     	; 0x1050 <_ZN14HardwareSerial5flushEv+0x10>
    1076:	ce 01       	movw	r24, r28
    1078:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    107c:	e7 cf       	rjmp	.-50     	; 0x104c <_ZN14HardwareSerial5flushEv+0xc>
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <_ZN14HardwareSerial5writeEh>:
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	1f 92       	push	r1
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	6c 01       	movw	r12, r24
    109a:	dc 01       	movw	r26, r24
    109c:	5b 96       	adiw	r26, 0x1b	; 27
    109e:	9c 91       	ld	r25, X
    10a0:	5b 97       	sbiw	r26, 0x1b	; 27
    10a2:	5c 96       	adiw	r26, 0x1c	; 28
    10a4:	8c 91       	ld	r24, X
    10a6:	5c 97       	sbiw	r26, 0x1c	; 28
    10a8:	98 13       	cpse	r25, r24
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <_ZN14HardwareSerial5writeEh+0x36>
    10ac:	50 96       	adiw	r26, 0x10	; 16
    10ae:	ed 91       	ld	r30, X+
    10b0:	fc 91       	ld	r31, X
    10b2:	51 97       	sbiw	r26, 0x11	; 17
    10b4:	80 81       	ld	r24, Z
    10b6:	85 fd       	sbrc	r24, 5
    10b8:	32 c0       	rjmp	.+100    	; 0x111e <_ZN14HardwareSerial5writeEh+0x9a>
    10ba:	f6 01       	movw	r30, r12
    10bc:	03 8d       	ldd	r16, Z+27	; 0x1b
    10be:	10 e0       	ldi	r17, 0x00	; 0
    10c0:	0f 5f       	subi	r16, 0xFF	; 255
    10c2:	1f 4f       	sbci	r17, 0xFF	; 255
    10c4:	0f 73       	andi	r16, 0x3F	; 63
    10c6:	11 27       	eor	r17, r17
    10c8:	f0 2e       	mov	r15, r16
    10ca:	f6 01       	movw	r30, r12
    10cc:	84 8d       	ldd	r24, Z+28	; 0x1c
    10ce:	f8 12       	cpse	r15, r24
    10d0:	11 c0       	rjmp	.+34     	; 0x10f4 <_ZN14HardwareSerial5writeEh+0x70>
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	07 fc       	sbrc	r0, 7
    10d6:	f9 cf       	rjmp	.-14     	; 0x10ca <_ZN14HardwareSerial5writeEh+0x46>
    10d8:	d6 01       	movw	r26, r12
    10da:	50 96       	adiw	r26, 0x10	; 16
    10dc:	ed 91       	ld	r30, X+
    10de:	fc 91       	ld	r31, X
    10e0:	51 97       	sbiw	r26, 0x11	; 17
    10e2:	80 81       	ld	r24, Z
    10e4:	85 ff       	sbrs	r24, 5
    10e6:	f1 cf       	rjmp	.-30     	; 0x10ca <_ZN14HardwareSerial5writeEh+0x46>
    10e8:	c6 01       	movw	r24, r12
    10ea:	69 83       	std	Y+1, r22	; 0x01
    10ec:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    10f0:	69 81       	ldd	r22, Y+1	; 0x01
    10f2:	eb cf       	rjmp	.-42     	; 0x10ca <_ZN14HardwareSerial5writeEh+0x46>
    10f4:	83 8d       	ldd	r24, Z+27	; 0x1b
    10f6:	e8 0f       	add	r30, r24
    10f8:	f1 1d       	adc	r31, r1
    10fa:	e3 5a       	subi	r30, 0xA3	; 163
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	60 83       	st	Z, r22
    1100:	d6 01       	movw	r26, r12
    1102:	5b 96       	adiw	r26, 0x1b	; 27
    1104:	0c 93       	st	X, r16
    1106:	5b 97       	sbiw	r26, 0x1b	; 27
    1108:	52 96       	adiw	r26, 0x12	; 18
    110a:	ed 91       	ld	r30, X+
    110c:	fc 91       	ld	r31, X
    110e:	53 97       	sbiw	r26, 0x13	; 19
    1110:	80 81       	ld	r24, Z
    1112:	80 62       	ori	r24, 0x20	; 32
    1114:	80 83       	st	Z, r24
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	58 96       	adiw	r26, 0x18	; 24
    111a:	8c 93       	st	X, r24
    111c:	0d c0       	rjmp	.+26     	; 0x1138 <_ZN14HardwareSerial5writeEh+0xb4>
    111e:	d6 01       	movw	r26, r12
    1120:	56 96       	adiw	r26, 0x16	; 22
    1122:	ed 91       	ld	r30, X+
    1124:	fc 91       	ld	r31, X
    1126:	57 97       	sbiw	r26, 0x17	; 23
    1128:	60 83       	st	Z, r22
    112a:	50 96       	adiw	r26, 0x10	; 16
    112c:	ed 91       	ld	r30, X+
    112e:	fc 91       	ld	r31, X
    1130:	51 97       	sbiw	r26, 0x11	; 17
    1132:	80 81       	ld	r24, Z
    1134:	80 64       	ori	r24, 0x40	; 64
    1136:	80 83       	st	Z, r24
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0f 90       	pop	r0
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	08 95       	ret

0000114e <_ZN14HardwareSerial5beginEmh>:
    114e:	bf 92       	push	r11
    1150:	cf 92       	push	r12
    1152:	df 92       	push	r13
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	ec 01       	movw	r28, r24
    115e:	6a 01       	movw	r12, r20
    1160:	7b 01       	movw	r14, r22
    1162:	b2 2e       	mov	r11, r18
    1164:	e8 89       	ldd	r30, Y+16	; 0x10
    1166:	f9 89       	ldd	r31, Y+17	; 0x11
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	80 83       	st	Z, r24
    116c:	41 15       	cp	r20, r1
    116e:	81 ee       	ldi	r24, 0xE1	; 225
    1170:	58 07       	cpc	r21, r24
    1172:	61 05       	cpc	r22, r1
    1174:	71 05       	cpc	r23, r1
    1176:	a1 f0       	breq	.+40     	; 0x11a0 <_ZN14HardwareSerial5beginEmh+0x52>
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	79 e0       	ldi	r23, 0x09	; 9
    117c:	8d e3       	ldi	r24, 0x3D	; 61
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a7 01       	movw	r20, r14
    1182:	96 01       	movw	r18, r12
    1184:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__udivmodsi4>
    1188:	21 50       	subi	r18, 0x01	; 1
    118a:	31 09       	sbc	r19, r1
    118c:	41 09       	sbc	r20, r1
    118e:	51 09       	sbc	r21, r1
    1190:	56 95       	lsr	r21
    1192:	47 95       	ror	r20
    1194:	37 95       	ror	r19
    1196:	27 95       	ror	r18
    1198:	21 15       	cp	r18, r1
    119a:	80 e1       	ldi	r24, 0x10	; 16
    119c:	38 07       	cpc	r19, r24
    119e:	98 f0       	brcs	.+38     	; 0x11c6 <_ZN14HardwareSerial5beginEmh+0x78>
    11a0:	e8 89       	ldd	r30, Y+16	; 0x10
    11a2:	f9 89       	ldd	r31, Y+17	; 0x11
    11a4:	10 82       	st	Z, r1
    11a6:	60 e8       	ldi	r22, 0x80	; 128
    11a8:	74 e8       	ldi	r23, 0x84	; 132
    11aa:	8e e1       	ldi	r24, 0x1E	; 30
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a7 01       	movw	r20, r14
    11b0:	96 01       	movw	r18, r12
    11b2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__udivmodsi4>
    11b6:	21 50       	subi	r18, 0x01	; 1
    11b8:	31 09       	sbc	r19, r1
    11ba:	41 09       	sbc	r20, r1
    11bc:	51 09       	sbc	r21, r1
    11be:	56 95       	lsr	r21
    11c0:	47 95       	ror	r20
    11c2:	37 95       	ror	r19
    11c4:	27 95       	ror	r18
    11c6:	ec 85       	ldd	r30, Y+12	; 0x0c
    11c8:	fd 85       	ldd	r31, Y+13	; 0x0d
    11ca:	30 83       	st	Z, r19
    11cc:	ee 85       	ldd	r30, Y+14	; 0x0e
    11ce:	ff 85       	ldd	r31, Y+15	; 0x0f
    11d0:	20 83       	st	Z, r18
    11d2:	18 8e       	std	Y+24, r1	; 0x18
    11d4:	ec 89       	ldd	r30, Y+20	; 0x14
    11d6:	fd 89       	ldd	r31, Y+21	; 0x15
    11d8:	b0 82       	st	Z, r11
    11da:	ea 89       	ldd	r30, Y+18	; 0x12
    11dc:	fb 89       	ldd	r31, Y+19	; 0x13
    11de:	80 81       	ld	r24, Z
    11e0:	80 61       	ori	r24, 0x10	; 16
    11e2:	80 83       	st	Z, r24
    11e4:	ea 89       	ldd	r30, Y+18	; 0x12
    11e6:	fb 89       	ldd	r31, Y+19	; 0x13
    11e8:	80 81       	ld	r24, Z
    11ea:	88 60       	ori	r24, 0x08	; 8
    11ec:	80 83       	st	Z, r24
    11ee:	ea 89       	ldd	r30, Y+18	; 0x12
    11f0:	fb 89       	ldd	r31, Y+19	; 0x13
    11f2:	80 81       	ld	r24, Z
    11f4:	80 68       	ori	r24, 0x80	; 128
    11f6:	80 83       	st	Z, r24
    11f8:	ea 89       	ldd	r30, Y+18	; 0x12
    11fa:	fb 89       	ldd	r31, Y+19	; 0x13
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 7d       	andi	r24, 0xDF	; 223
    1200:	80 83       	st	Z, r24
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	df 90       	pop	r13
    120c:	cf 90       	pop	r12
    120e:	bf 90       	pop	r11
    1210:	08 95       	ret

00001212 <__vector_18>:
    1212:	1f 92       	push	r1
    1214:	0f 92       	push	r0
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	0f 92       	push	r0
    121a:	11 24       	eor	r1, r1
    121c:	2f 93       	push	r18
    121e:	8f 93       	push	r24
    1220:	9f 93       	push	r25
    1222:	ef 93       	push	r30
    1224:	ff 93       	push	r31
    1226:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <Serial+0x10>
    122a:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <Serial+0x11>
    122e:	80 81       	ld	r24, Z
    1230:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <Serial+0x16>
    1234:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <Serial+0x17>
    1238:	82 fd       	sbrc	r24, 2
    123a:	12 c0       	rjmp	.+36     	; 0x1260 <__vector_18+0x4e>
    123c:	90 81       	ld	r25, Z
    123e:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <Serial+0x19>
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	8f 73       	andi	r24, 0x3F	; 63
    1246:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <Serial+0x1a>
    124a:	82 17       	cp	r24, r18
    124c:	51 f0       	breq	.+20     	; 0x1262 <__vector_18+0x50>
    124e:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <Serial+0x19>
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	e7 50       	subi	r30, 0x07	; 7
    1256:	fd 4f       	sbci	r31, 0xFD	; 253
    1258:	95 8f       	std	Z+29, r25	; 0x1d
    125a:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <Serial+0x19>
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <__vector_18+0x50>
    1260:	80 81       	ld	r24, Z
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	9f 91       	pop	r25
    1268:	8f 91       	pop	r24
    126a:	2f 91       	pop	r18
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <__vector_19>:
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	4f 93       	push	r20
    1286:	5f 93       	push	r21
    1288:	6f 93       	push	r22
    128a:	7f 93       	push	r23
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	af 93       	push	r26
    1292:	bf 93       	push	r27
    1294:	ef 93       	push	r30
    1296:	ff 93       	push	r31
    1298:	89 ef       	ldi	r24, 0xF9	; 249
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    12a0:	ff 91       	pop	r31
    12a2:	ef 91       	pop	r30
    12a4:	bf 91       	pop	r27
    12a6:	af 91       	pop	r26
    12a8:	9f 91       	pop	r25
    12aa:	8f 91       	pop	r24
    12ac:	7f 91       	pop	r23
    12ae:	6f 91       	pop	r22
    12b0:	5f 91       	pop	r21
    12b2:	4f 91       	pop	r20
    12b4:	3f 91       	pop	r19
    12b6:	2f 91       	pop	r18
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <_Z17Serial0_availablev>:
    12c2:	89 ef       	ldi	r24, 0xF9	; 249
    12c4:	92 e0       	ldi	r25, 0x02	; 2
    12c6:	0e 94 c4 07 	call	0xf88	; 0xf88 <_ZN14HardwareSerial9availableEv>
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	89 2b       	or	r24, r25
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <_Z17Serial0_availablev+0x10>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	82 2f       	mov	r24, r18
    12d4:	08 95       	ret

000012d6 <_GLOBAL__sub_I___vector_18>:
    12d6:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <Serial+0x3>
    12da:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <Serial+0x2>
    12de:	88 ee       	ldi	r24, 0xE8	; 232
    12e0:	93 e0       	ldi	r25, 0x03	; 3
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <Serial+0x4>
    12ea:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <Serial+0x5>
    12ee:	a0 93 ff 02 	sts	0x02FF, r26	; 0x8002ff <Serial+0x6>
    12f2:	b0 93 00 03 	sts	0x0300, r27	; 0x800300 <Serial+0x7>
    12f6:	8d e7       	ldi	r24, 0x7D	; 125
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <Serial+0x1>
    12fe:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <Serial>
    1302:	85 ec       	ldi	r24, 0xC5	; 197
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <Serial+0xd>
    130a:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <Serial+0xc>
    130e:	84 ec       	ldi	r24, 0xC4	; 196
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <Serial+0xf>
    1316:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <Serial+0xe>
    131a:	80 ec       	ldi	r24, 0xC0	; 192
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <Serial+0x11>
    1322:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <Serial+0x10>
    1326:	81 ec       	ldi	r24, 0xC1	; 193
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <Serial+0x13>
    132e:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <Serial+0x12>
    1332:	82 ec       	ldi	r24, 0xC2	; 194
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <Serial+0x15>
    133a:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <Serial+0x14>
    133e:	86 ec       	ldi	r24, 0xC6	; 198
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <Serial+0x17>
    1346:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Serial+0x16>
    134a:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <Serial+0x19>
    134e:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <Serial+0x1a>
    1352:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <Serial+0x1b>
    1356:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <Serial+0x1c>
    135a:	08 95       	ret

0000135c <initVariant>:
    135c:	08 95       	ret

0000135e <main>:
    135e:	0e 94 f1 06 	call	0xde2	; 0xde2 <init>
    1362:	0e 94 ae 09 	call	0x135c	; 0x135c <initVariant>
    1366:	0e 94 99 05 	call	0xb32	; 0xb32 <setup>
    136a:	c1 ef       	ldi	r28, 0xF1	; 241
    136c:	d7 e0       	ldi	r29, 0x07	; 7
    136e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <loop>
    1372:	20 97       	sbiw	r28, 0x00	; 0
    1374:	e1 f3       	breq	.-8      	; 0x136e <main+0x10>
    1376:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <_Z14serialEventRunv>
    137a:	f9 cf       	rjmp	.-14     	; 0x136e <main+0x10>

0000137c <_ZN5Print5writeEPKhj>:
    137c:	cf 92       	push	r12
    137e:	df 92       	push	r13
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	6c 01       	movw	r12, r24
    138e:	7a 01       	movw	r14, r20
    1390:	eb 01       	movw	r28, r22
    1392:	e6 0e       	add	r14, r22
    1394:	f7 1e       	adc	r15, r23
    1396:	00 e0       	ldi	r16, 0x00	; 0
    1398:	10 e0       	ldi	r17, 0x00	; 0
    139a:	ce 15       	cp	r28, r14
    139c:	df 05       	cpc	r29, r15
    139e:	61 f0       	breq	.+24     	; 0x13b8 <_ZN5Print5writeEPKhj+0x3c>
    13a0:	69 91       	ld	r22, Y+
    13a2:	d6 01       	movw	r26, r12
    13a4:	ed 91       	ld	r30, X+
    13a6:	fc 91       	ld	r31, X
    13a8:	01 90       	ld	r0, Z+
    13aa:	f0 81       	ld	r31, Z
    13ac:	e0 2d       	mov	r30, r0
    13ae:	c6 01       	movw	r24, r12
    13b0:	09 95       	icall
    13b2:	08 0f       	add	r16, r24
    13b4:	19 1f       	adc	r17, r25
    13b6:	f1 cf       	rjmp	.-30     	; 0x139a <_ZN5Print5writeEPKhj+0x1e>
    13b8:	c8 01       	movw	r24, r16
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	08 95       	ret

000013cc <_ZN5Print5writeEPKc>:
    13cc:	61 15       	cp	r22, r1
    13ce:	71 05       	cpc	r23, r1
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <_ZN5Print5writeEPKc+0x26>
    13d2:	db 01       	movw	r26, r22
    13d4:	0d 90       	ld	r0, X+
    13d6:	00 20       	and	r0, r0
    13d8:	e9 f7       	brne	.-6      	; 0x13d4 <_ZN5Print5writeEPKc+0x8>
    13da:	ad 01       	movw	r20, r26
    13dc:	41 50       	subi	r20, 0x01	; 1
    13de:	51 09       	sbc	r21, r1
    13e0:	46 1b       	sub	r20, r22
    13e2:	57 0b       	sbc	r21, r23
    13e4:	dc 01       	movw	r26, r24
    13e6:	ed 91       	ld	r30, X+
    13e8:	fc 91       	ld	r31, X
    13ea:	02 80       	ldd	r0, Z+2	; 0x02
    13ec:	f3 81       	ldd	r31, Z+3	; 0x03
    13ee:	e0 2d       	mov	r30, r0
    13f0:	09 94       	ijmp
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	08 95       	ret

000013f8 <_ZN5Print5printEPKc>:
    13f8:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <_ZN5Print5writeEPKc>

000013fc <_ZN5Print5printEc>:
    13fc:	dc 01       	movw	r26, r24
    13fe:	ed 91       	ld	r30, X+
    1400:	fc 91       	ld	r31, X
    1402:	01 90       	ld	r0, Z+
    1404:	f0 81       	ld	r31, Z
    1406:	e0 2d       	mov	r30, r0
    1408:	09 94       	ijmp

0000140a <_ZN5Print11printNumberEmh>:
    140a:	8f 92       	push	r8
    140c:	9f 92       	push	r9
    140e:	af 92       	push	r10
    1410:	bf 92       	push	r11
    1412:	cf 92       	push	r12
    1414:	df 92       	push	r13
    1416:	ef 92       	push	r14
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	a1 97       	sbiw	r28, 0x21	; 33
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	7c 01       	movw	r14, r24
    1434:	c4 2e       	mov	r12, r20
    1436:	e5 2f       	mov	r30, r21
    1438:	cb 01       	movw	r24, r22
    143a:	d2 2e       	mov	r13, r18
    143c:	19 a2       	std	Y+33, r1	; 0x21
    143e:	21 e0       	ldi	r18, 0x01	; 1
    1440:	2d 15       	cp	r18, r13
    1442:	10 f0       	brcs	.+4      	; 0x1448 <_ZN5Print11printNumberEmh+0x3e>
    1444:	2a e0       	ldi	r18, 0x0A	; 10
    1446:	d2 2e       	mov	r13, r18
    1448:	8e 01       	movw	r16, r28
    144a:	0f 5d       	subi	r16, 0xDF	; 223
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
    144e:	8d 2c       	mov	r8, r13
    1450:	91 2c       	mov	r9, r1
    1452:	a1 2c       	mov	r10, r1
    1454:	b1 2c       	mov	r11, r1
    1456:	6c 2d       	mov	r22, r12
    1458:	7e 2f       	mov	r23, r30
    145a:	a5 01       	movw	r20, r10
    145c:	94 01       	movw	r18, r8
    145e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__udivmodsi4>
    1462:	8c 2d       	mov	r24, r12
    1464:	d2 9e       	mul	r13, r18
    1466:	80 19       	sub	r24, r0
    1468:	11 24       	eor	r1, r1
    146a:	01 50       	subi	r16, 0x01	; 1
    146c:	11 09       	sbc	r17, r1
    146e:	8a 30       	cpi	r24, 0x0A	; 10
    1470:	14 f4       	brge	.+4      	; 0x1476 <_ZN5Print11printNumberEmh+0x6c>
    1472:	80 5d       	subi	r24, 0xD0	; 208
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <_ZN5Print11printNumberEmh+0x6e>
    1476:	89 5c       	subi	r24, 0xC9	; 201
    1478:	f8 01       	movw	r30, r16
    147a:	80 83       	st	Z, r24
    147c:	21 15       	cp	r18, r1
    147e:	31 05       	cpc	r19, r1
    1480:	41 05       	cpc	r20, r1
    1482:	51 05       	cpc	r21, r1
    1484:	21 f0       	breq	.+8      	; 0x148e <_ZN5Print11printNumberEmh+0x84>
    1486:	c2 2e       	mov	r12, r18
    1488:	e3 2f       	mov	r30, r19
    148a:	ca 01       	movw	r24, r20
    148c:	e4 cf       	rjmp	.-56     	; 0x1456 <_ZN5Print11printNumberEmh+0x4c>
    148e:	b8 01       	movw	r22, r16
    1490:	c7 01       	movw	r24, r14
    1492:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN5Print5writeEPKc>
    1496:	a1 96       	adiw	r28, 0x21	; 33
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	bf 90       	pop	r11
    14b4:	af 90       	pop	r10
    14b6:	9f 90       	pop	r9
    14b8:	8f 90       	pop	r8
    14ba:	08 95       	ret

000014bc <_ZN5Print5printEli>:
    14bc:	cf 92       	push	r12
    14be:	df 92       	push	r13
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	ec 01       	movw	r28, r24
    14ce:	6a 01       	movw	r12, r20
    14d0:	7b 01       	movw	r14, r22
    14d2:	21 15       	cp	r18, r1
    14d4:	31 05       	cpc	r19, r1
    14d6:	79 f4       	brne	.+30     	; 0x14f6 <_ZN5Print5printEli+0x3a>
    14d8:	e8 81       	ld	r30, Y
    14da:	f9 81       	ldd	r31, Y+1	; 0x01
    14dc:	01 90       	ld	r0, Z+
    14de:	f0 81       	ld	r31, Z
    14e0:	e0 2d       	mov	r30, r0
    14e2:	64 2f       	mov	r22, r20
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	09 94       	ijmp
    14f6:	2a 30       	cpi	r18, 0x0A	; 10
    14f8:	31 05       	cpc	r19, r1
    14fa:	e9 f4       	brne	.+58     	; 0x1536 <_ZN5Print5printEli+0x7a>
    14fc:	77 ff       	sbrs	r23, 7
    14fe:	1a c0       	rjmp	.+52     	; 0x1534 <_ZN5Print5printEli+0x78>
    1500:	6d e2       	ldi	r22, 0x2D	; 45
    1502:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_ZN5Print5printEc>
    1506:	8c 01       	movw	r16, r24
    1508:	44 27       	eor	r20, r20
    150a:	55 27       	eor	r21, r21
    150c:	ba 01       	movw	r22, r20
    150e:	4c 19       	sub	r20, r12
    1510:	5d 09       	sbc	r21, r13
    1512:	6e 09       	sbc	r22, r14
    1514:	7f 09       	sbc	r23, r15
    1516:	2a e0       	ldi	r18, 0x0A	; 10
    1518:	ce 01       	movw	r24, r28
    151a:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN5Print11printNumberEmh>
    151e:	80 0f       	add	r24, r16
    1520:	91 1f       	adc	r25, r17
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	08 95       	ret
    1534:	2a e0       	ldi	r18, 0x0A	; 10
    1536:	b7 01       	movw	r22, r14
    1538:	a6 01       	movw	r20, r12
    153a:	ce 01       	movw	r24, r28
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	0c 94 05 0a 	jmp	0x140a	; 0x140a <_ZN5Print11printNumberEmh>

00001550 <_ZN5Print5printEii>:
    1550:	9a 01       	movw	r18, r20
    1552:	ab 01       	movw	r20, r22
    1554:	66 27       	eor	r22, r22
    1556:	57 fd       	sbrc	r21, 7
    1558:	60 95       	com	r22
    155a:	76 2f       	mov	r23, r22
    155c:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <_ZN5Print5printEli>

00001560 <__divmodhi4>:
    1560:	97 fb       	bst	r25, 7
    1562:	07 2e       	mov	r0, r23
    1564:	16 f4       	brtc	.+4      	; 0x156a <__divmodhi4+0xa>
    1566:	00 94       	com	r0
    1568:	07 d0       	rcall	.+14     	; 0x1578 <__divmodhi4_neg1>
    156a:	77 fd       	sbrc	r23, 7
    156c:	09 d0       	rcall	.+18     	; 0x1580 <__divmodhi4_neg2>
    156e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__udivmodhi4>
    1572:	07 fc       	sbrc	r0, 7
    1574:	05 d0       	rcall	.+10     	; 0x1580 <__divmodhi4_neg2>
    1576:	3e f4       	brtc	.+14     	; 0x1586 <__divmodhi4_exit>

00001578 <__divmodhi4_neg1>:
    1578:	90 95       	com	r25
    157a:	81 95       	neg	r24
    157c:	9f 4f       	sbci	r25, 0xFF	; 255
    157e:	08 95       	ret

00001580 <__divmodhi4_neg2>:
    1580:	70 95       	com	r23
    1582:	61 95       	neg	r22
    1584:	7f 4f       	sbci	r23, 0xFF	; 255

00001586 <__divmodhi4_exit>:
    1586:	08 95       	ret

00001588 <__udivmodsi4>:
    1588:	a1 e2       	ldi	r26, 0x21	; 33
    158a:	1a 2e       	mov	r1, r26
    158c:	aa 1b       	sub	r26, r26
    158e:	bb 1b       	sub	r27, r27
    1590:	fd 01       	movw	r30, r26
    1592:	0d c0       	rjmp	.+26     	; 0x15ae <__udivmodsi4_ep>

00001594 <__udivmodsi4_loop>:
    1594:	aa 1f       	adc	r26, r26
    1596:	bb 1f       	adc	r27, r27
    1598:	ee 1f       	adc	r30, r30
    159a:	ff 1f       	adc	r31, r31
    159c:	a2 17       	cp	r26, r18
    159e:	b3 07       	cpc	r27, r19
    15a0:	e4 07       	cpc	r30, r20
    15a2:	f5 07       	cpc	r31, r21
    15a4:	20 f0       	brcs	.+8      	; 0x15ae <__udivmodsi4_ep>
    15a6:	a2 1b       	sub	r26, r18
    15a8:	b3 0b       	sbc	r27, r19
    15aa:	e4 0b       	sbc	r30, r20
    15ac:	f5 0b       	sbc	r31, r21

000015ae <__udivmodsi4_ep>:
    15ae:	66 1f       	adc	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	1a 94       	dec	r1
    15b8:	69 f7       	brne	.-38     	; 0x1594 <__udivmodsi4_loop>
    15ba:	60 95       	com	r22
    15bc:	70 95       	com	r23
    15be:	80 95       	com	r24
    15c0:	90 95       	com	r25
    15c2:	9b 01       	movw	r18, r22
    15c4:	ac 01       	movw	r20, r24
    15c6:	bd 01       	movw	r22, r26
    15c8:	cf 01       	movw	r24, r30
    15ca:	08 95       	ret

000015cc <__udivmodhi4>:
    15cc:	aa 1b       	sub	r26, r26
    15ce:	bb 1b       	sub	r27, r27
    15d0:	51 e1       	ldi	r21, 0x11	; 17
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <__udivmodhi4_ep>

000015d4 <__udivmodhi4_loop>:
    15d4:	aa 1f       	adc	r26, r26
    15d6:	bb 1f       	adc	r27, r27
    15d8:	a6 17       	cp	r26, r22
    15da:	b7 07       	cpc	r27, r23
    15dc:	10 f0       	brcs	.+4      	; 0x15e2 <__udivmodhi4_ep>
    15de:	a6 1b       	sub	r26, r22
    15e0:	b7 0b       	sbc	r27, r23

000015e2 <__udivmodhi4_ep>:
    15e2:	88 1f       	adc	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	5a 95       	dec	r21
    15e8:	a9 f7       	brne	.-22     	; 0x15d4 <__udivmodhi4_loop>
    15ea:	80 95       	com	r24
    15ec:	90 95       	com	r25
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	08 95       	ret

000015f4 <__tablejump2__>:
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	05 90       	lpm	r0, Z+
    15fa:	f4 91       	lpm	r31, Z
    15fc:	e0 2d       	mov	r30, r0
    15fe:	09 94       	ijmp

00001600 <_exit>:
    1600:	f8 94       	cli

00001602 <__stop_program>:
    1602:	ff cf       	rjmp	.-2      	; 0x1602 <__stop_program>
