
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00001606  0000169a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001606  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020c  008001a0  008001a0  0000173a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003aa1  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbf  00000000  00000000  000054ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000163c  00000000  00000000  0000646c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  00007aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010b7  00000000  00000000  000080e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b7  00000000  00000000  00009197  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000b44e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__vector_9>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_18>
      4c:	0c 94 25 03 	jmp	0x64a	; 0x64a <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__vector_21>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
      7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8c:	03 03 03 03                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
      90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_timer_PGM>:
      a4:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      b4:	00 00 00 00                                         ....

000000b8 <__ctors_start>:
      b8:	e8 09       	sbc	r30, r8
      ba:	7f 0a       	sbc	r7, r31

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e6 e0       	ldi	r30, 0x06	; 6
      d0:	f6 e1       	ldi	r31, 0x16	; 22
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a0 3a       	cpi	r26, 0xA0	; 160
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	23 e0       	ldi	r18, 0x03	; 3
      e0:	a0 ea       	ldi	r26, 0xA0	; 160
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	ac 3a       	cpi	r26, 0xAC	; 172
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	ce e5       	ldi	r28, 0x5E	; 94
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
      f6:	21 97       	sbiw	r28, 0x01	; 1
      f8:	fe 01       	movw	r30, r28
      fa:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__tablejump2__>
      fe:	cc 35       	cpi	r28, 0x5C	; 92
     100:	d1 07       	cpc	r29, r17
     102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
     104:	0e 94 35 0a 	call	0x146a	; 0x146a <main>
     108:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_ZN5Print5writeEPKhj>:
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	6c 01       	movw	r12, r24
     122:	7a 01       	movw	r14, r20
     124:	8b 01       	movw	r16, r22
     126:	c0 e0       	ldi	r28, 0x00	; 0
     128:	d0 e0       	ldi	r29, 0x00	; 0
     12a:	ce 15       	cp	r28, r14
     12c:	df 05       	cpc	r29, r15
     12e:	81 f0       	breq	.+32     	; 0x150 <_ZN5Print5writeEPKhj+0x40>
     130:	d8 01       	movw	r26, r16
     132:	6d 91       	ld	r22, X+
     134:	8d 01       	movw	r16, r26
     136:	d6 01       	movw	r26, r12
     138:	ed 91       	ld	r30, X+
     13a:	fc 91       	ld	r31, X
     13c:	01 90       	ld	r0, Z+
     13e:	f0 81       	ld	r31, Z
     140:	e0 2d       	mov	r30, r0
     142:	c6 01       	movw	r24, r12
     144:	09 95       	icall
     146:	89 2b       	or	r24, r25
     148:	11 f0       	breq	.+4      	; 0x14e <_ZN5Print5writeEPKhj+0x3e>
     14a:	21 96       	adiw	r28, 0x01	; 1
     14c:	ee cf       	rjmp	.-36     	; 0x12a <_ZN5Print5writeEPKhj+0x1a>
     14e:	7e 01       	movw	r14, r28
     150:	c7 01       	movw	r24, r14
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	0f 91       	pop	r16
     15a:	ff 90       	pop	r15
     15c:	ef 90       	pop	r14
     15e:	df 90       	pop	r13
     160:	cf 90       	pop	r12
     162:	08 95       	ret

00000164 <_ZN14HardwareSerial17availableForWriteEv>:
     164:	fc 01       	movw	r30, r24
     166:	53 8d       	ldd	r21, Z+27	; 0x1b
     168:	44 8d       	ldd	r20, Z+28	; 0x1c
     16a:	25 2f       	mov	r18, r21
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	84 2f       	mov	r24, r20
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	82 1b       	sub	r24, r18
     174:	93 0b       	sbc	r25, r19
     176:	54 17       	cp	r21, r20
     178:	10 f0       	brcs	.+4      	; 0x17e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     17a:	cf 96       	adiw	r24, 0x3f	; 63
     17c:	08 95       	ret
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	08 95       	ret

00000182 <_ZN14HardwareSerial4readEv>:
     182:	fc 01       	movw	r30, r24
     184:	91 8d       	ldd	r25, Z+25	; 0x19
     186:	82 8d       	ldd	r24, Z+26	; 0x1a
     188:	98 17       	cp	r25, r24
     18a:	61 f0       	breq	.+24     	; 0x1a4 <_ZN14HardwareSerial4readEv+0x22>
     18c:	82 8d       	ldd	r24, Z+26	; 0x1a
     18e:	df 01       	movw	r26, r30
     190:	a8 0f       	add	r26, r24
     192:	b1 1d       	adc	r27, r1
     194:	5d 96       	adiw	r26, 0x1d	; 29
     196:	8c 91       	ld	r24, X
     198:	92 8d       	ldd	r25, Z+26	; 0x1a
     19a:	9f 5f       	subi	r25, 0xFF	; 255
     19c:	9f 73       	andi	r25, 0x3F	; 63
     19e:	92 8f       	std	Z+26, r25	; 0x1a
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	08 95       	ret
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	9f ef       	ldi	r25, 0xFF	; 255
     1a8:	08 95       	ret

000001aa <_ZN14HardwareSerial4peekEv>:
     1aa:	fc 01       	movw	r30, r24
     1ac:	91 8d       	ldd	r25, Z+25	; 0x19
     1ae:	82 8d       	ldd	r24, Z+26	; 0x1a
     1b0:	98 17       	cp	r25, r24
     1b2:	31 f0       	breq	.+12     	; 0x1c0 <_ZN14HardwareSerial4peekEv+0x16>
     1b4:	82 8d       	ldd	r24, Z+26	; 0x1a
     1b6:	e8 0f       	add	r30, r24
     1b8:	f1 1d       	adc	r31, r1
     1ba:	85 8d       	ldd	r24, Z+29	; 0x1d
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	08 95       	ret
     1c0:	8f ef       	ldi	r24, 0xFF	; 255
     1c2:	9f ef       	ldi	r25, 0xFF	; 255
     1c4:	08 95       	ret

000001c6 <_ZN14HardwareSerial9availableEv>:
     1c6:	fc 01       	movw	r30, r24
     1c8:	91 8d       	ldd	r25, Z+25	; 0x19
     1ca:	22 8d       	ldd	r18, Z+26	; 0x1a
     1cc:	89 2f       	mov	r24, r25
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	80 5c       	subi	r24, 0xC0	; 192
     1d2:	9f 4f       	sbci	r25, 0xFF	; 255
     1d4:	82 1b       	sub	r24, r18
     1d6:	91 09       	sbc	r25, r1
     1d8:	8f 73       	andi	r24, 0x3F	; 63
     1da:	99 27       	eor	r25, r25
     1dc:	08 95       	ret

000001de <_Z17Serial0_availablev>:
     1de:	80 ea       	ldi	r24, 0xA0	; 160
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN14HardwareSerial9availableEv>
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	89 2b       	or	r24, r25
     1ea:	09 f4       	brne	.+2      	; 0x1ee <_Z17Serial0_availablev+0x10>
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	82 2f       	mov	r24, r18
     1f0:	08 95       	ret

000001f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
     1f2:	fc 01       	movw	r30, r24
     1f4:	84 8d       	ldd	r24, Z+28	; 0x1c
     1f6:	df 01       	movw	r26, r30
     1f8:	a8 0f       	add	r26, r24
     1fa:	b1 1d       	adc	r27, r1
     1fc:	a3 5a       	subi	r26, 0xA3	; 163
     1fe:	bf 4f       	sbci	r27, 0xFF	; 255
     200:	2c 91       	ld	r18, X
     202:	84 8d       	ldd	r24, Z+28	; 0x1c
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	01 96       	adiw	r24, 0x01	; 1
     208:	8f 73       	andi	r24, 0x3F	; 63
     20a:	99 27       	eor	r25, r25
     20c:	84 8f       	std	Z+28, r24	; 0x1c
     20e:	a6 89       	ldd	r26, Z+22	; 0x16
     210:	b7 89       	ldd	r27, Z+23	; 0x17
     212:	2c 93       	st	X, r18
     214:	a0 89       	ldd	r26, Z+16	; 0x10
     216:	b1 89       	ldd	r27, Z+17	; 0x11
     218:	8c 91       	ld	r24, X
     21a:	83 70       	andi	r24, 0x03	; 3
     21c:	80 64       	ori	r24, 0x40	; 64
     21e:	8c 93       	st	X, r24
     220:	93 8d       	ldd	r25, Z+27	; 0x1b
     222:	84 8d       	ldd	r24, Z+28	; 0x1c
     224:	98 13       	cpse	r25, r24
     226:	06 c0       	rjmp	.+12     	; 0x234 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
     228:	02 88       	ldd	r0, Z+18	; 0x12
     22a:	f3 89       	ldd	r31, Z+19	; 0x13
     22c:	e0 2d       	mov	r30, r0
     22e:	80 81       	ld	r24, Z
     230:	8f 7d       	andi	r24, 0xDF	; 223
     232:	80 83       	st	Z, r24
     234:	08 95       	ret

00000236 <_ZN14HardwareSerial5writeEh>:
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	ec 01       	movw	r28, r24
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	88 8f       	std	Y+24, r24	; 0x18
     248:	9b 8d       	ldd	r25, Y+27	; 0x1b
     24a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     24c:	98 13       	cpse	r25, r24
     24e:	05 c0       	rjmp	.+10     	; 0x25a <_ZN14HardwareSerial5writeEh+0x24>
     250:	e8 89       	ldd	r30, Y+16	; 0x10
     252:	f9 89       	ldd	r31, Y+17	; 0x11
     254:	80 81       	ld	r24, Z
     256:	85 fd       	sbrc	r24, 5
     258:	26 c0       	rjmp	.+76     	; 0x2a6 <_ZN14HardwareSerial5writeEh+0x70>
     25a:	f6 2e       	mov	r15, r22
     25c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	0f 5f       	subi	r16, 0xFF	; 255
     262:	1f 4f       	sbci	r17, 0xFF	; 255
     264:	0f 73       	andi	r16, 0x3F	; 63
     266:	11 27       	eor	r17, r17
     268:	e0 2e       	mov	r14, r16
     26a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     26c:	e8 12       	cpse	r14, r24
     26e:	0c c0       	rjmp	.+24     	; 0x288 <_ZN14HardwareSerial5writeEh+0x52>
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	07 fc       	sbrc	r0, 7
     274:	fa cf       	rjmp	.-12     	; 0x26a <_ZN14HardwareSerial5writeEh+0x34>
     276:	e8 89       	ldd	r30, Y+16	; 0x10
     278:	f9 89       	ldd	r31, Y+17	; 0x11
     27a:	80 81       	ld	r24, Z
     27c:	85 ff       	sbrs	r24, 5
     27e:	f5 cf       	rjmp	.-22     	; 0x26a <_ZN14HardwareSerial5writeEh+0x34>
     280:	ce 01       	movw	r24, r28
     282:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     286:	f1 cf       	rjmp	.-30     	; 0x26a <_ZN14HardwareSerial5writeEh+0x34>
     288:	8b 8d       	ldd	r24, Y+27	; 0x1b
     28a:	fe 01       	movw	r30, r28
     28c:	e8 0f       	add	r30, r24
     28e:	f1 1d       	adc	r31, r1
     290:	e3 5a       	subi	r30, 0xA3	; 163
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	f0 82       	st	Z, r15
     296:	9f b7       	in	r25, 0x3f	; 63
     298:	f8 94       	cli
     29a:	0b 8f       	std	Y+27, r16	; 0x1b
     29c:	ea 89       	ldd	r30, Y+18	; 0x12
     29e:	fb 89       	ldd	r31, Y+19	; 0x13
     2a0:	80 81       	ld	r24, Z
     2a2:	80 62       	ori	r24, 0x20	; 32
     2a4:	0a c0       	rjmp	.+20     	; 0x2ba <_ZN14HardwareSerial5writeEh+0x84>
     2a6:	9f b7       	in	r25, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	ee 89       	ldd	r30, Y+22	; 0x16
     2ac:	ff 89       	ldd	r31, Y+23	; 0x17
     2ae:	60 83       	st	Z, r22
     2b0:	e8 89       	ldd	r30, Y+16	; 0x10
     2b2:	f9 89       	ldd	r31, Y+17	; 0x11
     2b4:	80 81       	ld	r24, Z
     2b6:	83 70       	andi	r24, 0x03	; 3
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24
     2bc:	9f bf       	out	0x3f, r25	; 63
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	08 95       	ret

000002d0 <_ZN14HardwareSerial5flushEv>:
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	ec 01       	movw	r28, r24
     2d6:	88 8d       	ldd	r24, Y+24	; 0x18
     2d8:	88 23       	and	r24, r24
     2da:	c9 f0       	breq	.+50     	; 0x30e <_ZN14HardwareSerial5flushEv+0x3e>
     2dc:	ea 89       	ldd	r30, Y+18	; 0x12
     2de:	fb 89       	ldd	r31, Y+19	; 0x13
     2e0:	80 81       	ld	r24, Z
     2e2:	85 fd       	sbrc	r24, 5
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <_ZN14HardwareSerial5flushEv+0x20>
     2e6:	a8 89       	ldd	r26, Y+16	; 0x10
     2e8:	b9 89       	ldd	r27, Y+17	; 0x11
     2ea:	8c 91       	ld	r24, X
     2ec:	86 fd       	sbrc	r24, 6
     2ee:	0f c0       	rjmp	.+30     	; 0x30e <_ZN14HardwareSerial5flushEv+0x3e>
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	07 fc       	sbrc	r0, 7
     2f4:	f5 cf       	rjmp	.-22     	; 0x2e0 <_ZN14HardwareSerial5flushEv+0x10>
     2f6:	80 81       	ld	r24, Z
     2f8:	85 ff       	sbrs	r24, 5
     2fa:	f2 cf       	rjmp	.-28     	; 0x2e0 <_ZN14HardwareSerial5flushEv+0x10>
     2fc:	a8 89       	ldd	r26, Y+16	; 0x10
     2fe:	b9 89       	ldd	r27, Y+17	; 0x11
     300:	8c 91       	ld	r24, X
     302:	85 ff       	sbrs	r24, 5
     304:	ed cf       	rjmp	.-38     	; 0x2e0 <_ZN14HardwareSerial5flushEv+0x10>
     306:	ce 01       	movw	r24, r28
     308:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     30c:	e7 cf       	rjmp	.-50     	; 0x2dc <_ZN14HardwareSerial5flushEv+0xc>
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <_Z14serialEventRunv>:
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	89 2b       	or	r24, r25
     31a:	29 f0       	breq	.+10     	; 0x326 <_Z14serialEventRunv+0x12>
     31c:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z17Serial0_availablev>
     320:	81 11       	cpse	r24, r1
     322:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     326:	08 95       	ret

00000328 <_ZN5Print5writeEPKc.constprop.4>:
     328:	61 15       	cp	r22, r1
     32a:	71 05       	cpc	r23, r1
     32c:	79 f0       	breq	.+30     	; 0x34c <_ZN5Print5writeEPKc.constprop.4+0x24>
     32e:	fb 01       	movw	r30, r22
     330:	01 90       	ld	r0, Z+
     332:	00 20       	and	r0, r0
     334:	e9 f7       	brne	.-6      	; 0x330 <_ZN5Print5writeEPKc.constprop.4+0x8>
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	af 01       	movw	r20, r30
     33a:	46 1b       	sub	r20, r22
     33c:	57 0b       	sbc	r21, r23
     33e:	dc 01       	movw	r26, r24
     340:	ed 91       	ld	r30, X+
     342:	fc 91       	ld	r31, X
     344:	02 80       	ldd	r0, Z+2	; 0x02
     346:	f3 81       	ldd	r31, Z+3	; 0x03
     348:	e0 2d       	mov	r30, r0
     34a:	09 94       	ijmp
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	08 95       	ret

00000352 <_ZN5Print11printNumberEmh.constprop.2>:
     352:	8f 92       	push	r8
     354:	9f 92       	push	r9
     356:	af 92       	push	r10
     358:	bf 92       	push	r11
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	a1 97       	sbiw	r28, 0x21	; 33
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	7c 01       	movw	r14, r24
     378:	fa 01       	movw	r30, r20
     37a:	cb 01       	movw	r24, r22
     37c:	19 a2       	std	Y+33, r1	; 0x21
     37e:	22 30       	cpi	r18, 0x02	; 2
     380:	08 f4       	brcc	.+2      	; 0x384 <_ZN5Print11printNumberEmh.constprop.2+0x32>
     382:	2a e0       	ldi	r18, 0x0A	; 10
     384:	8e 01       	movw	r16, r28
     386:	0f 5d       	subi	r16, 0xDF	; 223
     388:	1f 4f       	sbci	r17, 0xFF	; 255
     38a:	82 2e       	mov	r8, r18
     38c:	91 2c       	mov	r9, r1
     38e:	a1 2c       	mov	r10, r1
     390:	b1 2c       	mov	r11, r1
     392:	bf 01       	movw	r22, r30
     394:	a5 01       	movw	r20, r10
     396:	94 01       	movw	r18, r8
     398:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__udivmodsi4>
     39c:	f9 01       	movw	r30, r18
     39e:	ca 01       	movw	r24, r20
     3a0:	01 50       	subi	r16, 0x01	; 1
     3a2:	11 09       	sbc	r17, r1
     3a4:	6a 30       	cpi	r22, 0x0A	; 10
     3a6:	14 f4       	brge	.+4      	; 0x3ac <_ZN5Print11printNumberEmh.constprop.2+0x5a>
     3a8:	60 5d       	subi	r22, 0xD0	; 208
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <_ZN5Print11printNumberEmh.constprop.2+0x5c>
     3ac:	69 5c       	subi	r22, 0xC9	; 201
     3ae:	d8 01       	movw	r26, r16
     3b0:	6c 93       	st	X, r22
     3b2:	23 2b       	or	r18, r19
     3b4:	24 2b       	or	r18, r20
     3b6:	25 2b       	or	r18, r21
     3b8:	61 f7       	brne	.-40     	; 0x392 <_ZN5Print11printNumberEmh.constprop.2+0x40>
     3ba:	b8 01       	movw	r22, r16
     3bc:	c7 01       	movw	r24, r14
     3be:	0e 94 94 01 	call	0x328	; 0x328 <_ZN5Print5writeEPKc.constprop.4>
     3c2:	a1 96       	adiw	r28, 0x21	; 33
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	bf 90       	pop	r11
     3dc:	af 90       	pop	r10
     3de:	9f 90       	pop	r9
     3e0:	8f 90       	pop	r8
     3e2:	08 95       	ret

000003e4 <__cxa_pure_virtual>:
     3e4:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <abort>

000003e8 <digitalWrite>:
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	ec 55       	subi	r30, 0x5C	; 92
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	24 91       	lpm	r18, Z
     3f2:	fc 01       	movw	r30, r24
     3f4:	e0 57       	subi	r30, 0x70	; 112
     3f6:	ff 4f       	sbci	r31, 0xFF	; 255
     3f8:	34 91       	lpm	r19, Z
     3fa:	fc 01       	movw	r30, r24
     3fc:	e4 58       	subi	r30, 0x84	; 132
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	e4 91       	lpm	r30, Z
     402:	ee 23       	and	r30, r30
     404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	3c c0       	rjmp	.+120    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     408:	22 23       	and	r18, r18
     40a:	39 f1       	breq	.+78     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     40c:	23 30       	cpi	r18, 0x03	; 3
     40e:	91 f0       	breq	.+36     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     410:	38 f4       	brcc	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     412:	21 30       	cpi	r18, 0x01	; 1
     414:	a9 f0       	breq	.+42     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     416:	22 30       	cpi	r18, 0x02	; 2
     418:	01 f5       	brne	.+64     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     41a:	84 b5       	in	r24, 0x24	; 36
     41c:	8f 7d       	andi	r24, 0xDF	; 223
     41e:	12 c0       	rjmp	.+36     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     420:	27 30       	cpi	r18, 0x07	; 7
     422:	91 f0       	breq	.+36     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     424:	28 30       	cpi	r18, 0x08	; 8
     426:	a1 f0       	breq	.+40     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     428:	24 30       	cpi	r18, 0x04	; 4
     42a:	b9 f4       	brne	.+46     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     42c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     430:	8f 7d       	andi	r24, 0xDF	; 223
     432:	03 c0       	rjmp	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     434:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     438:	8f 77       	andi	r24, 0x7F	; 127
     43a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     43e:	0d c0       	rjmp	.+26     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     440:	84 b5       	in	r24, 0x24	; 36
     442:	8f 77       	andi	r24, 0x7F	; 127
     444:	84 bd       	out	0x24, r24	; 36
     446:	09 c0       	rjmp	.+18     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     448:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     44c:	8f 77       	andi	r24, 0x7F	; 127
     44e:	03 c0       	rjmp	.+6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     450:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     454:	8f 7d       	andi	r24, 0xDF	; 223
     456:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	ee 58       	subi	r30, 0x8E	; 142
     462:	ff 4f       	sbci	r31, 0xFF	; 255
     464:	a5 91       	lpm	r26, Z+
     466:	b4 91       	lpm	r27, Z
     468:	9f b7       	in	r25, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	61 11       	cpse	r22, r1
     46e:	04 c0       	rjmp	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     470:	8c 91       	ld	r24, X
     472:	30 95       	com	r19
     474:	38 23       	and	r19, r24
     476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     478:	ec 91       	ld	r30, X
     47a:	3e 2b       	or	r19, r30
     47c:	3c 93       	st	X, r19
     47e:	9f bf       	out	0x3f, r25	; 63
     480:	08 95       	ret

00000482 <pinMode>:
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	fc 01       	movw	r30, r24
     48a:	e0 57       	subi	r30, 0x70	; 112
     48c:	ff 4f       	sbci	r31, 0xFF	; 255
     48e:	24 91       	lpm	r18, Z
     490:	fc 01       	movw	r30, r24
     492:	e4 58       	subi	r30, 0x84	; 132
     494:	ff 4f       	sbci	r31, 0xFF	; 255
     496:	84 91       	lpm	r24, Z
     498:	88 23       	and	r24, r24
     49a:	61 f1       	breq	.+88     	; 0x4f4 <pinMode+0x72>
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	fc 01       	movw	r30, r24
     4a4:	e8 59       	subi	r30, 0x98	; 152
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	c5 91       	lpm	r28, Z+
     4aa:	d4 91       	lpm	r29, Z
     4ac:	fc 01       	movw	r30, r24
     4ae:	ee 58       	subi	r30, 0x8E	; 142
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	a5 91       	lpm	r26, Z+
     4b4:	b4 91       	lpm	r27, Z
     4b6:	61 11       	cpse	r22, r1
     4b8:	09 c0       	rjmp	.+18     	; 0x4cc <pinMode+0x4a>
     4ba:	9f b7       	in	r25, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	88 81       	ld	r24, Y
     4c0:	20 95       	com	r18
     4c2:	82 23       	and	r24, r18
     4c4:	88 83       	st	Y, r24
     4c6:	ec 91       	ld	r30, X
     4c8:	2e 23       	and	r18, r30
     4ca:	0b c0       	rjmp	.+22     	; 0x4e2 <pinMode+0x60>
     4cc:	62 30       	cpi	r22, 0x02	; 2
     4ce:	61 f4       	brne	.+24     	; 0x4e8 <pinMode+0x66>
     4d0:	9f b7       	in	r25, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	88 81       	ld	r24, Y
     4d6:	32 2f       	mov	r19, r18
     4d8:	30 95       	com	r19
     4da:	83 23       	and	r24, r19
     4dc:	88 83       	st	Y, r24
     4de:	ec 91       	ld	r30, X
     4e0:	2e 2b       	or	r18, r30
     4e2:	2c 93       	st	X, r18
     4e4:	9f bf       	out	0x3f, r25	; 63
     4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <pinMode+0x72>
     4e8:	8f b7       	in	r24, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	e8 81       	ld	r30, Y
     4ee:	2e 2b       	or	r18, r30
     4f0:	28 83       	st	Y, r18
     4f2:	8f bf       	out	0x3f, r24	; 63
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <delayMicroseconds>:
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	91 05       	cpc	r25, r1
     4fe:	38 f0       	brcs	.+14     	; 0x50e <delayMicroseconds+0x14>
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	05 97       	sbiw	r24, 0x05	; 5
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <delayMicroseconds+0x10>
     50e:	08 95       	ret

00000510 <__vector_16>:
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	8f 93       	push	r24
     520:	9f 93       	push	r25
     522:	af 93       	push	r26
     524:	bf 93       	push	r27
     526:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <timer0_millis>
     52a:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <timer0_millis+0x1>
     52e:	a0 91 44 02 	lds	r26, 0x0244	; 0x800244 <timer0_millis+0x2>
     532:	b0 91 45 02 	lds	r27, 0x0245	; 0x800245 <timer0_millis+0x3>
     536:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <timer0_fract>
     53a:	23 e0       	ldi	r18, 0x03	; 3
     53c:	23 0f       	add	r18, r19
     53e:	2d 37       	cpi	r18, 0x7D	; 125
     540:	20 f4       	brcc	.+8      	; 0x54a <__vector_16+0x3a>
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	a1 1d       	adc	r26, r1
     546:	b1 1d       	adc	r27, r1
     548:	05 c0       	rjmp	.+10     	; 0x554 <__vector_16+0x44>
     54a:	26 e8       	ldi	r18, 0x86	; 134
     54c:	23 0f       	add	r18, r19
     54e:	02 96       	adiw	r24, 0x02	; 2
     550:	a1 1d       	adc	r26, r1
     552:	b1 1d       	adc	r27, r1
     554:	20 93 41 02 	sts	0x0241, r18	; 0x800241 <timer0_fract>
     558:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <timer0_millis>
     55c:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <timer0_millis+0x1>
     560:	a0 93 44 02 	sts	0x0244, r26	; 0x800244 <timer0_millis+0x2>
     564:	b0 93 45 02 	sts	0x0245, r27	; 0x800245 <timer0_millis+0x3>
     568:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <timer0_overflow_count>
     56c:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <timer0_overflow_count+0x1>
     570:	a0 91 3f 02 	lds	r26, 0x023F	; 0x80023f <timer0_overflow_count+0x2>
     574:	b0 91 40 02 	lds	r27, 0x0240	; 0x800240 <timer0_overflow_count+0x3>
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	a1 1d       	adc	r26, r1
     57c:	b1 1d       	adc	r27, r1
     57e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <timer0_overflow_count>
     582:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <timer0_overflow_count+0x1>
     586:	a0 93 3f 02 	sts	0x023F, r26	; 0x80023f <timer0_overflow_count+0x2>
     58a:	b0 93 40 02 	sts	0x0240, r27	; 0x800240 <timer0_overflow_count+0x3>
     58e:	bf 91       	pop	r27
     590:	af 91       	pop	r26
     592:	9f 91       	pop	r25
     594:	8f 91       	pop	r24
     596:	3f 91       	pop	r19
     598:	2f 91       	pop	r18
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <_ZN5Print5printEii>:
     5a4:	cf 92       	push	r12
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	41 15       	cp	r20, r1
     5b6:	51 05       	cpc	r21, r1
     5b8:	79 f4       	brne	.+30     	; 0x5d8 <_ZN5Print5printEii+0x34>
     5ba:	dc 01       	movw	r26, r24
     5bc:	ed 91       	ld	r30, X+
     5be:	fc 91       	ld	r31, X
     5c0:	01 90       	ld	r0, Z+
     5c2:	f0 81       	ld	r31, Z
     5c4:	e0 2d       	mov	r30, r0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	09 94       	ijmp
     5d8:	6b 01       	movw	r12, r22
     5da:	77 0f       	add	r23, r23
     5dc:	ee 08       	sbc	r14, r14
     5de:	ff 08       	sbc	r15, r15
     5e0:	4a 30       	cpi	r20, 0x0A	; 10
     5e2:	51 05       	cpc	r21, r1
     5e4:	19 f5       	brne	.+70     	; 0x62c <_ZN5Print5printEii+0x88>
     5e6:	f7 fe       	sbrs	r15, 7
     5e8:	1f c0       	rjmp	.+62     	; 0x628 <_ZN5Print5printEii+0x84>
     5ea:	ec 01       	movw	r28, r24
     5ec:	e8 81       	ld	r30, Y
     5ee:	f9 81       	ldd	r31, Y+1	; 0x01
     5f0:	01 90       	ld	r0, Z+
     5f2:	f0 81       	ld	r31, Z
     5f4:	e0 2d       	mov	r30, r0
     5f6:	6d e2       	ldi	r22, 0x2D	; 45
     5f8:	09 95       	icall
     5fa:	8c 01       	movw	r16, r24
     5fc:	44 27       	eor	r20, r20
     5fe:	55 27       	eor	r21, r21
     600:	ba 01       	movw	r22, r20
     602:	4c 19       	sub	r20, r12
     604:	5d 09       	sbc	r21, r13
     606:	6e 09       	sbc	r22, r14
     608:	7f 09       	sbc	r23, r15
     60a:	2a e0       	ldi	r18, 0x0A	; 10
     60c:	ce 01       	movw	r24, r28
     60e:	0e 94 a9 01 	call	0x352	; 0x352 <_ZN5Print11printNumberEmh.constprop.2>
     612:	80 0f       	add	r24, r16
     614:	91 1f       	adc	r25, r17
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	df 90       	pop	r13
     624:	cf 90       	pop	r12
     626:	08 95       	ret
     628:	2a e0       	ldi	r18, 0x0A	; 10
     62a:	01 c0       	rjmp	.+2      	; 0x62e <_ZN5Print5printEii+0x8a>
     62c:	24 2f       	mov	r18, r20
     62e:	b7 01       	movw	r22, r14
     630:	a6 01       	movw	r20, r12
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	df 90       	pop	r13
     640:	cf 90       	pop	r12
     642:	0c 94 a9 01 	jmp	0x352	; 0x352 <_ZN5Print11printNumberEmh.constprop.2>

00000646 <_ZN5Print5printEPKc>:
     646:	0c 94 94 01 	jmp	0x328	; 0x328 <_ZN5Print5writeEPKc.constprop.4>

0000064a <__vector_19>:
     64a:	1f 92       	push	r1
     64c:	0f 92       	push	r0
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	0f 92       	push	r0
     652:	11 24       	eor	r1, r1
     654:	2f 93       	push	r18
     656:	3f 93       	push	r19
     658:	4f 93       	push	r20
     65a:	5f 93       	push	r21
     65c:	6f 93       	push	r22
     65e:	7f 93       	push	r23
     660:	8f 93       	push	r24
     662:	9f 93       	push	r25
     664:	af 93       	push	r26
     666:	bf 93       	push	r27
     668:	ef 93       	push	r30
     66a:	ff 93       	push	r31
     66c:	80 ea       	ldi	r24, 0xA0	; 160
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     674:	ff 91       	pop	r31
     676:	ef 91       	pop	r30
     678:	bf 91       	pop	r27
     67a:	af 91       	pop	r26
     67c:	9f 91       	pop	r25
     67e:	8f 91       	pop	r24
     680:	7f 91       	pop	r23
     682:	6f 91       	pop	r22
     684:	5f 91       	pop	r21
     686:	4f 91       	pop	r20
     688:	3f 91       	pop	r19
     68a:	2f 91       	pop	r18
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	0f 90       	pop	r0
     692:	1f 90       	pop	r1
     694:	18 95       	reti

00000696 <__vector_18>:
     696:	1f 92       	push	r1
     698:	0f 92       	push	r0
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	2f 93       	push	r18
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	ef 93       	push	r30
     6a8:	ff 93       	push	r31
     6aa:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <__data_end+0x10>
     6ae:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <__data_end+0x11>
     6b2:	80 81       	ld	r24, Z
     6b4:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <__data_end+0x16>
     6b8:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <__data_end+0x17>
     6bc:	82 fd       	sbrc	r24, 2
     6be:	12 c0       	rjmp	.+36     	; 0x6e4 <__vector_18+0x4e>
     6c0:	90 81       	ld	r25, Z
     6c2:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <__data_end+0x19>
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	8f 73       	andi	r24, 0x3F	; 63
     6ca:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <__data_end+0x1a>
     6ce:	82 17       	cp	r24, r18
     6d0:	51 f0       	breq	.+20     	; 0x6e6 <__vector_18+0x50>
     6d2:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <__data_end+0x19>
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	e0 56       	subi	r30, 0x60	; 96
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	95 8f       	std	Z+29, r25	; 0x1d
     6de:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <__data_end+0x19>
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <__vector_18+0x50>
     6e4:	80 81       	ld	r24, Z
     6e6:	ff 91       	pop	r31
     6e8:	ef 91       	pop	r30
     6ea:	9f 91       	pop	r25
     6ec:	8f 91       	pop	r24
     6ee:	2f 91       	pop	r18
     6f0:	0f 90       	pop	r0
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	0f 90       	pop	r0
     6f6:	1f 90       	pop	r1
     6f8:	18 95       	reti

000006fa <_ZN14HardwareSerial5beginEmh>:
     6fa:	cf 92       	push	r12
     6fc:	df 92       	push	r13
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	ec 01       	movw	r28, r24
     70a:	6a 01       	movw	r12, r20
     70c:	7b 01       	movw	r14, r22
     70e:	12 2f       	mov	r17, r18
     710:	e8 89       	ldd	r30, Y+16	; 0x10
     712:	f9 89       	ldd	r31, Y+17	; 0x11
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	80 83       	st	Z, r24
     718:	41 15       	cp	r20, r1
     71a:	51 4e       	sbci	r21, 0xE1	; 225
     71c:	61 05       	cpc	r22, r1
     71e:	71 05       	cpc	r23, r1
     720:	b1 f0       	breq	.+44     	; 0x74e <_ZN14HardwareSerial5beginEmh+0x54>
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	79 e0       	ldi	r23, 0x09	; 9
     726:	8d e3       	ldi	r24, 0x3D	; 61
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	a7 01       	movw	r20, r14
     72c:	96 01       	movw	r18, r12
     72e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__udivmodsi4>
     732:	da 01       	movw	r26, r20
     734:	c9 01       	movw	r24, r18
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	a1 09       	sbc	r26, r1
     73a:	b1 09       	sbc	r27, r1
     73c:	b6 95       	lsr	r27
     73e:	a7 95       	ror	r26
     740:	97 95       	ror	r25
     742:	87 95       	ror	r24
     744:	9c 01       	movw	r18, r24
     746:	21 15       	cp	r18, r1
     748:	80 e1       	ldi	r24, 0x10	; 16
     74a:	38 07       	cpc	r19, r24
     74c:	a8 f0       	brcs	.+42     	; 0x778 <_ZN14HardwareSerial5beginEmh+0x7e>
     74e:	e8 89       	ldd	r30, Y+16	; 0x10
     750:	f9 89       	ldd	r31, Y+17	; 0x11
     752:	10 82       	st	Z, r1
     754:	60 e8       	ldi	r22, 0x80	; 128
     756:	74 e8       	ldi	r23, 0x84	; 132
     758:	8e e1       	ldi	r24, 0x1E	; 30
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	a7 01       	movw	r20, r14
     75e:	96 01       	movw	r18, r12
     760:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__udivmodsi4>
     764:	da 01       	movw	r26, r20
     766:	c9 01       	movw	r24, r18
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	a1 09       	sbc	r26, r1
     76c:	b1 09       	sbc	r27, r1
     76e:	b6 95       	lsr	r27
     770:	a7 95       	ror	r26
     772:	97 95       	ror	r25
     774:	87 95       	ror	r24
     776:	9c 01       	movw	r18, r24
     778:	ec 85       	ldd	r30, Y+12	; 0x0c
     77a:	fd 85       	ldd	r31, Y+13	; 0x0d
     77c:	30 83       	st	Z, r19
     77e:	ee 85       	ldd	r30, Y+14	; 0x0e
     780:	ff 85       	ldd	r31, Y+15	; 0x0f
     782:	20 83       	st	Z, r18
     784:	18 8e       	std	Y+24, r1	; 0x18
     786:	ec 89       	ldd	r30, Y+20	; 0x14
     788:	fd 89       	ldd	r31, Y+21	; 0x15
     78a:	10 83       	st	Z, r17
     78c:	ea 89       	ldd	r30, Y+18	; 0x12
     78e:	fb 89       	ldd	r31, Y+19	; 0x13
     790:	80 81       	ld	r24, Z
     792:	80 61       	ori	r24, 0x10	; 16
     794:	80 83       	st	Z, r24
     796:	ea 89       	ldd	r30, Y+18	; 0x12
     798:	fb 89       	ldd	r31, Y+19	; 0x13
     79a:	80 81       	ld	r24, Z
     79c:	88 60       	ori	r24, 0x08	; 8
     79e:	80 83       	st	Z, r24
     7a0:	ea 89       	ldd	r30, Y+18	; 0x12
     7a2:	fb 89       	ldd	r31, Y+19	; 0x13
     7a4:	80 81       	ld	r24, Z
     7a6:	80 68       	ori	r24, 0x80	; 128
     7a8:	80 83       	st	Z, r24
     7aa:	ea 89       	ldd	r30, Y+18	; 0x12
     7ac:	fb 89       	ldd	r31, Y+19	; 0x13
     7ae:	80 81       	ld	r24, Z
     7b0:	8f 7d       	andi	r24, 0xDF	; 223
     7b2:	80 83       	st	Z, r24
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	08 95       	ret

000007c4 <_Z14critical_beginv>:
    // módulo de región crítica. Esto puede suceder cuando se está ejecutando
    // una rutina de interrupción. En este caso, no deshabilitar las
    // interrupciones

    // Lectura atómica del registro
    uint8_t status_register = SREG;
     7c4:	2f b7       	in	r18, 0x3f	; 63
    cli();
     7c6:	f8 94       	cli

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
     7c8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZL11anidamiento>
     7cc:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZL11anidamiento+0x1>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     7d0:	89 2b       	or	r24, r25
     7d2:	19 f4       	brne	.+6      	; 0x7da <_Z14critical_beginv+0x16>

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
     7d4:	22 23       	and	r18, r18
     7d6:	9c f4       	brge	.+38     	; 0x7fe <_Z14critical_beginv+0x3a>
     7d8:	08 c0       	rjmp	.+16     	; 0x7ea <_Z14critical_beginv+0x26>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     7da:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZL11anidamiento>
     7de:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZL11anidamiento+0x1>
     7e2:	89 2b       	or	r24, r25
     7e4:	91 f0       	breq	.+36     	; 0x80a <_Z14critical_beginv+0x46>
     7e6:	22 23       	and	r18, r18
     7e8:	84 f0       	brlt	.+32     	; 0x80a <_Z14critical_beginv+0x46>
    {
        anidamiento++;
     7ea:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZL11anidamiento>
     7ee:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZL11anidamiento+0x1>
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <_ZL11anidamiento+0x1>
     7f8:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <_ZL11anidamiento>
     7fc:	08 95       	ret
    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     7fe:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZL11anidamiento>
     802:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZL11anidamiento+0x1>
     806:	89 2b       	or	r24, r25
     808:	81 f7       	brne	.-32     	; 0x7ea <_Z14critical_beginv+0x26>
     80a:	08 95       	ret

0000080c <_Z12critical_endv>:
    // crítica, no hacer nada.
}

void critical_end(void)
{
    uint8_t status_register = SREG;
     80c:	2f b7       	in	r18, 0x3f	; 63
    cli();
     80e:	f8 94       	cli

    if (anidamiento > 0) {
     810:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZL11anidamiento>
     814:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZL11anidamiento+0x1>
     818:	18 16       	cp	r1, r24
     81a:	19 06       	cpc	r1, r25
     81c:	8c f4       	brge	.+34     	; 0x840 <_Z12critical_endv+0x34>
        anidamiento--;
     81e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZL11anidamiento>
     822:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZL11anidamiento+0x1>
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <_ZL11anidamiento+0x1>
     82c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <_ZL11anidamiento>
        if (anidamiento == 0)
     830:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <_ZL11anidamiento>
     834:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <_ZL11anidamiento+0x1>
     838:	89 2b       	or	r24, r25
     83a:	29 f4       	brne	.+10     	; 0x846 <_Z12critical_endv+0x3a>
            sei();
     83c:	78 94       	sei
     83e:	08 95       	ret
    }
    else if ((status_register & 0x80) != 0)
     840:	22 23       	and	r18, r18
     842:	0c f4       	brge	.+2      	; 0x846 <_Z12critical_endv+0x3a>
        sei();
     844:	78 94       	sei
     846:	08 95       	ret

00000848 <_Z19procesar_adc_sensorv>:


void procesar_adc_sensor()
{
	
	uint16_t medicion = analogVal * 5 * 100 / 1024;			// formula de conversion de temp del lm35
     848:	40 91 54 02 	lds	r20, 0x0254	; 0x800254 <_ZL9analogVal>
     84c:	50 91 55 02 	lds	r21, 0x0255	; 0x800255 <_ZL9analogVal+0x1>
	callback_sensor(medicion);
     850:	24 ef       	ldi	r18, 0xF4	; 244
     852:	31 e0       	ldi	r19, 0x01	; 1
     854:	42 9f       	mul	r20, r18
     856:	c0 01       	movw	r24, r0
     858:	43 9f       	mul	r20, r19
     85a:	90 0d       	add	r25, r0
     85c:	52 9f       	mul	r21, r18
     85e:	90 0d       	add	r25, r0
     860:	11 24       	eor	r1, r1
     862:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <callback_sensor>
     866:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <callback_sensor+0x1>
     86a:	89 2f       	mov	r24, r25
     86c:	86 95       	lsr	r24
     86e:	86 95       	lsr	r24
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	09 95       	icall
     874:	08 95       	ret

00000876 <_Z15sensor_callbackj>:
}

void sensor_callback(uint16_t valor)
{
	analogVal=valor;
     876:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <_ZL9analogVal+0x1>
     87a:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <_ZL9analogVal>
	fnqueue_add(procesar_adc_sensor);
     87e:	84 e2       	ldi	r24, 0x24	; 36
     880:	94 e0       	ldi	r25, 0x04	; 4
     882:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z11fnqueue_addPFvvE>
     886:	08 95       	ret

00000888 <_Z12sensor_setupPFviE>:
}

int sensor_setup(void (* callback_s)(int))
{
	callback_sensor=callback_s ;
     888:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <callback_sensor+0x1>
     88c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <callback_sensor>
	config.channel=1;
     890:	ea e4       	ldi	r30, 0x4A	; 74
     892:	f2 e0       	ldi	r31, 0x02	; 2
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	91 83       	std	Z+1, r25	; 0x01
     89a:	80 83       	st	Z, r24
	config.value=0;
     89c:	15 82       	std	Z+5, r1	; 0x05
     89e:	14 82       	std	Z+4, r1	; 0x04
	config.callback=sensor_callback;
     8a0:	8b e3       	ldi	r24, 0x3B	; 59
     8a2:	94 e0       	ldi	r25, 0x04	; 4
     8a4:	93 83       	std	Z+3, r25	; 0x03
     8a6:	82 83       	std	Z+2, r24	; 0x02
	adc_init(&config);
     8a8:	cf 01       	movw	r24, r30
     8aa:	0e 94 73 04 	call	0x8e6	; 0x8e6 <_Z8adc_initP7adc_cfg>
	return 1;
	//...
}
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	08 95       	ret

000008b4 <_Z14llamarCallbackv>:
	return 1;
}

void llamarCallback()
{
	canales[fnLlamar].callback(valor_leido);
     8b4:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <fnLlamar>
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	fc 01       	movw	r30, r24
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	e8 0f       	add	r30, r24
     8ce:	f9 1f       	adc	r31, r25
     8d0:	e1 5a       	subi	r30, 0xA1	; 161
     8d2:	fd 4f       	sbci	r31, 0xFD	; 253
     8d4:	02 80       	ldd	r0, Z+2	; 0x02
     8d6:	f3 81       	ldd	r31, Z+3	; 0x03
     8d8:	e0 2d       	mov	r30, r0
     8da:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <valor_leido>
     8de:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <valor_leido+0x1>
     8e2:	09 95       	icall
     8e4:	08 95       	ret

000008e6 <_Z8adc_initP7adc_cfg>:
uint8_t seteados[6];		// Almacena que canales estan en uso.
uint16_t valor_leido;		// Almacena el ultimo valor leido (util).
uint8_t i;

int adc_init(adc_cfg *cfg)
{
     8e6:	fc 01       	movw	r30, r24
	if(cfg->channel>5)
     8e8:	80 81       	ld	r24, Z
     8ea:	91 81       	ldd	r25, Z+1	; 0x01
     8ec:	06 97       	sbiw	r24, 0x06	; 6
     8ee:	0c f0       	brlt	.+2      	; 0x8f2 <_Z8adc_initP7adc_cfg+0xc>
     8f0:	95 c0       	rjmp	.+298    	; 0xa1c <__stack+0x11d>
	{
		return 0;
	}
	if(iniciado==0)
     8f2:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <iniciado>
     8f6:	81 11       	cpse	r24, r1
     8f8:	6d c0       	rjmp	.+218    	; 0x9d4 <__stack+0xd5>
	{
		ADMUX &= ~(1<<ADLAR);
     8fa:	ac e7       	ldi	r26, 0x7C	; 124
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	8c 91       	ld	r24, X
     900:	8f 7d       	andi	r24, 0xDF	; 223
     902:	8c 93       	st	X, r24
		ADMUX |= (1<<REFS0);
     904:	8c 91       	ld	r24, X
     906:	80 64       	ori	r24, 0x40	; 64
     908:	8c 93       	st	X, r24
		ADMUX &= ~(1<<MUX3 | 1<<MUX2 | 1<<MUX1 | 1<<MUX0);
     90a:	8c 91       	ld	r24, X
     90c:	80 7f       	andi	r24, 0xF0	; 240
     90e:	8c 93       	st	X, r24

		switch(cfg->channel)
     910:	80 81       	ld	r24, Z
     912:	91 81       	ldd	r25, Z+1	; 0x01
     914:	83 30       	cpi	r24, 0x03	; 3
     916:	91 05       	cpc	r25, r1
     918:	d1 f0       	breq	.+52     	; 0x94e <__stack+0x4f>
     91a:	34 f4       	brge	.+12     	; 0x928 <__stack+0x29>
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	91 05       	cpc	r25, r1
     920:	51 f0       	breq	.+20     	; 0x936 <__stack+0x37>
     922:	02 97       	sbiw	r24, 0x02	; 2
     924:	71 f0       	breq	.+28     	; 0x942 <__stack+0x43>
     926:	2a c0       	rjmp	.+84     	; 0x97c <__stack+0x7d>
     928:	85 30       	cpi	r24, 0x05	; 5
     92a:	91 05       	cpc	r25, r1
     92c:	e1 f0       	breq	.+56     	; 0x966 <__stack+0x67>
     92e:	ac f0       	brlt	.+42     	; 0x95a <__stack+0x5b>
     930:	06 97       	sbiw	r24, 0x06	; 6
     932:	f9 f0       	breq	.+62     	; 0x972 <__stack+0x73>
     934:	23 c0       	rjmp	.+70     	; 0x97c <__stack+0x7d>
		{
			case 0: break;
			case 1:
			{
				ADMUX |= (1<<MUX0);
     936:	ac e7       	ldi	r26, 0x7C	; 124
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	8c 91       	ld	r24, X
     93c:	81 60       	ori	r24, 0x01	; 1
     93e:	8c 93       	st	X, r24
			}break;
     940:	1d c0       	rjmp	.+58     	; 0x97c <__stack+0x7d>
			case 2:
			{
				ADMUX |= (1<<MUX1);
     942:	ac e7       	ldi	r26, 0x7C	; 124
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	8c 91       	ld	r24, X
     948:	82 60       	ori	r24, 0x02	; 2
     94a:	8c 93       	st	X, r24
			}break;
     94c:	17 c0       	rjmp	.+46     	; 0x97c <__stack+0x7d>
			case 3:
			{
				ADMUX |= ( (1<<MUX1) | (1<<MUX0));
     94e:	ac e7       	ldi	r26, 0x7C	; 124
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	8c 91       	ld	r24, X
     954:	83 60       	ori	r24, 0x03	; 3
     956:	8c 93       	st	X, r24
			}break;
     958:	11 c0       	rjmp	.+34     	; 0x97c <__stack+0x7d>
			case 4:
			{
				ADMUX |= (1<<MUX2);
     95a:	ac e7       	ldi	r26, 0x7C	; 124
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	8c 91       	ld	r24, X
     960:	84 60       	ori	r24, 0x04	; 4
     962:	8c 93       	st	X, r24
			}break;
     964:	0b c0       	rjmp	.+22     	; 0x97c <__stack+0x7d>
			case 5:
			{
				ADMUX |= ((1<<MUX2)|(1<<MUX0));
     966:	ac e7       	ldi	r26, 0x7C	; 124
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	8c 91       	ld	r24, X
     96c:	85 60       	ori	r24, 0x05	; 5
     96e:	8c 93       	st	X, r24
			}break;
     970:	05 c0       	rjmp	.+10     	; 0x97c <__stack+0x7d>
			case 6:
			{
				ADMUX |= ((1<<MUX2) |(1<<MUX1));
     972:	ac e7       	ldi	r26, 0x7C	; 124
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	8c 91       	ld	r24, X
     978:	86 60       	ori	r24, 0x06	; 6
     97a:	8c 93       	st	X, r24
			}break;
		}

		ADCSRA |= 1<<ADEN;
     97c:	aa e7       	ldi	r26, 0x7A	; 122
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	8c 91       	ld	r24, X
     982:	80 68       	ori	r24, 0x80	; 128
     984:	8c 93       	st	X, r24
		ADCSRA &= ~(1<<ADATE);
     986:	8c 91       	ld	r24, X
     988:	8f 7d       	andi	r24, 0xDF	; 223
     98a:	8c 93       	st	X, r24
		ADCSRA |= (1<<ADPS2 | 1<<ADPS1 | 1<<ADPS2);
     98c:	8c 91       	ld	r24, X
     98e:	86 60       	ori	r24, 0x06	; 6
     990:	8c 93       	st	X, r24
		ADCSRA |= 1<<ADIE;
     992:	8c 91       	ld	r24, X
     994:	88 60       	ori	r24, 0x08	; 8
     996:	8c 93       	st	X, r24
		sei();
     998:	78 94       	sei
		ADCSRA |= 1<<ADSC;
     99a:	8c 91       	ld	r24, X
     99c:	80 64       	ori	r24, 0x40	; 64
     99e:	8c 93       	st	X, r24
		for(i=0;i<6;i++)
		{
			seteados[i]=0;
     9a0:	a9 e5       	ldi	r26, 0x59	; 89
     9a2:	b2 e0       	ldi	r27, 0x02	; 2
     9a4:	1c 92       	st	X, r1
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	1c 92       	st	X, r1
     9aa:	11 97       	sbiw	r26, 0x01	; 1
     9ac:	12 96       	adiw	r26, 0x02	; 2
     9ae:	1c 92       	st	X, r1
     9b0:	12 97       	sbiw	r26, 0x02	; 2
     9b2:	13 96       	adiw	r26, 0x03	; 3
     9b4:	1c 92       	st	X, r1
     9b6:	13 97       	sbiw	r26, 0x03	; 3
     9b8:	14 96       	adiw	r26, 0x04	; 4
     9ba:	1c 92       	st	X, r1
     9bc:	14 97       	sbiw	r26, 0x04	; 4
     9be:	15 96       	adiw	r26, 0x05	; 5
     9c0:	1c 92       	st	X, r1
     9c2:	86 e0       	ldi	r24, 0x06	; 6
     9c4:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <i>
		}

		iniciado=1;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <iniciado>
		canalConvirtiendo=cfg->channel;
     9ce:	80 81       	ld	r24, Z
     9d0:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <canalConvirtiendo>
	}
	if (seteados[cfg->channel] != 0)
     9d4:	80 81       	ld	r24, Z
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
     9d8:	dc 01       	movw	r26, r24
     9da:	a7 5a       	subi	r26, 0xA7	; 167
     9dc:	bd 4f       	sbci	r27, 0xFD	; 253
     9de:	2c 91       	ld	r18, X
     9e0:	21 11       	cpse	r18, r1
     9e2:	1f c0       	rjmp	.+62     	; 0xa22 <__stack+0x123>
	{
		return 0;
	}
	seteados[cfg->channel] = 1;
     9e4:	dc 01       	movw	r26, r24
     9e6:	a7 5a       	subi	r26, 0xA7	; 167
     9e8:	bd 4f       	sbci	r27, 0xFD	; 253
     9ea:	21 e0       	ldi	r18, 0x01	; 1
     9ec:	2c 93       	st	X, r18
	canales[cfg->channel] = * cfg;
     9ee:	80 81       	ld	r24, Z
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	dc 01       	movw	r26, r24
     9f4:	aa 0f       	add	r26, r26
     9f6:	bb 1f       	adc	r27, r27
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	a8 0f       	add	r26, r24
     a06:	b9 1f       	adc	r27, r25
     a08:	a1 5a       	subi	r26, 0xA1	; 161
     a0a:	bd 4f       	sbci	r27, 0xFD	; 253
     a0c:	8a e0       	ldi	r24, 0x0A	; 10
     a0e:	01 90       	ld	r0, Z+
     a10:	0d 92       	st	X+, r0
     a12:	8a 95       	dec	r24
     a14:	e1 f7       	brne	.-8      	; 0xa0e <__stack+0x10f>
	return 1;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	08 95       	ret

int adc_init(adc_cfg *cfg)
{
	if(cfg->channel>5)
	{
		return 0;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	08 95       	ret
		iniciado=1;
		canalConvirtiendo=cfg->channel;
	}
	if (seteados[cfg->channel] != 0)
	{
		return 0;
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
	}
	seteados[cfg->channel] = 1;
	canales[cfg->channel] = * cfg;
	return 1;
}
     a26:	08 95       	ret

00000a28 <__vector_21>:
{
	canales[fnLlamar].callback(valor_leido);
}
//uint8_t corte=0;
ISR (ADC_vect)
{
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	cf 93       	push	r28
     a48:	ef 93       	push	r30
     a4a:	ff 93       	push	r31
	if(contador>=10)
     a4c:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <contador>
     a50:	8a 30       	cpi	r24, 0x0A	; 10
     a52:	08 f4       	brcc	.+2      	; 0xa56 <__vector_21+0x2e>
     a54:	7a c0       	rjmp	.+244    	; 0xb4a <__vector_21+0x122>
	{
		valor_leido = ADC;
     a56:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     a5a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     a5e:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <valor_leido+0x1>
     a62:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <valor_leido>
		fnLlamar = canalConvirtiendo;
     a66:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <canalConvirtiendo>
     a6a:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <fnLlamar>
		fnqueue_add(llamarCallback);
     a6e:	8a e5       	ldi	r24, 0x5A	; 90
     a70:	94 e0       	ldi	r25, 0x04	; 4
     a72:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z11fnqueue_addPFvvE>
		for(i=1;i<=6;i++)
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <i>
		{
			if(seteados[(canalConvirtiendo+i)%6]==1)
     a7c:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <canalConvirtiendo>
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	c9 01       	movw	r24, r18
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	66 e0       	ldi	r22, 0x06	; 6
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__divmodhi4>
     a8e:	58 2f       	mov	r21, r24
     a90:	fc 01       	movw	r30, r24
     a92:	e7 5a       	subi	r30, 0xA7	; 167
     a94:	fd 4f       	sbci	r31, 0xFD	; 253
     a96:	80 81       	ld	r24, Z
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	09 f0       	breq	.+2      	; 0xa9e <__vector_21+0x76>
     a9c:	5f c0       	rjmp	.+190    	; 0xb5c <__vector_21+0x134>
     a9e:	0e c0       	rjmp	.+28     	; 0xabc <__vector_21+0x94>
     aa0:	48 2f       	mov	r20, r24
     aa2:	c9 01       	movw	r24, r18
     aa4:	bf 01       	movw	r22, r30
     aa6:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__divmodhi4>
     aaa:	58 2f       	mov	r21, r24
     aac:	dc 01       	movw	r26, r24
     aae:	a7 5a       	subi	r26, 0xA7	; 167
     ab0:	bd 4f       	sbci	r27, 0xFD	; 253
     ab2:	8c 91       	ld	r24, X
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	29 f4       	brne	.+10     	; 0xac2 <__vector_21+0x9a>
     ab8:	c0 93 56 02 	sts	0x0256, r28	; 0x800256 <i>
			{
				canalConvirtiendo=(canalConvirtiendo+i)%6;
     abc:	50 93 9d 02 	sts	0x029D, r21	; 0x80029d <canalConvirtiendo>
				break;
     ac0:	09 c0       	rjmp	.+18     	; 0xad4 <__vector_21+0xac>
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	84 0f       	add	r24, r20
     ac6:	2f 5f       	subi	r18, 0xFF	; 255
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
	if(contador>=10)
	{
		valor_leido = ADC;
		fnLlamar = canalConvirtiendo;
		fnqueue_add(llamarCallback);
		for(i=1;i<=6;i++)
     aca:	c4 2f       	mov	r28, r20
     acc:	88 30       	cpi	r24, 0x08	; 8
     ace:	41 f7       	brne	.-48     	; 0xaa0 <__vector_21+0x78>
     ad0:	40 93 56 02 	sts	0x0256, r20	; 0x800256 <i>
			{
				canalConvirtiendo=(canalConvirtiendo+i)%6;
				break;
			}
		}
        ADMUX &= ~(1<<MUX3 | 1<<MUX2 | 1<<MUX1 | 1<<MUX0);
     ad4:	ec e7       	ldi	r30, 0x7C	; 124
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	80 7f       	andi	r24, 0xF0	; 240
     adc:	80 83       	st	Z, r24
        switch(canalConvirtiendo)
     ade:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <canalConvirtiendo>
     ae2:	83 30       	cpi	r24, 0x03	; 3
     ae4:	c1 f0       	breq	.+48     	; 0xb16 <__vector_21+0xee>
     ae6:	28 f4       	brcc	.+10     	; 0xaf2 <__vector_21+0xca>
     ae8:	81 30       	cpi	r24, 0x01	; 1
     aea:	49 f0       	breq	.+18     	; 0xafe <__vector_21+0xd6>
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	69 f0       	breq	.+26     	; 0xb0a <__vector_21+0xe2>
     af0:	29 c0       	rjmp	.+82     	; 0xb44 <__vector_21+0x11c>
     af2:	85 30       	cpi	r24, 0x05	; 5
     af4:	e1 f0       	breq	.+56     	; 0xb2e <__vector_21+0x106>
     af6:	a8 f0       	brcs	.+42     	; 0xb22 <__vector_21+0xfa>
     af8:	86 30       	cpi	r24, 0x06	; 6
     afa:	f9 f0       	breq	.+62     	; 0xb3a <__vector_21+0x112>
     afc:	23 c0       	rjmp	.+70     	; 0xb44 <__vector_21+0x11c>
        {
            case 0: break;
            case 1:
            {
                ADMUX |= (1<<MUX0);
     afe:	ec e7       	ldi	r30, 0x7C	; 124
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	80 81       	ld	r24, Z
     b04:	81 60       	ori	r24, 0x01	; 1
     b06:	80 83       	st	Z, r24
            }break;
     b08:	1d c0       	rjmp	.+58     	; 0xb44 <__vector_21+0x11c>
            case 2:
            {
                ADMUX |= (1<<MUX1);
     b0a:	ec e7       	ldi	r30, 0x7C	; 124
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	82 60       	ori	r24, 0x02	; 2
     b12:	80 83       	st	Z, r24
            }break;
     b14:	17 c0       	rjmp	.+46     	; 0xb44 <__vector_21+0x11c>
            case 3:
            {
                ADMUX |= ( (1<<MUX1) | (1<<MUX0));
     b16:	ec e7       	ldi	r30, 0x7C	; 124
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	83 60       	ori	r24, 0x03	; 3
     b1e:	80 83       	st	Z, r24
            }break;
     b20:	11 c0       	rjmp	.+34     	; 0xb44 <__vector_21+0x11c>
            case 4:
            {
                ADMUX |= (1<<MUX2);
     b22:	ec e7       	ldi	r30, 0x7C	; 124
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	84 60       	ori	r24, 0x04	; 4
     b2a:	80 83       	st	Z, r24
            }break;
     b2c:	0b c0       	rjmp	.+22     	; 0xb44 <__vector_21+0x11c>
            case 5:
            {
                ADMUX |= ((1<<MUX2)|(1<<MUX0));
     b2e:	ec e7       	ldi	r30, 0x7C	; 124
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	85 60       	ori	r24, 0x05	; 5
     b36:	80 83       	st	Z, r24
            }break;
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <__vector_21+0x11c>
            case 6:
            {
                ADMUX |= ((1<<MUX2) |(1<<MUX1));
     b3a:	ec e7       	ldi	r30, 0x7C	; 124
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	86 60       	ori	r24, 0x06	; 6
     b42:	80 83       	st	Z, r24
            }break;
        }
		contador = 0;
     b44:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <contador>
     b48:	03 c0       	rjmp	.+6      	; 0xb50 <__vector_21+0x128>
	} else
	{
		contador++;
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <contador>

	}
	ADCSRA |= 1<<ADSC;
     b50:	ea e7       	ldi	r30, 0x7A	; 122
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	80 64       	ori	r24, 0x40	; 64
     b58:	80 83       	st	Z, r24

}
     b5a:	07 c0       	rjmp	.+14     	; 0xb6a <__vector_21+0x142>
     b5c:	2e 5f       	subi	r18, 0xFE	; 254
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
	if(contador>=10)
	{
		valor_leido = ADC;
		fnLlamar = canalConvirtiendo;
		fnqueue_add(llamarCallback);
		for(i=1;i<=6;i++)
     b60:	43 e0       	ldi	r20, 0x03	; 3
     b62:	c2 e0       	ldi	r28, 0x02	; 2
		{
			if(seteados[(canalConvirtiendo+i)%6]==1)
     b64:	e6 e0       	ldi	r30, 0x06	; 6
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	9c cf       	rjmp	.-200    	; 0xaa2 <__vector_21+0x7a>
		contador++;

	}
	ADCSRA |= 1<<ADSC;

}
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	cf 91       	pop	r28
     b70:	bf 91       	pop	r27
     b72:	af 91       	pop	r26
     b74:	9f 91       	pop	r25
     b76:	8f 91       	pop	r24
     b78:	7f 91       	pop	r23
     b7a:	6f 91       	pop	r22
     b7c:	5f 91       	pop	r21
     b7e:	4f 91       	pop	r20
     b80:	3f 91       	pop	r19
     b82:	2f 91       	pop	r18
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <_Z12fnqueue_initv>:
	fnqueue_tail,
	fnqueue_count;

bool fnqueue_init(void)
{
	fnqueue_head = 0;
     b8e:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <_ZL12fnqueue_head>
	fnqueue_tail = 0;
     b92:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_ZL12fnqueue_tail>
	fnqueue_count = 0;
     b96:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <_ZL13fnqueue_count>
    
    return true;
}
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	08 95       	ret

00000b9e <_Z11fnqueue_runv>:

bool fnqueue_run(void)
{
    critical_begin();
     b9e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_Z14critical_beginv>
    if (fnqueue_count > 0)
     ba2:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <_ZL13fnqueue_count>
     ba6:	88 23       	and	r24, r24
     ba8:	11 f1       	breq	.+68     	; 0xbee <_Z11fnqueue_runv+0x50>
    {
        critical_end();
     baa:	0e 94 06 04 	call	0x80c	; 0x80c <_Z12critical_endv>

        fnqueue_functions[fnqueue_head]();
     bae:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <_ZL12fnqueue_head>
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	ee 55       	subi	r30, 0x5E	; 94
     bba:	fd 4f       	sbci	r31, 0xFD	; 253
     bbc:	01 90       	ld	r0, Z+
     bbe:	f0 81       	ld	r31, Z
     bc0:	e0 2d       	mov	r30, r0
     bc2:	09 95       	icall
        critical_begin();
     bc4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_Z14critical_beginv>
        fnqueue_head = (fnqueue_head + 1) % FNQUEUE_LENGTH;
     bc8:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_ZL12fnqueue_head>
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	8f 70       	andi	r24, 0x0F	; 15
     bd2:	90 78       	andi	r25, 0x80	; 128
     bd4:	99 23       	and	r25, r25
     bd6:	24 f4       	brge	.+8      	; 0xbe0 <_Z11fnqueue_runv+0x42>
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	80 6f       	ori	r24, 0xF0	; 240
     bdc:	9f 6f       	ori	r25, 0xFF	; 255
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <_ZL12fnqueue_head>
        fnqueue_count--;
     be4:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <_ZL13fnqueue_count>
     be8:	81 50       	subi	r24, 0x01	; 1
     bea:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <_ZL13fnqueue_count>
    }
    critical_end();
     bee:	0e 94 06 04 	call	0x80c	; 0x80c <_Z12critical_endv>

	return 1;
}
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	08 95       	ret

00000bf6 <_Z11fnqueue_addPFvvE>:

bool fnqueue_add(void (*function)(void))
{
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	ec 01       	movw	r28, r24
	bool result = false;
	
    critical_begin();
     bfc:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_Z14critical_beginv>
    if (fnqueue_count < FNQUEUE_LENGTH)
     c00:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <_ZL13fnqueue_count>
     c04:	20 31       	cpi	r18, 0x10	; 16
     c06:	d0 f4       	brcc	.+52     	; 0xc3c <_Z11fnqueue_addPFvvE+0x46>
    {
        fnqueue_functions[fnqueue_tail] = function;
     c08:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <_ZL12fnqueue_tail>
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	fc 01       	movw	r30, r24
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	ee 55       	subi	r30, 0x5E	; 94
     c16:	fd 4f       	sbci	r31, 0xFD	; 253
     c18:	d1 83       	std	Z+1, r29	; 0x01
     c1a:	c0 83       	st	Z, r28
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	8f 70       	andi	r24, 0x0F	; 15
     c20:	90 78       	andi	r25, 0x80	; 128
     c22:	99 23       	and	r25, r25
     c24:	24 f4       	brge	.+8      	; 0xc2e <_Z11fnqueue_addPFvvE+0x38>
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	80 6f       	ori	r24, 0xF0	; 240
     c2a:	9f 6f       	ori	r25, 0xFF	; 255
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <_ZL12fnqueue_tail>
        fnqueue_count++;
     c32:	2f 5f       	subi	r18, 0xFF	; 255
     c34:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <_ZL13fnqueue_count>
        result = true;
     c38:	c1 e0       	ldi	r28, 0x01	; 1
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <_Z11fnqueue_addPFvvE+0x48>
	return 1;
}

bool fnqueue_add(void (*function)(void))
{
	bool result = false;
     c3c:	c0 e0       	ldi	r28, 0x00	; 0
        fnqueue_functions[fnqueue_tail] = function;
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
        fnqueue_count++;
        result = true;
    }
    critical_end();
     c3e:	0e 94 06 04 	call	0x80c	; 0x80c <_Z12critical_endv>
    return result;
     c42:	8c 2f       	mov	r24, r28
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <_ZN5Print17availableForWriteEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	08 95       	ret

00000c50 <_ZN5Print5flushEv>:
     c50:	08 95       	ret

00000c52 <_ZN13LiquidCrystal11pulseEnableEv>:
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ec 01       	movw	r28, r24
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	8e 81       	ldd	r24, Y+6	; 0x06
     c5c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	8e 81       	ldd	r24, Y+6	; 0x06
     c6c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	8e 81       	ldd	r24, Y+6	; 0x06
     c7c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     c80:	84 e6       	ldi	r24, 0x64	; 100
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <_ZN13LiquidCrystal10write4bitsEh>:
     c8e:	cf 92       	push	r12
     c90:	df 92       	push	r13
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	6c 01       	movw	r12, r24
     ca0:	8c 01       	movw	r16, r24
     ca2:	09 5f       	subi	r16, 0xF9	; 249
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	c0 e0       	ldi	r28, 0x00	; 0
     ca8:	d0 e0       	ldi	r29, 0x00	; 0
     caa:	e6 2e       	mov	r14, r22
     cac:	f1 2c       	mov	r15, r1
     cae:	b7 01       	movw	r22, r14
     cb0:	0c 2e       	mov	r0, r28
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <_ZN13LiquidCrystal10write4bitsEh+0x2a>
     cb4:	75 95       	asr	r23
     cb6:	67 95       	ror	r22
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <_ZN13LiquidCrystal10write4bitsEh+0x26>
     cbc:	61 70       	andi	r22, 0x01	; 1
     cbe:	f8 01       	movw	r30, r16
     cc0:	81 91       	ld	r24, Z+
     cc2:	8f 01       	movw	r16, r30
     cc4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     cc8:	21 96       	adiw	r28, 0x01	; 1
     cca:	c4 30       	cpi	r28, 0x04	; 4
     ccc:	d1 05       	cpc	r29, r1
     cce:	79 f7       	brne	.-34     	; 0xcae <_ZN13LiquidCrystal10write4bitsEh+0x20>
     cd0:	c6 01       	movw	r24, r12
     cd2:	0e 94 29 06 	call	0xc52	; 0xc52 <_ZN13LiquidCrystal11pulseEnableEv>
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	08 95       	ret

00000ce8 <_ZN13LiquidCrystal10write8bitsEh>:
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	6c 01       	movw	r12, r24
     cfa:	8c 01       	movw	r16, r24
     cfc:	09 5f       	subi	r16, 0xF9	; 249
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	c0 e0       	ldi	r28, 0x00	; 0
     d02:	d0 e0       	ldi	r29, 0x00	; 0
     d04:	e6 2e       	mov	r14, r22
     d06:	f1 2c       	mov	r15, r1
     d08:	b7 01       	movw	r22, r14
     d0a:	0c 2e       	mov	r0, r28
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <_ZN13LiquidCrystal10write8bitsEh+0x2a>
     d0e:	75 95       	asr	r23
     d10:	67 95       	ror	r22
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <_ZN13LiquidCrystal10write8bitsEh+0x26>
     d16:	61 70       	andi	r22, 0x01	; 1
     d18:	f8 01       	movw	r30, r16
     d1a:	81 91       	ld	r24, Z+
     d1c:	8f 01       	movw	r16, r30
     d1e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     d22:	21 96       	adiw	r28, 0x01	; 1
     d24:	c8 30       	cpi	r28, 0x08	; 8
     d26:	d1 05       	cpc	r29, r1
     d28:	79 f7       	brne	.-34     	; 0xd08 <_ZN13LiquidCrystal10write8bitsEh+0x20>
     d2a:	c6 01       	movw	r24, r12
     d2c:	0e 94 29 06 	call	0xc52	; 0xc52 <_ZN13LiquidCrystal11pulseEnableEv>
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	cf 90       	pop	r12
     d40:	08 95       	ret

00000d42 <_ZN13LiquidCrystal4sendEhh>:
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	ec 01       	movw	r28, r24
     d4a:	16 2f       	mov	r17, r22
     d4c:	64 2f       	mov	r22, r20
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	8f 3f       	cpi	r24, 0xFF	; 255
     d58:	19 f0       	breq	.+6      	; 0xd60 <_ZN13LiquidCrystal4sendEhh+0x1e>
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     d60:	8f 85       	ldd	r24, Y+15	; 0x0f
     d62:	84 ff       	sbrs	r24, 4
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <_ZN13LiquidCrystal4sendEhh+0x2e>
     d66:	61 2f       	mov	r22, r17
     d68:	ce 01       	movw	r24, r28
     d6a:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN13LiquidCrystal10write8bitsEh>
     d6e:	11 c0       	rjmp	.+34     	; 0xd92 <_ZN13LiquidCrystal4sendEhh+0x50>
     d70:	61 2f       	mov	r22, r17
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	75 95       	asr	r23
     d76:	67 95       	ror	r22
     d78:	75 95       	asr	r23
     d7a:	67 95       	ror	r22
     d7c:	75 95       	asr	r23
     d7e:	67 95       	ror	r22
     d80:	75 95       	asr	r23
     d82:	67 95       	ror	r22
     d84:	ce 01       	movw	r24, r28
     d86:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN13LiquidCrystal10write4bitsEh>
     d8a:	61 2f       	mov	r22, r17
     d8c:	ce 01       	movw	r24, r28
     d8e:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN13LiquidCrystal10write4bitsEh>
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	08 95       	ret

00000d9a <_ZN13LiquidCrystal5clearEv>:
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN13LiquidCrystal4sendEhh>
     da2:	80 ed       	ldi	r24, 0xD0	; 208
     da4:	97 e0       	ldi	r25, 0x07	; 7
     da6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     daa:	08 95       	ret

00000dac <_ZN13LiquidCrystal9setCursorEhh>:
     dac:	fc 01       	movw	r30, r24
     dae:	44 30       	cpi	r20, 0x04	; 4
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <_ZN13LiquidCrystal9setCursorEhh+0x8>
     db2:	43 e0       	ldi	r20, 0x03	; 3
     db4:	83 89       	ldd	r24, Z+19	; 0x13
     db6:	48 17       	cp	r20, r24
     db8:	10 f0       	brcs	.+4      	; 0xdbe <_ZN13LiquidCrystal9setCursorEhh+0x12>
     dba:	4f ef       	ldi	r20, 0xFF	; 255
     dbc:	48 0f       	add	r20, r24
     dbe:	df 01       	movw	r26, r30
     dc0:	a4 0f       	add	r26, r20
     dc2:	b1 1d       	adc	r27, r1
     dc4:	54 96       	adiw	r26, 0x14	; 20
     dc6:	9c 91       	ld	r25, X
     dc8:	69 0f       	add	r22, r25
     dca:	60 68       	ori	r22, 0x80	; 128
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	cf 01       	movw	r24, r30
     dd0:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN13LiquidCrystal4sendEhh>
     dd4:	08 95       	ret

00000dd6 <_ZN13LiquidCrystal7displayEv>:
     dd6:	fc 01       	movw	r30, r24
     dd8:	60 89       	ldd	r22, Z+16	; 0x10
     dda:	26 2f       	mov	r18, r22
     ddc:	24 60       	ori	r18, 0x04	; 4
     dde:	20 8b       	std	Z+16, r18	; 0x10
     de0:	6c 60       	ori	r22, 0x0C	; 12
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN13LiquidCrystal4sendEhh>
     de8:	08 95       	ret

00000dea <_ZN13LiquidCrystal5beginEhhh>:
     dea:	af 92       	push	r10
     dec:	bf 92       	push	r11
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	ec 01       	movw	r28, r24
     e00:	42 30       	cpi	r20, 0x02	; 2
     e02:	18 f0       	brcs	.+6      	; 0xe0a <_ZN13LiquidCrystal5beginEhhh+0x20>
     e04:	8f 85       	ldd	r24, Y+15	; 0x0f
     e06:	88 60       	ori	r24, 0x08	; 8
     e08:	8f 87       	std	Y+15, r24	; 0x0f
     e0a:	4b 8b       	std	Y+19, r20	; 0x13
     e0c:	1c 8a       	std	Y+20, r1	; 0x14
     e0e:	80 e4       	ldi	r24, 0x40	; 64
     e10:	8d 8b       	std	Y+21, r24	; 0x15
     e12:	6e 8b       	std	Y+22, r22	; 0x16
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	60 5c       	subi	r22, 0xC0	; 192
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	6f 8b       	std	Y+23, r22	; 0x17
     e1c:	22 23       	and	r18, r18
     e1e:	29 f0       	breq	.+10     	; 0xe2a <_ZN13LiquidCrystal5beginEhhh+0x40>
     e20:	41 30       	cpi	r20, 0x01	; 1
     e22:	19 f4       	brne	.+6      	; 0xe2a <_ZN13LiquidCrystal5beginEhhh+0x40>
     e24:	8f 85       	ldd	r24, Y+15	; 0x0f
     e26:	84 60       	ori	r24, 0x04	; 4
     e28:	8f 87       	std	Y+15, r24	; 0x0f
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	0e 94 41 02 	call	0x482	; 0x482 <pinMode>
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	8f 3f       	cpi	r24, 0xFF	; 255
     e36:	19 f0       	breq	.+6      	; 0xe3e <_ZN13LiquidCrystal5beginEhhh+0x54>
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	0e 94 41 02 	call	0x482	; 0x482 <pinMode>
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	8e 81       	ldd	r24, Y+6	; 0x06
     e42:	0e 94 41 02 	call	0x482	; 0x482 <pinMode>
     e46:	7e 01       	movw	r14, r28
     e48:	87 e0       	ldi	r24, 0x07	; 7
     e4a:	e8 0e       	add	r14, r24
     e4c:	f1 1c       	adc	r15, r1
     e4e:	00 e0       	ldi	r16, 0x00	; 0
     e50:	10 e0       	ldi	r17, 0x00	; 0
     e52:	68 94       	set
     e54:	aa 24       	eor	r10, r10
     e56:	a3 f8       	bld	r10, 3
     e58:	b1 2c       	mov	r11, r1
     e5a:	68 94       	set
     e5c:	cc 24       	eor	r12, r12
     e5e:	c2 f8       	bld	r12, 2
     e60:	d1 2c       	mov	r13, r1
     e62:	8f 85       	ldd	r24, Y+15	; 0x0f
     e64:	84 fd       	sbrc	r24, 4
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <_ZN13LiquidCrystal5beginEhhh+0x84>
     e68:	8c 2d       	mov	r24, r12
     e6a:	9d 2d       	mov	r25, r13
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <_ZN13LiquidCrystal5beginEhhh+0x88>
     e6e:	8a 2d       	mov	r24, r10
     e70:	9b 2d       	mov	r25, r11
     e72:	08 17       	cp	r16, r24
     e74:	19 07       	cpc	r17, r25
     e76:	4c f4       	brge	.+18     	; 0xe8a <_ZN13LiquidCrystal5beginEhhh+0xa0>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	f7 01       	movw	r30, r14
     e7c:	81 91       	ld	r24, Z+
     e7e:	7f 01       	movw	r14, r30
     e80:	0e 94 41 02 	call	0x482	; 0x482 <pinMode>
     e84:	0f 5f       	subi	r16, 0xFF	; 255
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	ec cf       	rjmp	.-40     	; 0xe62 <_ZN13LiquidCrystal5beginEhhh+0x78>
     e8a:	80 e5       	ldi	r24, 0x50	; 80
     e8c:	93 ec       	ldi	r25, 0xC3	; 195
     e8e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	8e 81       	ldd	r24, Y+6	; 0x06
     e9e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	8f 3f       	cpi	r24, 0xFF	; 255
     ea6:	19 f0       	breq	.+6      	; 0xeae <_ZN13LiquidCrystal5beginEhhh+0xc4>
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
     eae:	6f 85       	ldd	r22, Y+15	; 0x0f
     eb0:	64 fd       	sbrc	r22, 4
     eb2:	1d c0       	rjmp	.+58     	; 0xeee <_ZN13LiquidCrystal5beginEhhh+0x104>
     eb4:	63 e0       	ldi	r22, 0x03	; 3
     eb6:	ce 01       	movw	r24, r28
     eb8:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN13LiquidCrystal10write4bitsEh>
     ebc:	84 e9       	ldi	r24, 0x94	; 148
     ebe:	91 e1       	ldi	r25, 0x11	; 17
     ec0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     ec4:	63 e0       	ldi	r22, 0x03	; 3
     ec6:	ce 01       	movw	r24, r28
     ec8:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN13LiquidCrystal10write4bitsEh>
     ecc:	84 e9       	ldi	r24, 0x94	; 148
     ece:	91 e1       	ldi	r25, 0x11	; 17
     ed0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     ed4:	63 e0       	ldi	r22, 0x03	; 3
     ed6:	ce 01       	movw	r24, r28
     ed8:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN13LiquidCrystal10write4bitsEh>
     edc:	86 e9       	ldi	r24, 0x96	; 150
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     ee4:	62 e0       	ldi	r22, 0x02	; 2
     ee6:	ce 01       	movw	r24, r28
     ee8:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN13LiquidCrystal10write4bitsEh>
     eec:	19 c0       	rjmp	.+50     	; 0xf20 <_ZN13LiquidCrystal5beginEhhh+0x136>
     eee:	60 62       	ori	r22, 0x20	; 32
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	ce 01       	movw	r24, r28
     ef4:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN13LiquidCrystal4sendEhh>
     ef8:	84 e9       	ldi	r24, 0x94	; 148
     efa:	91 e1       	ldi	r25, 0x11	; 17
     efc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     f00:	6f 85       	ldd	r22, Y+15	; 0x0f
     f02:	60 62       	ori	r22, 0x20	; 32
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	ce 01       	movw	r24, r28
     f08:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN13LiquidCrystal4sendEhh>
     f0c:	86 e9       	ldi	r24, 0x96	; 150
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 7d 02 	call	0x4fa	; 0x4fa <delayMicroseconds>
     f14:	6f 85       	ldd	r22, Y+15	; 0x0f
     f16:	60 62       	ori	r22, 0x20	; 32
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	ce 01       	movw	r24, r28
     f1c:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN13LiquidCrystal4sendEhh>
     f20:	6f 85       	ldd	r22, Y+15	; 0x0f
     f22:	60 62       	ori	r22, 0x20	; 32
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	ce 01       	movw	r24, r28
     f28:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN13LiquidCrystal4sendEhh>
     f2c:	84 e0       	ldi	r24, 0x04	; 4
     f2e:	88 8b       	std	Y+16, r24	; 0x10
     f30:	ce 01       	movw	r24, r28
     f32:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_ZN13LiquidCrystal7displayEv>
     f36:	ce 01       	movw	r24, r28
     f38:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN13LiquidCrystal5clearEv>
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	89 8b       	std	Y+17, r24	; 0x11
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	66 e0       	ldi	r22, 0x06	; 6
     f44:	ce 01       	movw	r24, r28
     f46:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN13LiquidCrystal4sendEhh>
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	cf 90       	pop	r12
     f5a:	bf 90       	pop	r11
     f5c:	af 90       	pop	r10
     f5e:	08 95       	ret

00000f60 <_ZN13LiquidCrystalC1Ehhhhhh>:
     f60:	cf 92       	push	r12
     f62:	ef 92       	push	r14
     f64:	0f 93       	push	r16
     f66:	fc 01       	movw	r30, r24
     f68:	13 82       	std	Z+3, r1	; 0x03
     f6a:	12 82       	std	Z+2, r1	; 0x02
     f6c:	87 e1       	ldi	r24, 0x17	; 23
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24
     f74:	64 83       	std	Z+4, r22	; 0x04
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	85 83       	std	Z+5, r24	; 0x05
     f7a:	46 83       	std	Z+6, r20	; 0x06
     f7c:	27 83       	std	Z+7, r18	; 0x07
     f7e:	00 87       	std	Z+8, r16	; 0x08
     f80:	e1 86       	std	Z+9, r14	; 0x09
     f82:	c2 86       	std	Z+10, r12	; 0x0a
     f84:	13 86       	std	Z+11, r1	; 0x0b
     f86:	14 86       	std	Z+12, r1	; 0x0c
     f88:	15 86       	std	Z+13, r1	; 0x0d
     f8a:	16 86       	std	Z+14, r1	; 0x0e
     f8c:	17 86       	std	Z+15, r1	; 0x0f
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	60 e1       	ldi	r22, 0x10	; 16
     f94:	cf 01       	movw	r24, r30
     f96:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN13LiquidCrystal5beginEhhh>
     f9a:	0f 91       	pop	r16
     f9c:	ef 90       	pop	r14
     f9e:	cf 90       	pop	r12
     fa0:	08 95       	ret

00000fa2 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	08 95       	ret

00000fae <_Z14tomar_medicioni>:
/************************************************************************/


void tomar_medicion(int valor)
{
	temperaturaMedida=valor;
     fae:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <_ZL17temperaturaMedida+0x1>
     fb2:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <_ZL17temperaturaMedida>
     fb6:	08 95       	ret

00000fb8 <_Z11guardarTempa>:
/************************************************************************/
/*                          AUXILIARES                                  */
/************************************************************************/
void guardarTemp(int8_t temp)
{
	temps[indiceArreglo]=temp;
     fb8:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <_ZL13indiceArreglo>
     fbc:	02 2e       	mov	r0, r18
     fbe:	00 0c       	add	r0, r0
     fc0:	33 0b       	sbc	r19, r19
     fc2:	f9 01       	movw	r30, r18
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	e0 52       	subi	r30, 0x20	; 32
     fca:	fd 4f       	sbci	r31, 0xFD	; 253
     fcc:	08 2e       	mov	r0, r24
     fce:	00 0c       	add	r0, r0
     fd0:	99 0b       	sbc	r25, r25
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
	indiceArreglo=(indiceArreglo+1)%100;
     fd6:	c9 01       	movw	r24, r18
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	64 e6       	ldi	r22, 0x64	; 100
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__divmodhi4>
     fe2:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <_ZL13indiceArreglo>
	if (cantTemps<=100)
     fe6:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZL9cantTemps>
     fea:	85 36       	cpi	r24, 0x65	; 101
     fec:	1c f4       	brge	.+6      	; 0xff4 <_Z11guardarTempa+0x3c>
		cantTemps++;
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <_ZL9cantTemps>
     ff4:	08 95       	ret

00000ff6 <_Z17updateCurrentTempv>:
}

void updateCurrentTemp()
{
	tempActual=temperaturaMedida;
     ff6:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <_ZL17temperaturaMedida>
     ffa:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <_ZL10tempActual>
     ffe:	08 95       	ret

00001000 <_Z17updateAverageTempv>:
}
void updateAverageTemp()
{
	int16_t sumaTemps=0;
	tempPromedio=0;
    1000:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <_ZL12tempPromedio>
	if(cantTemps>0)
    1004:	40 91 dc 02 	lds	r20, 0x02DC	; 0x8002dc <_ZL9cantTemps>
    1008:	14 16       	cp	r1, r20
    100a:	ec f4       	brge	.+58     	; 0x1046 <_Z17updateAverageTempv+0x46>
	{
		for(int i = 0; i<cantTemps; i++)
    100c:	64 2f       	mov	r22, r20
    100e:	04 2e       	mov	r0, r20
    1010:	00 0c       	add	r0, r0
    1012:	77 0b       	sbc	r23, r23
    1014:	16 16       	cp	r1, r22
    1016:	17 06       	cpc	r1, r23
    1018:	84 f4       	brge	.+32     	; 0x103a <_Z17updateAverageTempv+0x3a>
    101a:	e0 ee       	ldi	r30, 0xE0	; 224
    101c:	f2 e0       	ldi	r31, 0x02	; 2
    101e:	44 0f       	add	r20, r20
    1020:	55 0b       	sbc	r21, r21
    1022:	40 52       	subi	r20, 0x20	; 32
    1024:	5d 4f       	sbci	r21, 0xFD	; 253
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
		{
			sumaTemps+=temps[i];
    102a:	21 91       	ld	r18, Z+
    102c:	31 91       	ld	r19, Z+
    102e:	82 0f       	add	r24, r18
    1030:	93 1f       	adc	r25, r19
{
	int16_t sumaTemps=0;
	tempPromedio=0;
	if(cantTemps>0)
	{
		for(int i = 0; i<cantTemps; i++)
    1032:	e4 17       	cp	r30, r20
    1034:	f5 07       	cpc	r31, r21
    1036:	c9 f7       	brne	.-14     	; 0x102a <_Z17updateAverageTempv+0x2a>
    1038:	02 c0       	rjmp	.+4      	; 0x103e <_Z17updateAverageTempv+0x3e>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
		{
			sumaTemps+=temps[i];
		}
		tempPromedio=sumaTemps/cantTemps;
    103e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__divmodhi4>
    1042:	60 93 dd 02 	sts	0x02DD, r22	; 0x8002dd <_ZL12tempPromedio>
    1046:	08 95       	ret

00001048 <_Z13updateMaxTempv>:
	}
}
void updateMaxTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
    1048:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <_ZL13indiceArreglo>
    104c:	16 16       	cp	r1, r22
    104e:	bc f4       	brge	.+46     	; 0x107e <_Z13updateMaxTempv+0x36>
    1050:	40 91 de 02 	lds	r20, 0x02DE	; 0x8002de <_ZL7tempMax>
    1054:	e0 ee       	ldi	r30, 0xE0	; 224
    1056:	f2 e0       	ldi	r31, 0x02	; 2
    1058:	66 0f       	add	r22, r22
    105a:	77 0b       	sbc	r23, r23
    105c:	60 52       	subi	r22, 0x20	; 32
    105e:	7d 4f       	sbci	r23, 0xFD	; 253
	{
		if (temps[i]>tempMax)
    1060:	81 91       	ld	r24, Z+
    1062:	91 91       	ld	r25, Z+
    1064:	24 2f       	mov	r18, r20
    1066:	04 2e       	mov	r0, r20
    1068:	00 0c       	add	r0, r0
    106a:	33 0b       	sbc	r19, r19
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	08 f4       	brcc	.+2      	; 0x1074 <_Z13updateMaxTempv+0x2c>
		{
			tempMax=temps[i];
    1072:	48 2f       	mov	r20, r24
		tempPromedio=sumaTemps/cantTemps;
	}
}
void updateMaxTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
    1074:	e6 17       	cp	r30, r22
    1076:	f7 07       	cpc	r31, r23
    1078:	99 f7       	brne	.-26     	; 0x1060 <_Z13updateMaxTempv+0x18>
    107a:	40 93 de 02 	sts	0x02DE, r20	; 0x8002de <_ZL7tempMax>
    107e:	08 95       	ret

00001080 <_Z13updateMinTempv>:
		}
	}
}
void updateMinTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
    1080:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <_ZL13indiceArreglo>
    1084:	16 16       	cp	r1, r22
    1086:	bc f4       	brge	.+46     	; 0x10b6 <_Z13updateMinTempv+0x36>
    1088:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    108c:	e0 ee       	ldi	r30, 0xE0	; 224
    108e:	f2 e0       	ldi	r31, 0x02	; 2
    1090:	66 0f       	add	r22, r22
    1092:	77 0b       	sbc	r23, r23
    1094:	60 52       	subi	r22, 0x20	; 32
    1096:	7d 4f       	sbci	r23, 0xFD	; 253
	{
		if (temps[i]<tempMin)
    1098:	81 91       	ld	r24, Z+
    109a:	91 91       	ld	r25, Z+
    109c:	24 2f       	mov	r18, r20
    109e:	04 2e       	mov	r0, r20
    10a0:	00 0c       	add	r0, r0
    10a2:	33 0b       	sbc	r19, r19
    10a4:	82 17       	cp	r24, r18
    10a6:	93 07       	cpc	r25, r19
    10a8:	08 f4       	brcc	.+2      	; 0x10ac <_Z13updateMinTempv+0x2c>
		{
			tempMin=temps[i];
    10aa:	48 2f       	mov	r20, r24
		}
	}
}
void updateMinTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
    10ac:	e6 17       	cp	r30, r22
    10ae:	f7 07       	cpc	r31, r23
    10b0:	99 f7       	brne	.-26     	; 0x1098 <_Z13updateMinTempv+0x18>
    10b2:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
    10b6:	08 95       	ret

000010b8 <_Z15showCurrentTempv>:
		}
	}
}
void showCurrentTemp()
{
	lcd.setCursor(0,0);
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	82 ec       	ldi	r24, 0xC2	; 194
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Actual       ");
    10c4:	6f e1       	ldi	r22, 0x1F	; 31
    10c6:	71 e0       	ldi	r23, 0x01	; 1
    10c8:	82 ec       	ldi	r24, 0xC2	; 194
    10ca:	92 e0       	ldi	r25, 0x02	; 2
    10cc:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	82 ec       	ldi	r24, 0xC2	; 194
    10d6:	92 e0       	ldi	r25, 0x02	; 2
    10d8:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("                ");
    10dc:	62 e3       	ldi	r22, 0x32	; 50
    10de:	71 e0       	ldi	r23, 0x01	; 1
    10e0:	82 ec       	ldi	r24, 0xC2	; 194
    10e2:	92 e0       	ldi	r25, 0x02	; 2
    10e4:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Print5printEPKc>
	lcd.setCursor(1,1);
    10e8:	41 e0       	ldi	r20, 0x01	; 1
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	82 ec       	ldi	r24, 0xC2	; 194
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempActual);
    10f4:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <_ZL10tempActual>
    10f8:	06 2e       	mov	r0, r22
    10fa:	00 0c       	add	r0, r0
    10fc:	77 0b       	sbc	r23, r23
    10fe:	4a e0       	ldi	r20, 0x0A	; 10
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	82 ec       	ldi	r24, 0xC2	; 194
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN5Print5printEii>
    110a:	08 95       	ret

0000110c <_Z15showAverageTempv>:
}

void showAverageTemp()
{
	lcd.setCursor(0,0);
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	82 ec       	ldi	r24, 0xC2	; 194
    1112:	92 e0       	ldi	r25, 0x02	; 2
    1114:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Promedio           ");
    1118:	63 e4       	ldi	r22, 0x43	; 67
    111a:	71 e0       	ldi	r23, 0x01	; 1
    111c:	82 ec       	ldi	r24, 0xC2	; 194
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
    1124:	41 e0       	ldi	r20, 0x01	; 1
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	82 ec       	ldi	r24, 0xC2	; 194
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("                ");
    1130:	62 e3       	ldi	r22, 0x32	; 50
    1132:	71 e0       	ldi	r23, 0x01	; 1
    1134:	82 ec       	ldi	r24, 0xC2	; 194
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Print5printEPKc>
	
	lcd.setCursor(1,1);
    113c:	41 e0       	ldi	r20, 0x01	; 1
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	82 ec       	ldi	r24, 0xC2	; 194
    1142:	92 e0       	ldi	r25, 0x02	; 2
    1144:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempPromedio);
    1148:	60 91 dd 02 	lds	r22, 0x02DD	; 0x8002dd <_ZL12tempPromedio>
    114c:	06 2e       	mov	r0, r22
    114e:	00 0c       	add	r0, r0
    1150:	77 0b       	sbc	r23, r23
    1152:	4a e0       	ldi	r20, 0x0A	; 10
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	82 ec       	ldi	r24, 0xC2	; 194
    1158:	92 e0       	ldi	r25, 0x02	; 2
    115a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN5Print5printEii>
    115e:	08 95       	ret

00001160 <_Z11showMaxTempv>:
}

void showMaxTemp()
{
	lcd.setCursor(0,0);
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	82 ec       	ldi	r24, 0xC2	; 194
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Maxima     ");
    116c:	6c e5       	ldi	r22, 0x5C	; 92
    116e:	71 e0       	ldi	r23, 0x01	; 1
    1170:	82 ec       	ldi	r24, 0xC2	; 194
    1172:	92 e0       	ldi	r25, 0x02	; 2
    1174:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
    1178:	41 e0       	ldi	r20, 0x01	; 1
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	82 ec       	ldi	r24, 0xC2	; 194
    117e:	92 e0       	ldi	r25, 0x02	; 2
    1180:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("                ");
    1184:	62 e3       	ldi	r22, 0x32	; 50
    1186:	71 e0       	ldi	r23, 0x01	; 1
    1188:	82 ec       	ldi	r24, 0xC2	; 194
    118a:	92 e0       	ldi	r25, 0x02	; 2
    118c:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Print5printEPKc>
	lcd.setCursor(1,1);
    1190:	41 e0       	ldi	r20, 0x01	; 1
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	82 ec       	ldi	r24, 0xC2	; 194
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempMax);
    119c:	60 91 de 02 	lds	r22, 0x02DE	; 0x8002de <_ZL7tempMax>
    11a0:	06 2e       	mov	r0, r22
    11a2:	00 0c       	add	r0, r0
    11a4:	77 0b       	sbc	r23, r23
    11a6:	4a e0       	ldi	r20, 0x0A	; 10
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	82 ec       	ldi	r24, 0xC2	; 194
    11ac:	92 e0       	ldi	r25, 0x02	; 2
    11ae:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN5Print5printEii>
    11b2:	08 95       	ret

000011b4 <_Z11showMinTempv>:
}

void showMinTemp()
{
	lcd.setCursor(0,0);
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	82 ec       	ldi	r24, 0xC2	; 194
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Minima       ");
    11c0:	6d e6       	ldi	r22, 0x6D	; 109
    11c2:	71 e0       	ldi	r23, 0x01	; 1
    11c4:	82 ec       	ldi	r24, 0xC2	; 194
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
    11cc:	41 e0       	ldi	r20, 0x01	; 1
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	82 ec       	ldi	r24, 0xC2	; 194
    11d2:	92 e0       	ldi	r25, 0x02	; 2
    11d4:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("                ");
    11d8:	62 e3       	ldi	r22, 0x32	; 50
    11da:	71 e0       	ldi	r23, 0x01	; 1
    11dc:	82 ec       	ldi	r24, 0xC2	; 194
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Print5printEPKc>
	lcd.setCursor(1,1);
    11e4:	41 e0       	ldi	r20, 0x01	; 1
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	82 ec       	ldi	r24, 0xC2	; 194
    11ea:	92 e0       	ldi	r25, 0x02	; 2
    11ec:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempMin);
    11f0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    11f4:	06 2e       	mov	r0, r22
    11f6:	00 0c       	add	r0, r0
    11f8:	77 0b       	sbc	r23, r23
    11fa:	4a e0       	ldi	r20, 0x0A	; 10
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	82 ec       	ldi	r24, 0xC2	; 194
    1200:	92 e0       	ldi	r25, 0x02	; 2
    1202:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN5Print5printEii>
    1206:	08 95       	ret

00001208 <_Z11enviarDatosv>:
		}
	}
}

void enviarDatos()
{
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    120c:	c0 ea       	ldi	r28, 0xA0	; 160
    120e:	d1 e0       	ldi	r29, 0x01	; 1
    1210:	e8 81       	ld	r30, Y
    1212:	f9 81       	ldd	r31, Y+1	; 0x01
    1214:	01 90       	ld	r0, Z+
    1216:	f0 81       	ld	r31, Z
    1218:	e0 2d       	mov	r30, r0
    121a:	61 e6       	ldi	r22, 0x61	; 97
    121c:	ce 01       	movw	r24, r28
    121e:	09 95       	icall
    1220:	e8 81       	ld	r30, Y
    1222:	f9 81       	ldd	r31, Y+1	; 0x01
    1224:	01 90       	ld	r0, Z+
    1226:	f0 81       	ld	r31, Z
    1228:	e0 2d       	mov	r30, r0
    122a:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <_ZL10tempActual>
    122e:	ce 01       	movw	r24, r28
    1230:	09 95       	icall
    1232:	e8 81       	ld	r30, Y
    1234:	f9 81       	ldd	r31, Y+1	; 0x01
    1236:	01 90       	ld	r0, Z+
    1238:	f0 81       	ld	r31, Z
    123a:	e0 2d       	mov	r30, r0
    123c:	6d e4       	ldi	r22, 0x4D	; 77
    123e:	ce 01       	movw	r24, r28
    1240:	09 95       	icall
    1242:	e8 81       	ld	r30, Y
    1244:	f9 81       	ldd	r31, Y+1	; 0x01
    1246:	01 90       	ld	r0, Z+
    1248:	f0 81       	ld	r31, Z
    124a:	e0 2d       	mov	r30, r0
    124c:	60 91 de 02 	lds	r22, 0x02DE	; 0x8002de <_ZL7tempMax>
    1250:	ce 01       	movw	r24, r28
    1252:	09 95       	icall
    1254:	e8 81       	ld	r30, Y
    1256:	f9 81       	ldd	r31, Y+1	; 0x01
    1258:	01 90       	ld	r0, Z+
    125a:	f0 81       	ld	r31, Z
    125c:	e0 2d       	mov	r30, r0
    125e:	6d e6       	ldi	r22, 0x6D	; 109
    1260:	ce 01       	movw	r24, r28
    1262:	09 95       	icall
    1264:	e8 81       	ld	r30, Y
    1266:	f9 81       	ldd	r31, Y+1	; 0x01
    1268:	01 90       	ld	r0, Z+
    126a:	f0 81       	ld	r31, Z
    126c:	e0 2d       	mov	r30, r0
    126e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1272:	ce 01       	movw	r24, r28
    1274:	09 95       	icall
    1276:	e8 81       	ld	r30, Y
    1278:	f9 81       	ldd	r31, Y+1	; 0x01
    127a:	01 90       	ld	r0, Z+
    127c:	f0 81       	ld	r31, Z
    127e:	e0 2d       	mov	r30, r0
    1280:	60 e7       	ldi	r22, 0x70	; 112
    1282:	ce 01       	movw	r24, r28
    1284:	09 95       	icall
    1286:	e8 81       	ld	r30, Y
    1288:	f9 81       	ldd	r31, Y+1	; 0x01
    128a:	01 90       	ld	r0, Z+
    128c:	f0 81       	ld	r31, Z
    128e:	e0 2d       	mov	r30, r0
    1290:	60 91 dd 02 	lds	r22, 0x02DD	; 0x8002dd <_ZL12tempPromedio>
    1294:	ce 01       	movw	r24, r28
    1296:	09 95       	icall
	Serial.write(tempMax);
	Serial.write('m');
	Serial.write(tempMin);
	Serial.write('p');
	Serial.write(tempPromedio);
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <setup>:
}


void setup()
{
	fnqueue_init();
    129e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_Z12fnqueue_initv>
	lcd.begin(numCols,numRows);
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	42 e0       	ldi	r20, 0x02	; 2
    12a6:	60 e1       	ldi	r22, 0x10	; 16
    12a8:	82 ec       	ldi	r24, 0xC2	; 194
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN13LiquidCrystal5beginEhhh>
	sensor_setup(tomar_medicion);
    12b0:	87 ed       	ldi	r24, 0xD7	; 215
    12b2:	97 e0       	ldi	r25, 0x07	; 7
    12b4:	0e 94 44 04 	call	0x888	; 0x888 <_Z12sensor_setupPFviE>
	lcd.setCursor(0,0);
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	82 ec       	ldi	r24, 0xC2	; 194
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("            ");
    12c4:	66 e3       	ldi	r22, 0x36	; 54
    12c6:	71 e0       	ldi	r23, 0x01	; 1
    12c8:	82 ec       	ldi	r24, 0xC2	; 194
    12ca:	92 e0       	ldi	r25, 0x02	; 2
    12cc:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Print5printEPKc>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    12d0:	26 e0       	ldi	r18, 0x06	; 6
    12d2:	40 e8       	ldi	r20, 0x80	; 128
    12d4:	55 e2       	ldi	r21, 0x25	; 37
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	80 ea       	ldi	r24, 0xA0	; 160
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN14HardwareSerial5beginEmh>
    12e2:	e0 ee       	ldi	r30, 0xE0	; 224
    12e4:	f2 e0       	ldi	r31, 0x02	; 2
    12e6:	88 ea       	ldi	r24, 0xA8	; 168
    12e8:	93 e0       	ldi	r25, 0x03	; 3
	
	Serial.begin(9600);
	
	// Inicializa las temps
	for(int i = 0; i<MAX_TEMPS; i++)
		temps[i] = 0;
    12ea:	11 92       	st	Z+, r1
    12ec:	11 92       	st	Z+, r1
	lcd.print("            ");
	
	Serial.begin(9600);
	
	// Inicializa las temps
	for(int i = 0; i<MAX_TEMPS; i++)
    12ee:	e8 17       	cp	r30, r24
    12f0:	f9 07       	cpc	r31, r25
    12f2:	d9 f7       	brne	.-10     	; 0x12ea <setup+0x4c>
		temps[i] = 0;
	
	
	lcd.setCursor(0,0);
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	82 ec       	ldi	r24, 0xC2	; 194
    12fa:	92 e0       	ldi	r25, 0x02	; 2
    12fc:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("S.E. 2019         ");
    1300:	60 e8       	ldi	r22, 0x80	; 128
    1302:	71 e0       	ldi	r23, 0x01	; 1
    1304:	82 ec       	ldi	r24, 0xC2	; 194
    1306:	92 e0       	ldi	r25, 0x02	; 2
    1308:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	82 ec       	ldi	r24, 0xC2	; 194
    1312:	92 e0       	ldi	r25, 0x02	; 2
    1314:	0e 94 d6 06 	call	0xdac	; 0xdac <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Actividad 2");
    1318:	63 e9       	ldi	r22, 0x93	; 147
    131a:	71 e0       	ldi	r23, 0x01	; 1
    131c:	82 ec       	ldi	r24, 0xC2	; 194
    131e:	92 e0       	ldi	r25, 0x02	; 2
    1320:	0e 94 23 03 	call	0x646	; 0x646 <_ZN5Print5printEPKc>


	//setup del timer2
	cli();
    1324:	f8 94       	cli
	TCCR2A = 0;// set entire TCCR2A register to 0
    1326:	a0 eb       	ldi	r26, 0xB0	; 176
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	1c 92       	st	X, r1
	TCCR2B = 0;// same for TCCR2B
    132c:	e1 eb       	ldi	r30, 0xB1	; 177
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);  // ctc for timer 0
    1332:	8c 91       	ld	r24, X
    1334:	82 60       	ori	r24, 0x02	; 2
    1336:	8c 93       	st	X, r24
	TIMSK2 |= (1<<TOIE2); //setea la interrupcion por overflow
    1338:	a0 e7       	ldi	r26, 0x70	; 112
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	8c 91       	ld	r24, X
    133e:	81 60       	ori	r24, 0x01	; 1
    1340:	8c 93       	st	X, r24
	TCNT2 = 0; //set timer en 0
    1342:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  // CS#2 y CS#0 bits -> Timer0 preescaler = 1024
    1346:	80 81       	ld	r24, Z
    1348:	87 60       	ori	r24, 0x07	; 7
    134a:	80 83       	st	Z, r24
	sei();
    134c:	78 94       	sei
    134e:	08 95       	ret

00001350 <loop>:

}

void loop()
{
	fnqueue_run();
    1350:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z11fnqueue_runv>
    1354:	08 95       	ret

00001356 <__vector_9>:
}


ISR(TIMER2_OVF_vect) // TIMER2_OVF_vect
{
    1356:	1f 92       	push	r1
    1358:	0f 92       	push	r0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	0f 92       	push	r0
    135e:	11 24       	eor	r1, r1
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
	TCNT2 = 0;
    1378:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	timerOvf= (timerOvf + 1) % 9;
    137c:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <_ZL8timerOvf>
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	69 e0       	ldi	r22, 0x09	; 9
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__divmodhi4>
    138c:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <_ZL8timerOvf>
	if(timerOvf == 0 ) //como el prescaler esta seteado en 1024, cada 9 interrupciones cuento 1 seg(0.144 seg)
    1390:	81 11       	cpse	r24, r1
    1392:	0d c0       	rjmp	.+26     	; 0x13ae <__vector_9+0x58>
	{ 
		contador++;
    1394:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <_ZL8contador>
    1398:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <_ZL8contador+0x1>
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <_ZL8contador+0x1>
    13a2:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <_ZL8contador>
		//timerOvf=0;
		fnqueue_add(procesarTimer);
    13a6:	84 e2       	ldi	r24, 0x24	; 36
    13a8:	9a e0       	ldi	r25, 0x0A	; 10
    13aa:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z11fnqueue_addPFvvE>
	}
	
}
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	0f 90       	pop	r0
    13cc:	1f 90       	pop	r1
    13ce:	18 95       	reti

000013d0 <_GLOBAL__sub_I_lcd>:
    13d0:	cf 92       	push	r12
    13d2:	ef 92       	push	r14
    13d4:	0f 93       	push	r16
static int8_t cantTemps = 0;
static int8_t indiceArreglo = 0;

static uint8_t timerOvf = 0;

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
    13d6:	0f 2e       	mov	r0, r31
    13d8:	f7 e0       	ldi	r31, 0x07	; 7
    13da:	cf 2e       	mov	r12, r31
    13dc:	f0 2d       	mov	r31, r0
    13de:	0f 2e       	mov	r0, r31
    13e0:	f6 e0       	ldi	r31, 0x06	; 6
    13e2:	ef 2e       	mov	r14, r31
    13e4:	f0 2d       	mov	r31, r0
    13e6:	05 e0       	ldi	r16, 0x05	; 5
    13e8:	24 e0       	ldi	r18, 0x04	; 4
    13ea:	49 e0       	ldi	r20, 0x09	; 9
    13ec:	68 e0       	ldi	r22, 0x08	; 8
    13ee:	82 ec       	ldi	r24, 0xC2	; 194
    13f0:	92 e0       	ldi	r25, 0x02	; 2
    13f2:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN13LiquidCrystalC1Ehhhhhh>
		contador++;
		//timerOvf=0;
		fnqueue_add(procesarTimer);
	}
	
}
    13f6:	0f 91       	pop	r16
    13f8:	ef 90       	pop	r14
    13fa:	cf 90       	pop	r12
    13fc:	08 95       	ret

000013fe <_Z14recibirComandov>:
	lcd.print(tempMin);
}

void recibirComando()
{
	if(Serial.available()>0)
    13fe:	80 ea       	ldi	r24, 0xA0	; 160
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN14HardwareSerial9availableEv>
    1406:	18 16       	cp	r1, r24
    1408:	19 06       	cpc	r1, r25
    140a:	ec f4       	brge	.+58     	; 0x1446 <_Z14recibirComandov+0x48>
	{
		switch(Serial.read())
    140c:	80 ea       	ldi	r24, 0xA0	; 160
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN14HardwareSerial4readEv>
    1414:	81 36       	cpi	r24, 0x61	; 97
    1416:	91 05       	cpc	r25, r1
    1418:	a1 f0       	breq	.+40     	; 0x1442 <_Z14recibirComandov+0x44>
    141a:	24 f4       	brge	.+8      	; 0x1424 <_Z14recibirComandov+0x26>
    141c:	8d 34       	cpi	r24, 0x4D	; 77
    141e:	91 05       	cpc	r25, r1
    1420:	69 f0       	breq	.+26     	; 0x143c <_Z14recibirComandov+0x3e>
    1422:	08 95       	ret
    1424:	8d 36       	cpi	r24, 0x6D	; 109
    1426:	91 05       	cpc	r25, r1
    1428:	31 f0       	breq	.+12     	; 0x1436 <_Z14recibirComandov+0x38>
    142a:	80 37       	cpi	r24, 0x70	; 112
    142c:	91 05       	cpc	r25, r1
    142e:	59 f4       	brne	.+22     	; 0x1446 <_Z14recibirComandov+0x48>
		{
			case 'p':
			{
				showAverageTemp();
    1430:	0e 94 86 08 	call	0x110c	; 0x110c <_Z15showAverageTempv>
			}break;
    1434:	08 95       	ret
			case 'm':
			{
				showMinTemp();
    1436:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_Z11showMinTempv>
			}break;
    143a:	08 95       	ret
			case 'M':
			{
				showMaxTemp();
    143c:	0e 94 b0 08 	call	0x1160	; 0x1160 <_Z11showMaxTempv>
			}break;
    1440:	08 95       	ret
			case 'a':
			{
				showCurrentTemp();
    1442:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_Z15showCurrentTempv>
    1446:	08 95       	ret

00001448 <_Z13procesarTimerv>:
	Serial.write(tempPromedio);
}

void procesarTimer()
{
	recibirComando();
    1448:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_Z14recibirComandov>
	enviarDatos();
    144c:	0e 94 04 09 	call	0x1208	; 0x1208 <_Z11enviarDatosv>
	guardarTemp(temperaturaMedida);
    1450:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <_ZL17temperaturaMedida>
    1454:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_Z11guardarTempa>
	updateCurrentTemp();
    1458:	0e 94 fb 07 	call	0xff6	; 0xff6 <_Z17updateCurrentTempv>
	updateMinTemp();
    145c:	0e 94 40 08 	call	0x1080	; 0x1080 <_Z13updateMinTempv>
	updateMaxTemp();
    1460:	0e 94 24 08 	call	0x1048	; 0x1048 <_Z13updateMaxTempv>
	updateAverageTemp();
    1464:	0e 94 00 08 	call	0x1000	; 0x1000 <_Z17updateAverageTempv>
    1468:	08 95       	ret

0000146a <main>:
    146a:	78 94       	sei
    146c:	84 b5       	in	r24, 0x24	; 36
    146e:	82 60       	ori	r24, 0x02	; 2
    1470:	84 bd       	out	0x24, r24	; 36
    1472:	84 b5       	in	r24, 0x24	; 36
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	84 bd       	out	0x24, r24	; 36
    1478:	85 b5       	in	r24, 0x25	; 37
    147a:	82 60       	ori	r24, 0x02	; 2
    147c:	85 bd       	out	0x25, r24	; 37
    147e:	85 b5       	in	r24, 0x25	; 37
    1480:	81 60       	ori	r24, 0x01	; 1
    1482:	85 bd       	out	0x25, r24	; 37
    1484:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1488:	81 60       	ori	r24, 0x01	; 1
    148a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    148e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1492:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1496:	82 60       	ori	r24, 0x02	; 2
    1498:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    149c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    14a0:	81 60       	ori	r24, 0x01	; 1
    14a2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    14a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    14aa:	81 60       	ori	r24, 0x01	; 1
    14ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    14b0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    14b4:	84 60       	ori	r24, 0x04	; 4
    14b6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    14ba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    14be:	81 60       	ori	r24, 0x01	; 1
    14c0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    14c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14c8:	84 60       	ori	r24, 0x04	; 4
    14ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14d2:	82 60       	ori	r24, 0x02	; 2
    14d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14dc:	81 60       	ori	r24, 0x01	; 1
    14de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14e6:	80 68       	ori	r24, 0x80	; 128
    14e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14ec:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14f0:	0e 94 4f 09 	call	0x129e	; 0x129e <setup>
    14f4:	0e 94 a8 09 	call	0x1350	; 0x1350 <loop>
    14f8:	0e 94 8a 01 	call	0x314	; 0x314 <_Z14serialEventRunv>
    14fc:	fb cf       	rjmp	.-10     	; 0x14f4 <main+0x8a>

000014fe <_GLOBAL__sub_I___vector_18>:
    14fe:	e0 ea       	ldi	r30, 0xA0	; 160
    1500:	f1 e0       	ldi	r31, 0x01	; 1
    1502:	13 82       	std	Z+3, r1	; 0x03
    1504:	12 82       	std	Z+2, r1	; 0x02
    1506:	88 ee       	ldi	r24, 0xE8	; 232
    1508:	93 e0       	ldi	r25, 0x03	; 3
    150a:	a0 e0       	ldi	r26, 0x00	; 0
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	84 83       	std	Z+4, r24	; 0x04
    1510:	95 83       	std	Z+5, r25	; 0x05
    1512:	a6 83       	std	Z+6, r26	; 0x06
    1514:	b7 83       	std	Z+7, r27	; 0x07
    1516:	85 e0       	ldi	r24, 0x05	; 5
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	80 83       	st	Z, r24
    151e:	85 ec       	ldi	r24, 0xC5	; 197
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	95 87       	std	Z+13, r25	; 0x0d
    1524:	84 87       	std	Z+12, r24	; 0x0c
    1526:	84 ec       	ldi	r24, 0xC4	; 196
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	97 87       	std	Z+15, r25	; 0x0f
    152c:	86 87       	std	Z+14, r24	; 0x0e
    152e:	80 ec       	ldi	r24, 0xC0	; 192
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	91 8b       	std	Z+17, r25	; 0x11
    1534:	80 8b       	std	Z+16, r24	; 0x10
    1536:	81 ec       	ldi	r24, 0xC1	; 193
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	93 8b       	std	Z+19, r25	; 0x13
    153c:	82 8b       	std	Z+18, r24	; 0x12
    153e:	82 ec       	ldi	r24, 0xC2	; 194
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	95 8b       	std	Z+21, r25	; 0x15
    1544:	84 8b       	std	Z+20, r24	; 0x14
    1546:	86 ec       	ldi	r24, 0xC6	; 198
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	97 8b       	std	Z+23, r25	; 0x17
    154c:	86 8b       	std	Z+22, r24	; 0x16
    154e:	11 8e       	std	Z+25, r1	; 0x19
    1550:	12 8e       	std	Z+26, r1	; 0x1a
    1552:	13 8e       	std	Z+27, r1	; 0x1b
    1554:	14 8e       	std	Z+28, r1	; 0x1c
    1556:	08 95       	ret

00001558 <__divmodhi4>:
    1558:	97 fb       	bst	r25, 7
    155a:	07 2e       	mov	r0, r23
    155c:	16 f4       	brtc	.+4      	; 0x1562 <__divmodhi4+0xa>
    155e:	00 94       	com	r0
    1560:	07 d0       	rcall	.+14     	; 0x1570 <__divmodhi4_neg1>
    1562:	77 fd       	sbrc	r23, 7
    1564:	09 d0       	rcall	.+18     	; 0x1578 <__divmodhi4_neg2>
    1566:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__udivmodhi4>
    156a:	07 fc       	sbrc	r0, 7
    156c:	05 d0       	rcall	.+10     	; 0x1578 <__divmodhi4_neg2>
    156e:	3e f4       	brtc	.+14     	; 0x157e <__divmodhi4_exit>

00001570 <__divmodhi4_neg1>:
    1570:	90 95       	com	r25
    1572:	81 95       	neg	r24
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	08 95       	ret

00001578 <__divmodhi4_neg2>:
    1578:	70 95       	com	r23
    157a:	61 95       	neg	r22
    157c:	7f 4f       	sbci	r23, 0xFF	; 255

0000157e <__divmodhi4_exit>:
    157e:	08 95       	ret

00001580 <__udivmodhi4>:
    1580:	aa 1b       	sub	r26, r26
    1582:	bb 1b       	sub	r27, r27
    1584:	51 e1       	ldi	r21, 0x11	; 17
    1586:	07 c0       	rjmp	.+14     	; 0x1596 <__udivmodhi4_ep>

00001588 <__udivmodhi4_loop>:
    1588:	aa 1f       	adc	r26, r26
    158a:	bb 1f       	adc	r27, r27
    158c:	a6 17       	cp	r26, r22
    158e:	b7 07       	cpc	r27, r23
    1590:	10 f0       	brcs	.+4      	; 0x1596 <__udivmodhi4_ep>
    1592:	a6 1b       	sub	r26, r22
    1594:	b7 0b       	sbc	r27, r23

00001596 <__udivmodhi4_ep>:
    1596:	88 1f       	adc	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	5a 95       	dec	r21
    159c:	a9 f7       	brne	.-22     	; 0x1588 <__udivmodhi4_loop>
    159e:	80 95       	com	r24
    15a0:	90 95       	com	r25
    15a2:	bc 01       	movw	r22, r24
    15a4:	cd 01       	movw	r24, r26
    15a6:	08 95       	ret

000015a8 <__tablejump2__>:
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	05 90       	lpm	r0, Z+
    15ae:	f4 91       	lpm	r31, Z
    15b0:	e0 2d       	mov	r30, r0
    15b2:	09 94       	ijmp

000015b4 <__udivmodsi4>:
    15b4:	a1 e2       	ldi	r26, 0x21	; 33
    15b6:	1a 2e       	mov	r1, r26
    15b8:	aa 1b       	sub	r26, r26
    15ba:	bb 1b       	sub	r27, r27
    15bc:	fd 01       	movw	r30, r26
    15be:	0d c0       	rjmp	.+26     	; 0x15da <__udivmodsi4_ep>

000015c0 <__udivmodsi4_loop>:
    15c0:	aa 1f       	adc	r26, r26
    15c2:	bb 1f       	adc	r27, r27
    15c4:	ee 1f       	adc	r30, r30
    15c6:	ff 1f       	adc	r31, r31
    15c8:	a2 17       	cp	r26, r18
    15ca:	b3 07       	cpc	r27, r19
    15cc:	e4 07       	cpc	r30, r20
    15ce:	f5 07       	cpc	r31, r21
    15d0:	20 f0       	brcs	.+8      	; 0x15da <__udivmodsi4_ep>
    15d2:	a2 1b       	sub	r26, r18
    15d4:	b3 0b       	sbc	r27, r19
    15d6:	e4 0b       	sbc	r30, r20
    15d8:	f5 0b       	sbc	r31, r21

000015da <__udivmodsi4_ep>:
    15da:	66 1f       	adc	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	88 1f       	adc	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	1a 94       	dec	r1
    15e4:	69 f7       	brne	.-38     	; 0x15c0 <__udivmodsi4_loop>
    15e6:	60 95       	com	r22
    15e8:	70 95       	com	r23
    15ea:	80 95       	com	r24
    15ec:	90 95       	com	r25
    15ee:	9b 01       	movw	r18, r22
    15f0:	ac 01       	movw	r20, r24
    15f2:	bd 01       	movw	r22, r26
    15f4:	cf 01       	movw	r24, r30
    15f6:	08 95       	ret

000015f8 <abort>:
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	f8 94       	cli
    15fe:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <_exit>

00001602 <_exit>:
    1602:	f8 94       	cli

00001604 <__stop_program>:
    1604:	ff cf       	rjmp	.-2      	; 0x1604 <__stop_program>
