
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  000012fc  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000163  0080015e  0080015e  000013ee  2**0
                  ALLOC
  3 .comment      00000041  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006c0a  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017f7  00000000  00000000  000084ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021cc  00000000  00000000  00009ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bf0  00000000  00000000  0000beb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002126  00000000  00000000  0000caa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004929  00000000  00000000  0000ebc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  000134ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 10 02 	jmp	0x420	; 0x420 <__vector_21>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	07 06       	cpc	r0, r23

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ec ef       	ldi	r30, 0xFC	; 252
      ce:	f2 e1       	ldi	r31, 0x12	; 18
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	ae 35       	cpi	r26, 0x5E	; 94
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	22 e0       	ldi	r18, 0x02	; 2
      de:	ae e5       	ldi	r26, 0x5E	; 94
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a1 3c       	cpi	r26, 0xC1	; 193
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	cd e5       	ldi	r28, 0x5D	; 93
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	21 97       	sbiw	r28, 0x01	; 1
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 76 09 	call	0x12ec	; 0x12ec <__tablejump2__>
      fc:	cc 35       	cpi	r28, 0x5C	; 92
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 70 08 	call	0x10e0	; 0x10e0 <main>
     106:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <_Z14critical_beginv>:
    // módulo de región crítica. Esto puede suceder cuando se está ejecutando
    // una rutina de interrupción. En este caso, no deshabilitar las
    // interrupciones

    // Lectura atómica del registro
    uint8_t status_register = SREG;
     10e:	2f b7       	in	r18, 0x3f	; 63
    cli();
     110:	f8 94       	cli

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
     112:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     116:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     11a:	89 2b       	or	r24, r25
     11c:	19 f4       	brne	.+6      	; 0x124 <_Z14critical_beginv+0x16>

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
     11e:	22 23       	and	r18, r18
     120:	9c f4       	brge	.+38     	; 0x148 <_Z14critical_beginv+0x3a>
     122:	08 c0       	rjmp	.+16     	; 0x134 <_Z14critical_beginv+0x26>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     124:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     128:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
     12c:	89 2b       	or	r24, r25
     12e:	91 f0       	breq	.+36     	; 0x154 <_Z14critical_beginv+0x46>
     130:	22 23       	and	r18, r18
     132:	84 f0       	brlt	.+32     	; 0x154 <_Z14critical_beginv+0x46>
    {
        anidamiento++;
     134:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     138:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
     13c:	01 96       	adiw	r24, 0x01	; 1
     13e:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <__data_end+0x1>
     142:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
     146:	08 95       	ret
    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     148:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     14c:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
     150:	89 2b       	or	r24, r25
     152:	81 f7       	brne	.-32     	; 0x134 <_Z14critical_beginv+0x26>
     154:	08 95       	ret

00000156 <_Z12critical_endv>:
    // crítica, no hacer nada.
}

void critical_end(void)
{
    uint8_t status_register = SREG;
     156:	2f b7       	in	r18, 0x3f	; 63
    cli();
     158:	f8 94       	cli

    if (anidamiento > 0) {
     15a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     15e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
     162:	18 16       	cp	r1, r24
     164:	19 06       	cpc	r1, r25
     166:	8c f4       	brge	.+34     	; 0x18a <_Z12critical_endv+0x34>
        anidamiento--;
     168:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     16c:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <__data_end+0x1>
     176:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
        if (anidamiento == 0)
     17a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     17e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
     182:	89 2b       	or	r24, r25
     184:	29 f4       	brne	.+10     	; 0x190 <_Z12critical_endv+0x3a>
            sei();
     186:	78 94       	sei
     188:	08 95       	ret
    }
    else if ((status_register & 0x80) != 0)
     18a:	22 23       	and	r18, r18
     18c:	0c f4       	brge	.+2      	; 0x190 <_Z12critical_endv+0x3a>
        sei();
     18e:	78 94       	sei
     190:	08 95       	ret

00000192 <_Z19procesar_adc_sensorv>:
	sensorCallback.callback=handler;
}

void procesar_adc_sensor()
{
	analogVal=config.valor;
     192:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <_ZL6config+0x3>
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <_ZL9analogVal+0x1>
     19c:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_ZL9analogVal>
	medicion=analogVal * 1.1 * 100 / 1024;			// formula de conversion de temp del lm35
     1a0:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <_ZL9analogVal>
     1a4:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <_ZL9analogVal+0x1>
	sensorCallback.callback(medicion);
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__floatunsisf>
     1b0:	2d ec       	ldi	r18, 0xCD	; 205
     1b2:	3c ec       	ldi	r19, 0xCC	; 204
     1b4:	4c e8       	ldi	r20, 0x8C	; 140
     1b6:	5f e3       	ldi	r21, 0x3F	; 63
     1b8:	0e 94 b3 06 	call	0xd66	; 0xd66 <__mulsf3>
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	48 ec       	ldi	r20, 0xC8	; 200
     1c2:	52 e4       	ldi	r21, 0x42	; 66
     1c4:	0e 94 b3 06 	call	0xd66	; 0xd66 <__mulsf3>
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e8       	ldi	r20, 0x80	; 128
     1ce:	5a e3       	ldi	r21, 0x3A	; 58
     1d0:	0e 94 b3 06 	call	0xd66	; 0xd66 <__mulsf3>
     1d4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fixunssfsi>
     1d8:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <_ZL14sensorCallback>
     1dc:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <_ZL14sensorCallback+0x1>
     1e0:	cb 01       	movw	r24, r22
     1e2:	09 95       	icall
     1e4:	08 95       	ret

000001e6 <_Z15sensor_callbacki>:
}

void sensor_callback(int valor)
{
	contador++;
     1e6:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_ZL8contador>
     1ea:	8f 5f       	subi	r24, 0xFF	; 255
     1ec:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <_ZL8contador>
	if(contador > 50)
     1f0:	83 33       	cpi	r24, 0x33	; 51
     1f2:	30 f0       	brcs	.+12     	; 0x200 <_Z15sensor_callbacki+0x1a>
	{
		fnqueue_add(procesar_adc_sensor);
     1f4:	89 ec       	ldi	r24, 0xC9	; 201
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 b8 02 	call	0x570	; 0x570 <_Z11fnqueue_addPFvvE>
		contador=0;
     1fc:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <_ZL8contador>
     200:	08 95       	ret

00000202 <_Z17medicion_callbackPFviE>:
static adc_cfg config;
static callbackSensor sensorCallback;

void medicion_callback(void (*handler)(int))
{
	sensorCallback.callback=handler;
     202:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <_ZL14sensorCallback+0x1>
     206:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <_ZL14sensorCallback>
     20a:	08 95       	ret

0000020c <_Z12sensor_setupv>:
	}
}

void sensor_setup()
{
	config.canal=1;
     20c:	e2 e6       	ldi	r30, 0x62	; 98
     20e:	f1 e0       	ldi	r31, 0x01	; 1
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 83       	st	Z, r24
	config.valor=0;
     214:	13 82       	std	Z+3, r1	; 0x03
	config.callback=sensor_callback;
     216:	83 ef       	ldi	r24, 0xF3	; 243
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	92 83       	std	Z+2, r25	; 0x02
     21c:	81 83       	std	Z+1, r24	; 0x01
	adc_init(&config);
     21e:	cf 01       	movw	r24, r30
     220:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z8adc_initP7adc_cfg>
     224:	08 95       	ret

00000226 <_Z20procesar_adc_tecladoi>:
	if(tecla>=0 && tecla<5)
		teclasCallback[tecla].callbackDown=handler;
}
	
void procesar_adc_teclado(int analogVal)
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
	int16_t k;
	for (k = 0; k < NUM_KEYS; k++)
		if (analogVal < adc_key_val[k])
     22a:	82 33       	cpi	r24, 0x32	; 50
     22c:	91 05       	cpc	r25, r1
     22e:	80 f0       	brcs	.+32     	; 0x250 <_Z20procesar_adc_tecladoi+0x2a>
     230:	86 3e       	cpi	r24, 0xE6	; 230
     232:	91 05       	cpc	r25, r1
     234:	08 f4       	brcc	.+2      	; 0x238 <_Z20procesar_adc_tecladoi+0x12>
     236:	40 c0       	rjmp	.+128    	; 0x2b8 <_Z20procesar_adc_tecladoi+0x92>
     238:	88 36       	cpi	r24, 0x68	; 104
     23a:	21 e0       	ldi	r18, 0x01	; 1
     23c:	92 07       	cpc	r25, r18
     23e:	f8 f1       	brcs	.+126    	; 0x2be <_Z20procesar_adc_tecladoi+0x98>
     240:	87 31       	cpi	r24, 0x17	; 23
     242:	22 e0       	ldi	r18, 0x02	; 2
     244:	92 07       	cpc	r25, r18
     246:	f0 f1       	brcs	.+124    	; 0x2c4 <_Z20procesar_adc_tecladoi+0x9e>
     248:	88 3f       	cpi	r24, 0xF8	; 248
     24a:	92 40       	sbci	r25, 0x02	; 2
     24c:	d8 f4       	brcc	.+54     	; 0x284 <_Z20procesar_adc_tecladoi+0x5e>
     24e:	3d c0       	rjmp	.+122    	; 0x2ca <_Z20procesar_adc_tecladoi+0xa4>
		{
			if(oldkey!=k)
     250:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     254:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     258:	89 2b       	or	r24, r25
     25a:	09 f4       	brne	.+2      	; 0x25e <_Z20procesar_adc_tecladoi+0x38>
     25c:	3f c0       	rjmp	.+126    	; 0x2dc <_Z20procesar_adc_tecladoi+0xb6>
}
	
void procesar_adc_teclado(int analogVal)
{
	int16_t k;
	for (k = 0; k < NUM_KEYS; k++)
     25e:	c0 e0       	ldi	r28, 0x00	; 0
     260:	d0 e0       	ldi	r29, 0x00	; 0
		if (analogVal < adc_key_val[k])
		{
			if(oldkey!=k)
			{	
				oldkey=k;
     262:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
     266:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
				teclasCallback[k].callbackDown();
     26a:	fe 01       	movw	r30, r28
     26c:	ee 0f       	add	r30, r30
     26e:	ff 1f       	adc	r31, r31
     270:	ee 0f       	add	r30, r30
     272:	ff 1f       	adc	r31, r31
     274:	e6 59       	subi	r30, 0x96	; 150
     276:	fe 4f       	sbci	r31, 0xFE	; 254
     278:	02 80       	ldd	r0, Z+2	; 0x02
     27a:	f3 81       	ldd	r31, Z+3	; 0x03
     27c:	e0 2d       	mov	r30, r0
     27e:	09 95       	icall
			}
			break;
		}
	if (k >= NUM_KEYS)		//solto el boton
     280:	25 97       	sbiw	r28, 0x05	; 5
     282:	64 f1       	brlt	.+88     	; 0x2dc <_Z20procesar_adc_tecladoi+0xb6>
		if(oldkey!= -1)
     284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     288:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     28c:	8f 3f       	cpi	r24, 0xFF	; 255
     28e:	2f ef       	ldi	r18, 0xFF	; 255
     290:	92 07       	cpc	r25, r18
     292:	21 f1       	breq	.+72     	; 0x2dc <_Z20procesar_adc_tecladoi+0xb6>
		{
			teclasCallback[oldkey].callbackUp();
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	fc 01       	movw	r30, r24
     29e:	e6 59       	subi	r30, 0x96	; 150
     2a0:	fe 4f       	sbci	r31, 0xFE	; 254
     2a2:	01 90       	ld	r0, Z+
     2a4:	f0 81       	ld	r31, Z
     2a6:	e0 2d       	mov	r30, r0
     2a8:	09 95       	icall
			oldkey = -1;     // Solto el boton y cambio el valor de oldkey 
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	9f ef       	ldi	r25, 0xFF	; 255
     2ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     2b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		};
}
     2b6:	12 c0       	rjmp	.+36     	; 0x2dc <_Z20procesar_adc_tecladoi+0xb6>
}
	
void procesar_adc_teclado(int analogVal)
{
	int16_t k;
	for (k = 0; k < NUM_KEYS; k++)
     2b8:	c1 e0       	ldi	r28, 0x01	; 1
     2ba:	d0 e0       	ldi	r29, 0x00	; 0
     2bc:	08 c0       	rjmp	.+16     	; 0x2ce <_Z20procesar_adc_tecladoi+0xa8>
     2be:	c2 e0       	ldi	r28, 0x02	; 2
     2c0:	d0 e0       	ldi	r29, 0x00	; 0
     2c2:	05 c0       	rjmp	.+10     	; 0x2ce <_Z20procesar_adc_tecladoi+0xa8>
     2c4:	c3 e0       	ldi	r28, 0x03	; 3
     2c6:	d0 e0       	ldi	r29, 0x00	; 0
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <_Z20procesar_adc_tecladoi+0xa8>
     2ca:	c4 e0       	ldi	r28, 0x04	; 4
     2cc:	d0 e0       	ldi	r29, 0x00	; 0
		if (analogVal < adc_key_val[k])
		{
			if(oldkey!=k)
     2ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     2d6:	c8 17       	cp	r28, r24
     2d8:	d9 07       	cpc	r29, r25
     2da:	19 f6       	brne	.-122    	; 0x262 <_Z20procesar_adc_tecladoi+0x3c>
		if(oldkey!= -1)
		{
			teclasCallback[oldkey].callbackUp();
			oldkey = -1;     // Solto el boton y cambio el valor de oldkey 
		};
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <_Z15key_up_callbackPFvvEi>:
static adc_cfg config;

struct callbackSTR teclasCallback[5];

void key_up_callback(void (*handler)(),int tecla){
	if(tecla>=0 && tecla<5)
     2e2:	65 30       	cpi	r22, 0x05	; 5
     2e4:	71 05       	cpc	r23, r1
     2e6:	48 f4       	brcc	.+18     	; 0x2fa <_Z15key_up_callbackPFvvEi+0x18>
		teclasCallback[tecla].callbackUp=handler;
     2e8:	66 0f       	add	r22, r22
     2ea:	77 1f       	adc	r23, r23
     2ec:	66 0f       	add	r22, r22
     2ee:	77 1f       	adc	r23, r23
     2f0:	fb 01       	movw	r30, r22
     2f2:	e6 59       	subi	r30, 0x96	; 150
     2f4:	fe 4f       	sbci	r31, 0xFE	; 254
     2f6:	91 83       	std	Z+1, r25	; 0x01
     2f8:	80 83       	st	Z, r24
     2fa:	08 95       	ret

000002fc <_Z17key_down_callbackPFvvEi>:
}
	
void key_down_callback(void (*handler)(),int tecla){
	if(tecla>=0 && tecla<5)
     2fc:	65 30       	cpi	r22, 0x05	; 5
     2fe:	71 05       	cpc	r23, r1
     300:	48 f4       	brcc	.+18     	; 0x314 <_Z17key_down_callbackPFvvEi+0x18>
		teclasCallback[tecla].callbackDown=handler;
     302:	66 0f       	add	r22, r22
     304:	77 1f       	adc	r23, r23
     306:	66 0f       	add	r22, r22
     308:	77 1f       	adc	r23, r23
     30a:	fb 01       	movw	r30, r22
     30c:	e6 59       	subi	r30, 0x96	; 150
     30e:	fe 4f       	sbci	r31, 0xFE	; 254
     310:	93 83       	std	Z+3, r25	; 0x03
     312:	82 83       	std	Z+2, r24	; 0x02
     314:	08 95       	ret

00000316 <_Z13teclado_setupv>:



void teclado_setup()
{
	config.canal=0;
     316:	ee e7       	ldi	r30, 0x7E	; 126
     318:	f1 e0       	ldi	r31, 0x01	; 1
     31a:	10 82       	st	Z, r1
	config.valor=0;
     31c:	13 82       	std	Z+3, r1	; 0x03
	config.callback=procesar_adc_teclado;
     31e:	83 e1       	ldi	r24, 0x13	; 19
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	92 83       	std	Z+2, r25	; 0x02
     324:	81 83       	std	Z+1, r24	; 0x01
	adc_init(&config);
     326:	cf 01       	movw	r24, r30
     328:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z8adc_initP7adc_cfg>
     32c:	08 95       	ret

0000032e <_Z14llamarCallbackv>:
	return 1;
}

void llamarCallback()
{
	canales[fnLlamar].callback(valor_leido);
     32e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <fnLlamar>
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	fc 01       	movw	r30, r24
     336:	ee 0f       	add	r30, r30
     338:	ff 1f       	adc	r31, r31
     33a:	ee 0f       	add	r30, r30
     33c:	ff 1f       	adc	r31, r31
     33e:	8e 0f       	add	r24, r30
     340:	9f 1f       	adc	r25, r31
     342:	fc 01       	movw	r30, r24
     344:	e4 57       	subi	r30, 0x74	; 116
     346:	fe 4f       	sbci	r31, 0xFE	; 254
     348:	01 80       	ldd	r0, Z+1	; 0x01
     34a:	f2 81       	ldd	r31, Z+2	; 0x02
     34c:	e0 2d       	mov	r30, r0
     34e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <valor_leido>
     352:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <valor_leido+0x1>
     356:	09 95       	icall
     358:	08 95       	ret

0000035a <_Z8adc_initP7adc_cfg>:
uint8_t seteados[6];		// Almacena que canales estan en uso.
uint16_t valor_leido;		// Almacena el ultimo valor leido (util).
uint8_t i;

int adc_init(adc_cfg *cfg)
{
     35a:	fc 01       	movw	r30, r24
	// Si se ingresa un canal invalido se retorna 0 (error).
	if(cfg->canal>5)
     35c:	80 81       	ld	r24, Z
     35e:	86 30       	cpi	r24, 0x06	; 6
     360:	08 f0       	brcs	.+2      	; 0x364 <_Z8adc_initP7adc_cfg+0xa>
     362:	58 c0       	rjmp	.+176    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		return 0;
	}
	// Si el adc no fue iniciado se configura:
	if(iniciado==0)
     364:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <iniciado>
     368:	81 11       	cpse	r24, r1
     36a:	34 c0       	rjmp	.+104    	; 0x3d4 <_Z8adc_initP7adc_cfg+0x7a>
	{
		// clear ADLAR in ADMUX (0x7C) to right-adjust the result
		// ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits)
		ADMUX &= ~(1<<ADLAR);
     36c:	ac e7       	ldi	r26, 0x7C	; 124
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	8c 91       	ld	r24, X
     372:	8f 7d       	andi	r24, 0xDF	; 223
     374:	8c 93       	st	X, r24
		
		// Set REFS1..0 in ADMUX (0x7C) to change reference voltage to the
		// proper source (01)
		ADMUX |= (1<<REFS0);
     376:	8c 91       	ld	r24, X
     378:	80 64       	ori	r24, 0x40	; 64
     37a:	8c 93       	st	X, r24
		
		// Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog
		// input
		ADMUX &= ~(1<<MUX3 | 1<<MUX2 | 1<<MUX1 | 1<<MUX0);
     37c:	8c 91       	ld	r24, X
     37e:	80 7f       	andi	r24, 0xF0	; 240
     380:	8c 93       	st	X, r24
		//ADMUX |= cfg->canal;
		// ADMUX |= B00001000; // Binary equivalent
		
		// Set ADEN in ADCSRA (0x7A) to enable the ADC.
		// Note, this instruction takes 12 ADC clocks to execute
		ADCSRA |= 1<<ADEN;
     382:	aa e7       	ldi	r26, 0x7A	; 122
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	8c 91       	ld	r24, X
     388:	80 68       	ori	r24, 0x80	; 128
     38a:	8c 93       	st	X, r24
		
		// Deshabilitar autotrigger.
		ADCSRA &= ~(1<<ADATE);
     38c:	8c 91       	ld	r24, X
     38e:	8f 7d       	andi	r24, 0xDF	; 223
     390:	8c 93       	st	X, r24
		// Esta vez no queremos AutoTrigger.
		// ADCSRB &= ~(1<<ADTS2 | 1<<ADTS1 | 1<<ADTS0);
		
		// Set the Prescaler to 128 (16000KHz/128 = 125KHz)
		// Above 200KHz 10-bit results are not reliable.
		ADCSRA |= (1<<ADPS2 | 1<<ADPS1 | 1<<ADPS2);
     392:	8c 91       	ld	r24, X
     394:	86 60       	ori	r24, 0x06	; 6
     396:	8c 93       	st	X, r24
		
		// Set ADIE in ADCSRA (0x7A) to enable the ADC interrupt.
		// Without this, the internal interrupt will not trigger.
		ADCSRA |= 1<<ADIE;
     398:	8c 91       	ld	r24, X
     39a:	88 60       	ori	r24, 0x08	; 8
     39c:	8c 93       	st	X, r24
		
		// Enable global interrupts
		// AVR macro included in <avr/interrupts.h>, which the Arduino IDE
		// supplies by default.
		sei();
     39e:	78 94       	sei
		
		// Kick off the first ADC
		
		// Set ADSC in ADCSRA (0x7A) to start the ADC conversion
		ADCSRA |= 1<<ADSC;
     3a0:	8c 91       	ld	r24, X
     3a2:	80 64       	ori	r24, 0x40	; 64
     3a4:	8c 93       	st	X, r24
		
		//inicializar el arreglo con 0s.
		for(i=0;i<6;i++)
		{
			seteados[i]=0;
     3a6:	a6 e8       	ldi	r26, 0x86	; 134
     3a8:	b1 e0       	ldi	r27, 0x01	; 1
     3aa:	1c 92       	st	X, r1
     3ac:	11 96       	adiw	r26, 0x01	; 1
     3ae:	1c 92       	st	X, r1
     3b0:	11 97       	sbiw	r26, 0x01	; 1
     3b2:	12 96       	adiw	r26, 0x02	; 2
     3b4:	1c 92       	st	X, r1
     3b6:	12 97       	sbiw	r26, 0x02	; 2
     3b8:	13 96       	adiw	r26, 0x03	; 3
     3ba:	1c 92       	st	X, r1
     3bc:	13 97       	sbiw	r26, 0x03	; 3
     3be:	14 96       	adiw	r26, 0x04	; 4
     3c0:	1c 92       	st	X, r1
     3c2:	14 97       	sbiw	r26, 0x04	; 4
     3c4:	15 96       	adiw	r26, 0x05	; 5
     3c6:	1c 92       	st	X, r1
     3c8:	86 e0       	ldi	r24, 0x06	; 6
     3ca:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <i>
		}
		
		iniciado=1;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <iniciado>
	}
	// Si el canal esta en uso retorna con 0 (error)
	if (seteados[cfg->canal] == 0)
     3d4:	20 81       	ld	r18, Z
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	d9 01       	movw	r26, r18
     3da:	aa 57       	subi	r26, 0x7A	; 122
     3dc:	be 4f       	sbci	r27, 0xFE	; 254
     3de:	8c 91       	ld	r24, X
     3e0:	88 23       	and	r24, r24
     3e2:	d9 f0       	breq	.+54     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		return 0;
	}
	seteados[cfg->canal] = 1;
     3e4:	d9 01       	movw	r26, r18
     3e6:	aa 57       	subi	r26, 0x7A	; 122
     3e8:	be 4f       	sbci	r27, 0xFE	; 254
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	8c 93       	st	X, r24
	canales[cfg->canal] = * cfg;
     3ee:	80 81       	ld	r24, Z
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	dc 01       	movw	r26, r24
     3f4:	aa 0f       	add	r26, r26
     3f6:	bb 1f       	adc	r27, r27
     3f8:	aa 0f       	add	r26, r26
     3fa:	bb 1f       	adc	r27, r27
     3fc:	a8 0f       	add	r26, r24
     3fe:	b9 1f       	adc	r27, r25
     400:	a4 57       	subi	r26, 0x74	; 116
     402:	be 4f       	sbci	r27, 0xFE	; 254
     404:	85 e0       	ldi	r24, 0x05	; 5
     406:	01 90       	ld	r0, Z+
     408:	0d 92       	st	X+, r0
     40a:	8a 95       	dec	r24
     40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	return 1;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	08 95       	ret
int adc_init(adc_cfg *cfg)
{
	// Si se ingresa un canal invalido se retorna 0 (error).
	if(cfg->canal>5)
	{
		return 0;
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	08 95       	ret
		iniciado=1;
	}
	// Si el canal esta en uso retorna con 0 (error)
	if (seteados[cfg->canal] == 0)
	{
		return 0;
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
	}
	seteados[cfg->canal] = 1;
	canales[cfg->canal] = * cfg;
	return 1;
}
     41e:	08 95       	ret

00000420 <__vector_21>:
{
	canales[fnLlamar].callback(valor_leido);
}

ISR (ADC_vect)
{
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	2f 93       	push	r18
     42c:	3f 93       	push	r19
     42e:	4f 93       	push	r20
     430:	5f 93       	push	r21
     432:	6f 93       	push	r22
     434:	7f 93       	push	r23
     436:	8f 93       	push	r24
     438:	9f 93       	push	r25
     43a:	af 93       	push	r26
     43c:	bf 93       	push	r27
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31
	if(contador>=100)
     442:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <contador>
     446:	84 36       	cpi	r24, 0x64	; 100
     448:	08 f4       	brcc	.+2      	; 0x44c <__vector_21+0x2c>
     44a:	40 c0       	rjmp	.+128    	; 0x4cc <__vector_21+0xac>
	{
		valor_leido = ADC;
     44c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     450:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     454:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <valor_leido+0x1>
     458:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <valor_leido>
		fnLlamar = canalConvirtiendo;
     45c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <canalConvirtiendo>
     460:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <fnLlamar>
		fnqueue_add(llamarCallback);
     464:	87 e9       	ldi	r24, 0x97	; 151
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 b8 02 	call	0x570	; 0x570 <_Z11fnqueue_addPFvvE>
		for(i=1;i<=6;i++)
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <i>
		{
			if(seteados[(canalConvirtiendo+i)&6]==1)
     472:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <canalConvirtiendo>
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	b9 01       	movw	r22, r18
     47a:	6f 5f       	subi	r22, 0xFF	; 255
     47c:	7f 4f       	sbci	r23, 0xFF	; 255
     47e:	fb 01       	movw	r30, r22
     480:	e6 70       	andi	r30, 0x06	; 6
     482:	ff 27       	eor	r31, r31
     484:	ea 57       	subi	r30, 0x7A	; 122
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	80 81       	ld	r24, Z
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	41 f5       	brne	.+80     	; 0x4de <__vector_21+0xbe>
     48e:	0b c0       	rjmp	.+22     	; 0x4a6 <__vector_21+0x86>
     490:	b9 01       	movw	r22, r18
     492:	f9 01       	movw	r30, r18
     494:	e6 70       	andi	r30, 0x06	; 6
     496:	ff 27       	eor	r31, r31
     498:	ea 57       	subi	r30, 0x7A	; 122
     49a:	fe 4f       	sbci	r31, 0xFE	; 254
     49c:	40 81       	ld	r20, Z
     49e:	41 30       	cpi	r20, 0x01	; 1
     4a0:	51 f4       	brne	.+20     	; 0x4b6 <__vector_21+0x96>
     4a2:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <i>
			{
				canalConvirtiendo=(canalConvirtiendo+i)%6;
     4a6:	cb 01       	movw	r24, r22
     4a8:	66 e0       	ldi	r22, 0x06	; 6
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	0e 94 2c 09 	call	0x1258	; 0x1258 <__divmodhi4>
     4b0:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <canalConvirtiendo>
				break;
     4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <__vector_21+0xa6>
	if(contador>=100)
	{
		valor_leido = ADC;
		fnLlamar = canalConvirtiendo;
		fnqueue_add(llamarCallback);
		for(i=1;i<=6;i++)
     4b6:	9f 5f       	subi	r25, 0xFF	; 255
     4b8:	2f 5f       	subi	r18, 0xFF	; 255
     4ba:	3f 4f       	sbci	r19, 0xFF	; 255
     4bc:	97 30       	cpi	r25, 0x07	; 7
     4be:	41 f7       	brne	.-48     	; 0x490 <__vector_21+0x70>
     4c0:	87 e0       	ldi	r24, 0x07	; 7
     4c2:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <i>
				canalConvirtiendo=(canalConvirtiendo+i)%6;
				break;
			}
		}
		//ADMUX |= canalConvirtiendo;
		contador = 0;
     4c6:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <contador>
     4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <__vector_21+0xb2>
	} else
	{
		contador++;
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <contador>

	}

	//Llamar a la proxima convercion AC.
	ADCSRA |= 1<<ADSC;
     4d2:	ea e7       	ldi	r30, 0x7A	; 122
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	80 64       	ori	r24, 0x40	; 64
     4da:	80 83       	st	Z, r24

     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <__vector_21+0xc6>
     4de:	2e 5f       	subi	r18, 0xFE	; 254
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
	if(contador>=100)
	{
		valor_leido = ADC;
		fnLlamar = canalConvirtiendo;
		fnqueue_add(llamarCallback);
		for(i=1;i<=6;i++)
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	d5 cf       	rjmp	.-86     	; 0x490 <__vector_21+0x70>
	}

	//Llamar a la proxima convercion AC.
	ADCSRA |= 1<<ADSC;

     4e6:	ff 91       	pop	r31
     4e8:	ef 91       	pop	r30
     4ea:	bf 91       	pop	r27
     4ec:	af 91       	pop	r26
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	7f 91       	pop	r23
     4f4:	6f 91       	pop	r22
     4f6:	5f 91       	pop	r21
     4f8:	4f 91       	pop	r20
     4fa:	3f 91       	pop	r19
     4fc:	2f 91       	pop	r18
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <_Z12fnqueue_initv>:
	fnqueue_tail,
	fnqueue_count;

bool fnqueue_init(void)
{
	fnqueue_head = 0;
     508:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <_ZL12fnqueue_head>
	fnqueue_tail = 0;
     50c:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <_ZL12fnqueue_tail>
	fnqueue_count = 0;
     510:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <_ZL13fnqueue_count>
    
    return true;
}
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	08 95       	ret

00000518 <_Z11fnqueue_runv>:

bool fnqueue_run(void)
{
    critical_begin();
     518:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14critical_beginv>
    if (fnqueue_count > 0)
     51c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_ZL13fnqueue_count>
     520:	88 23       	and	r24, r24
     522:	11 f1       	breq	.+68     	; 0x568 <_Z11fnqueue_runv+0x50>
    {
        critical_end();
     524:	0e 94 ab 00 	call	0x156	; 0x156 <_Z12critical_endv>

        fnqueue_functions[fnqueue_head]();
     528:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <_ZL12fnqueue_head>
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	ee 0f       	add	r30, r30
     530:	ff 1f       	adc	r31, r31
     532:	ef 54       	subi	r30, 0x4F	; 79
     534:	fe 4f       	sbci	r31, 0xFE	; 254
     536:	01 90       	ld	r0, Z+
     538:	f0 81       	ld	r31, Z
     53a:	e0 2d       	mov	r30, r0
     53c:	09 95       	icall
        critical_begin();
     53e:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14critical_beginv>
        fnqueue_head = (fnqueue_head + 1) % FNQUEUE_LENGTH;
     542:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <_ZL12fnqueue_head>
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	8f 70       	andi	r24, 0x0F	; 15
     54c:	90 78       	andi	r25, 0x80	; 128
     54e:	99 23       	and	r25, r25
     550:	24 f4       	brge	.+8      	; 0x55a <_Z11fnqueue_runv+0x42>
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	80 6f       	ori	r24, 0xF0	; 240
     556:	9f 6f       	ori	r25, 0xFF	; 255
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <_ZL12fnqueue_head>
        fnqueue_count--;
     55e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_ZL13fnqueue_count>
     562:	81 50       	subi	r24, 0x01	; 1
     564:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <_ZL13fnqueue_count>
    }
    critical_end();
     568:	0e 94 ab 00 	call	0x156	; 0x156 <_Z12critical_endv>

	return 1;
}
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	08 95       	ret

00000570 <_Z11fnqueue_addPFvvE>:

bool fnqueue_add(void (*function)(void))
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	ec 01       	movw	r28, r24
	bool result = false;
	
    critical_begin();
     576:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14critical_beginv>
    if (fnqueue_count < FNQUEUE_LENGTH)
     57a:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <_ZL13fnqueue_count>
     57e:	20 31       	cpi	r18, 0x10	; 16
     580:	d0 f4       	brcc	.+52     	; 0x5b6 <_Z11fnqueue_addPFvvE+0x46>
    {
        fnqueue_functions[fnqueue_tail] = function;
     582:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <_ZL12fnqueue_tail>
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	fc 01       	movw	r30, r24
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	ef 54       	subi	r30, 0x4F	; 79
     590:	fe 4f       	sbci	r31, 0xFE	; 254
     592:	d1 83       	std	Z+1, r29	; 0x01
     594:	c0 83       	st	Z, r28
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	8f 70       	andi	r24, 0x0F	; 15
     59a:	90 78       	andi	r25, 0x80	; 128
     59c:	99 23       	and	r25, r25
     59e:	24 f4       	brge	.+8      	; 0x5a8 <_Z11fnqueue_addPFvvE+0x38>
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	80 6f       	ori	r24, 0xF0	; 240
     5a4:	9f 6f       	ori	r25, 0xFF	; 255
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <_ZL12fnqueue_tail>
        fnqueue_count++;
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <_ZL13fnqueue_count>
        result = true;
     5b2:	c1 e0       	ldi	r28, 0x01	; 1
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <_Z11fnqueue_addPFvvE+0x48>
	return 1;
}

bool fnqueue_add(void (*function)(void))
{
	bool result = false;
     5b6:	c0 e0       	ldi	r28, 0x00	; 0
        fnqueue_functions[fnqueue_tail] = function;
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
        fnqueue_count++;
        result = true;
    }
    critical_end();
     5b8:	0e 94 ab 00 	call	0x156	; 0x156 <_Z12critical_endv>
    return result;
     5bc:	8c 2f       	mov	r24, r28
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <_ZN5Print17availableForWriteEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	08 95       	ret

000005ca <_ZN5Print5flushEv>:
     5ca:	08 95       	ret

000005cc <_ZN13LiquidCrystal11pulseEnableEv>:
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	8e 81       	ldd	r24, Y+6	; 0x06
     5d6:	0e 94 39 08 	call	0x1072	; 0x1072 <digitalWrite>
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 92 07 	call	0xf24	; 0xf24 <delayMicroseconds>
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	8e 81       	ldd	r24, Y+6	; 0x06
     5e6:	0e 94 39 08 	call	0x1072	; 0x1072 <digitalWrite>
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 92 07 	call	0xf24	; 0xf24 <delayMicroseconds>
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	8e 81       	ldd	r24, Y+6	; 0x06
     5f6:	0e 94 39 08 	call	0x1072	; 0x1072 <digitalWrite>
     5fa:	84 e6       	ldi	r24, 0x64	; 100
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 92 07 	call	0xf24	; 0xf24 <delayMicroseconds>
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <_ZN13LiquidCrystal10write4bitsEh>:
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	6c 01       	movw	r12, r24
     61a:	8c 01       	movw	r16, r24
     61c:	09 5f       	subi	r16, 0xF9	; 249
     61e:	1f 4f       	sbci	r17, 0xFF	; 255
     620:	c0 e0       	ldi	r28, 0x00	; 0
     622:	d0 e0       	ldi	r29, 0x00	; 0
     624:	e6 2e       	mov	r14, r22
     626:	f1 2c       	mov	r15, r1
     628:	b7 01       	movw	r22, r14
     62a:	0c 2e       	mov	r0, r28
     62c:	02 c0       	rjmp	.+4      	; 0x632 <_ZN13LiquidCrystal10write4bitsEh+0x2a>
     62e:	75 95       	asr	r23
     630:	67 95       	ror	r22
     632:	0a 94       	dec	r0
     634:	e2 f7       	brpl	.-8      	; 0x62e <_ZN13LiquidCrystal10write4bitsEh+0x26>
     636:	61 70       	andi	r22, 0x01	; 1
     638:	f8 01       	movw	r30, r16
     63a:	81 91       	ld	r24, Z+
     63c:	8f 01       	movw	r16, r30
     63e:	0e 94 39 08 	call	0x1072	; 0x1072 <digitalWrite>
     642:	21 96       	adiw	r28, 0x01	; 1
     644:	c4 30       	cpi	r28, 0x04	; 4
     646:	d1 05       	cpc	r29, r1
     648:	79 f7       	brne	.-34     	; 0x628 <_ZN13LiquidCrystal10write4bitsEh+0x20>
     64a:	c6 01       	movw	r24, r12
     64c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_ZN13LiquidCrystal11pulseEnableEv>
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	df 90       	pop	r13
     65e:	cf 90       	pop	r12
     660:	08 95       	ret

00000662 <_ZN13LiquidCrystal10write8bitsEh>:
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	6c 01       	movw	r12, r24
     674:	8c 01       	movw	r16, r24
     676:	09 5f       	subi	r16, 0xF9	; 249
     678:	1f 4f       	sbci	r17, 0xFF	; 255
     67a:	c0 e0       	ldi	r28, 0x00	; 0
     67c:	d0 e0       	ldi	r29, 0x00	; 0
     67e:	e6 2e       	mov	r14, r22
     680:	f1 2c       	mov	r15, r1
     682:	b7 01       	movw	r22, r14
     684:	0c 2e       	mov	r0, r28
     686:	02 c0       	rjmp	.+4      	; 0x68c <_ZN13LiquidCrystal10write8bitsEh+0x2a>
     688:	75 95       	asr	r23
     68a:	67 95       	ror	r22
     68c:	0a 94       	dec	r0
     68e:	e2 f7       	brpl	.-8      	; 0x688 <_ZN13LiquidCrystal10write8bitsEh+0x26>
     690:	61 70       	andi	r22, 0x01	; 1
     692:	f8 01       	movw	r30, r16
     694:	81 91       	ld	r24, Z+
     696:	8f 01       	movw	r16, r30
     698:	0e 94 39 08 	call	0x1072	; 0x1072 <digitalWrite>
     69c:	21 96       	adiw	r28, 0x01	; 1
     69e:	c8 30       	cpi	r28, 0x08	; 8
     6a0:	d1 05       	cpc	r29, r1
     6a2:	79 f7       	brne	.-34     	; 0x682 <_ZN13LiquidCrystal10write8bitsEh+0x20>
     6a4:	c6 01       	movw	r24, r12
     6a6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_ZN13LiquidCrystal11pulseEnableEv>
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	ef 90       	pop	r14
     6b6:	df 90       	pop	r13
     6b8:	cf 90       	pop	r12
     6ba:	08 95       	ret

000006bc <_ZN13LiquidCrystal4sendEhh>:
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
     6c4:	16 2f       	mov	r17, r22
     6c6:	64 2f       	mov	r22, r20
     6c8:	8c 81       	ldd	r24, Y+4	; 0x04
     6ca:	0e 94 39 08 	call	0x1072	; 0x1072 <digitalWrite>
     6ce:	8d 81       	ldd	r24, Y+5	; 0x05
     6d0:	8f 3f       	cpi	r24, 0xFF	; 255
     6d2:	19 f0       	breq	.+6      	; 0x6da <_ZN13LiquidCrystal4sendEhh+0x1e>
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	0e 94 39 08 	call	0x1072	; 0x1072 <digitalWrite>
     6da:	8f 85       	ldd	r24, Y+15	; 0x0f
     6dc:	84 ff       	sbrs	r24, 4
     6de:	05 c0       	rjmp	.+10     	; 0x6ea <_ZN13LiquidCrystal4sendEhh+0x2e>
     6e0:	61 2f       	mov	r22, r17
     6e2:	ce 01       	movw	r24, r28
     6e4:	0e 94 31 03 	call	0x662	; 0x662 <_ZN13LiquidCrystal10write8bitsEh>
     6e8:	11 c0       	rjmp	.+34     	; 0x70c <_ZN13LiquidCrystal4sendEhh+0x50>
     6ea:	61 2f       	mov	r22, r17
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	75 95       	asr	r23
     6f0:	67 95       	ror	r22
     6f2:	75 95       	asr	r23
     6f4:	67 95       	ror	r22
     6f6:	75 95       	asr	r23
     6f8:	67 95       	ror	r22
     6fa:	75 95       	asr	r23
     6fc:	67 95       	ror	r22
     6fe:	ce 01       	movw	r24, r28
     700:	0e 94 04 03 	call	0x608	; 0x608 <_ZN13LiquidCrystal10write4bitsEh>
     704:	61 2f       	mov	r22, r17
     706:	ce 01       	movw	r24, r28
     708:	0e 94 04 03 	call	0x608	; 0x608 <_ZN13LiquidCrystal10write4bitsEh>
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	08 95       	ret

00000714 <_ZN13LiquidCrystal5clearEv>:
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN13LiquidCrystal4sendEhh>
     71c:	80 ed       	ldi	r24, 0xD0	; 208
     71e:	97 e0       	ldi	r25, 0x07	; 7
     720:	0e 94 92 07 	call	0xf24	; 0xf24 <delayMicroseconds>
     724:	08 95       	ret

00000726 <_ZN13LiquidCrystal9setCursorEhh>:
     726:	fc 01       	movw	r30, r24
     728:	44 30       	cpi	r20, 0x04	; 4
     72a:	08 f0       	brcs	.+2      	; 0x72e <_ZN13LiquidCrystal9setCursorEhh+0x8>
     72c:	43 e0       	ldi	r20, 0x03	; 3
     72e:	83 89       	ldd	r24, Z+19	; 0x13
     730:	48 17       	cp	r20, r24
     732:	10 f0       	brcs	.+4      	; 0x738 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     734:	4f ef       	ldi	r20, 0xFF	; 255
     736:	48 0f       	add	r20, r24
     738:	df 01       	movw	r26, r30
     73a:	a4 0f       	add	r26, r20
     73c:	b1 1d       	adc	r27, r1
     73e:	54 96       	adiw	r26, 0x14	; 20
     740:	9c 91       	ld	r25, X
     742:	69 0f       	add	r22, r25
     744:	60 68       	ori	r22, 0x80	; 128
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	cf 01       	movw	r24, r30
     74a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN13LiquidCrystal4sendEhh>
     74e:	08 95       	ret

00000750 <_ZN13LiquidCrystal7displayEv>:
     750:	fc 01       	movw	r30, r24
     752:	60 89       	ldd	r22, Z+16	; 0x10
     754:	26 2f       	mov	r18, r22
     756:	24 60       	ori	r18, 0x04	; 4
     758:	20 8b       	std	Z+16, r18	; 0x10
     75a:	6c 60       	ori	r22, 0x0C	; 12
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN13LiquidCrystal4sendEhh>
     762:	08 95       	ret

00000764 <_ZN13LiquidCrystal5beginEhhh>:
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	ec 01       	movw	r28, r24
     77a:	42 30       	cpi	r20, 0x02	; 2
     77c:	18 f0       	brcs	.+6      	; 0x784 <_ZN13LiquidCrystal5beginEhhh+0x20>
     77e:	8f 85       	ldd	r24, Y+15	; 0x0f
     780:	88 60       	ori	r24, 0x08	; 8
     782:	8f 87       	std	Y+15, r24	; 0x0f
     784:	4b 8b       	std	Y+19, r20	; 0x13
     786:	1c 8a       	std	Y+20, r1	; 0x14
     788:	80 e4       	ldi	r24, 0x40	; 64
     78a:	8d 8b       	std	Y+21, r24	; 0x15
     78c:	6e 8b       	std	Y+22, r22	; 0x16
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	60 5c       	subi	r22, 0xC0	; 192
     792:	7f 4f       	sbci	r23, 0xFF	; 255
     794:	6f 8b       	std	Y+23, r22	; 0x17
     796:	22 23       	and	r18, r18
     798:	29 f0       	breq	.+10     	; 0x7a4 <_ZN13LiquidCrystal5beginEhhh+0x40>
     79a:	41 30       	cpi	r20, 0x01	; 1
     79c:	19 f4       	brne	.+6      	; 0x7a4 <_ZN13LiquidCrystal5beginEhhh+0x40>
     79e:	8f 85       	ldd	r24, Y+15	; 0x0f
     7a0:	84 60       	ori	r24, 0x04	; 4
     7a2:	8f 87       	std	Y+15, r24	; 0x0f
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	8c 81       	ldd	r24, Y+4	; 0x04
     7a8:	0e 94 00 08 	call	0x1000	; 0x1000 <pinMode>
     7ac:	8d 81       	ldd	r24, Y+5	; 0x05
     7ae:	8f 3f       	cpi	r24, 0xFF	; 255
     7b0:	19 f0       	breq	.+6      	; 0x7b8 <_ZN13LiquidCrystal5beginEhhh+0x54>
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	0e 94 00 08 	call	0x1000	; 0x1000 <pinMode>
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	8e 81       	ldd	r24, Y+6	; 0x06
     7bc:	0e 94 00 08 	call	0x1000	; 0x1000 <pinMode>
     7c0:	7e 01       	movw	r14, r28
     7c2:	87 e0       	ldi	r24, 0x07	; 7
     7c4:	e8 0e       	add	r14, r24
     7c6:	f1 1c       	adc	r15, r1
     7c8:	00 e0       	ldi	r16, 0x00	; 0
     7ca:	10 e0       	ldi	r17, 0x00	; 0
     7cc:	68 94       	set
     7ce:	aa 24       	eor	r10, r10
     7d0:	a3 f8       	bld	r10, 3
     7d2:	b1 2c       	mov	r11, r1
     7d4:	68 94       	set
     7d6:	cc 24       	eor	r12, r12
     7d8:	c2 f8       	bld	r12, 2
     7da:	d1 2c       	mov	r13, r1
     7dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     7de:	84 fd       	sbrc	r24, 4
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <_ZN13LiquidCrystal5beginEhhh+0x84>
     7e2:	8c 2d       	mov	r24, r12
     7e4:	9d 2d       	mov	r25, r13
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <_ZN13LiquidCrystal5beginEhhh+0x88>
     7e8:	8a 2d       	mov	r24, r10
     7ea:	9b 2d       	mov	r25, r11
     7ec:	08 17       	cp	r16, r24
     7ee:	19 07       	cpc	r17, r25
     7f0:	4c f4       	brge	.+18     	; 0x804 <_ZN13LiquidCrystal5beginEhhh+0xa0>
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	f7 01       	movw	r30, r14
     7f6:	81 91       	ld	r24, Z+
     7f8:	7f 01       	movw	r14, r30
     7fa:	0e 94 00 08 	call	0x1000	; 0x1000 <pinMode>
     7fe:	0f 5f       	subi	r16, 0xFF	; 255
     800:	1f 4f       	sbci	r17, 0xFF	; 255
     802:	ec cf       	rjmp	.-40     	; 0x7dc <_ZN13LiquidCrystal5beginEhhh+0x78>
     804:	80 e5       	ldi	r24, 0x50	; 80
     806:	93 ec       	ldi	r25, 0xC3	; 195
     808:	0e 94 92 07 	call	0xf24	; 0xf24 <delayMicroseconds>
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	8c 81       	ldd	r24, Y+4	; 0x04
     810:	0e 94 39 08 	call	0x1072	; 0x1072 <digitalWrite>
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	8e 81       	ldd	r24, Y+6	; 0x06
     818:	0e 94 39 08 	call	0x1072	; 0x1072 <digitalWrite>
     81c:	8d 81       	ldd	r24, Y+5	; 0x05
     81e:	8f 3f       	cpi	r24, 0xFF	; 255
     820:	19 f0       	breq	.+6      	; 0x828 <_ZN13LiquidCrystal5beginEhhh+0xc4>
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	0e 94 39 08 	call	0x1072	; 0x1072 <digitalWrite>
     828:	6f 85       	ldd	r22, Y+15	; 0x0f
     82a:	64 fd       	sbrc	r22, 4
     82c:	1d c0       	rjmp	.+58     	; 0x868 <_ZN13LiquidCrystal5beginEhhh+0x104>
     82e:	63 e0       	ldi	r22, 0x03	; 3
     830:	ce 01       	movw	r24, r28
     832:	0e 94 04 03 	call	0x608	; 0x608 <_ZN13LiquidCrystal10write4bitsEh>
     836:	84 e9       	ldi	r24, 0x94	; 148
     838:	91 e1       	ldi	r25, 0x11	; 17
     83a:	0e 94 92 07 	call	0xf24	; 0xf24 <delayMicroseconds>
     83e:	63 e0       	ldi	r22, 0x03	; 3
     840:	ce 01       	movw	r24, r28
     842:	0e 94 04 03 	call	0x608	; 0x608 <_ZN13LiquidCrystal10write4bitsEh>
     846:	84 e9       	ldi	r24, 0x94	; 148
     848:	91 e1       	ldi	r25, 0x11	; 17
     84a:	0e 94 92 07 	call	0xf24	; 0xf24 <delayMicroseconds>
     84e:	63 e0       	ldi	r22, 0x03	; 3
     850:	ce 01       	movw	r24, r28
     852:	0e 94 04 03 	call	0x608	; 0x608 <_ZN13LiquidCrystal10write4bitsEh>
     856:	86 e9       	ldi	r24, 0x96	; 150
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 92 07 	call	0xf24	; 0xf24 <delayMicroseconds>
     85e:	62 e0       	ldi	r22, 0x02	; 2
     860:	ce 01       	movw	r24, r28
     862:	0e 94 04 03 	call	0x608	; 0x608 <_ZN13LiquidCrystal10write4bitsEh>
     866:	19 c0       	rjmp	.+50     	; 0x89a <_ZN13LiquidCrystal5beginEhhh+0x136>
     868:	60 62       	ori	r22, 0x20	; 32
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	ce 01       	movw	r24, r28
     86e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN13LiquidCrystal4sendEhh>
     872:	84 e9       	ldi	r24, 0x94	; 148
     874:	91 e1       	ldi	r25, 0x11	; 17
     876:	0e 94 92 07 	call	0xf24	; 0xf24 <delayMicroseconds>
     87a:	6f 85       	ldd	r22, Y+15	; 0x0f
     87c:	60 62       	ori	r22, 0x20	; 32
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	ce 01       	movw	r24, r28
     882:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN13LiquidCrystal4sendEhh>
     886:	86 e9       	ldi	r24, 0x96	; 150
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 92 07 	call	0xf24	; 0xf24 <delayMicroseconds>
     88e:	6f 85       	ldd	r22, Y+15	; 0x0f
     890:	60 62       	ori	r22, 0x20	; 32
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	ce 01       	movw	r24, r28
     896:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN13LiquidCrystal4sendEhh>
     89a:	6f 85       	ldd	r22, Y+15	; 0x0f
     89c:	60 62       	ori	r22, 0x20	; 32
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	ce 01       	movw	r24, r28
     8a2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN13LiquidCrystal4sendEhh>
     8a6:	84 e0       	ldi	r24, 0x04	; 4
     8a8:	88 8b       	std	Y+16, r24	; 0x10
     8aa:	ce 01       	movw	r24, r28
     8ac:	0e 94 a8 03 	call	0x750	; 0x750 <_ZN13LiquidCrystal7displayEv>
     8b0:	ce 01       	movw	r24, r28
     8b2:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN13LiquidCrystal5clearEv>
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	89 8b       	std	Y+17, r24	; 0x11
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	66 e0       	ldi	r22, 0x06	; 6
     8be:	ce 01       	movw	r24, r28
     8c0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN13LiquidCrystal4sendEhh>
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
     8d4:	bf 90       	pop	r11
     8d6:	af 90       	pop	r10
     8d8:	08 95       	ret

000008da <_ZN13LiquidCrystalC1Ehhhhhh>:
     8da:	cf 92       	push	r12
     8dc:	ef 92       	push	r14
     8de:	0f 93       	push	r16
     8e0:	fc 01       	movw	r30, r24
     8e2:	13 82       	std	Z+3, r1	; 0x03
     8e4:	12 82       	std	Z+2, r1	; 0x02
     8e6:	87 e0       	ldi	r24, 0x07	; 7
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	91 83       	std	Z+1, r25	; 0x01
     8ec:	80 83       	st	Z, r24
     8ee:	64 83       	std	Z+4, r22	; 0x04
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	85 83       	std	Z+5, r24	; 0x05
     8f4:	46 83       	std	Z+6, r20	; 0x06
     8f6:	27 83       	std	Z+7, r18	; 0x07
     8f8:	00 87       	std	Z+8, r16	; 0x08
     8fa:	e1 86       	std	Z+9, r14	; 0x09
     8fc:	c2 86       	std	Z+10, r12	; 0x0a
     8fe:	13 86       	std	Z+11, r1	; 0x0b
     900:	14 86       	std	Z+12, r1	; 0x0c
     902:	15 86       	std	Z+13, r1	; 0x0d
     904:	16 86       	std	Z+14, r1	; 0x0e
     906:	17 86       	std	Z+15, r1	; 0x0f
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	41 e0       	ldi	r20, 0x01	; 1
     90c:	60 e1       	ldi	r22, 0x10	; 16
     90e:	cf 01       	movw	r24, r30
     910:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN13LiquidCrystal5beginEhhh>
     914:	0f 91       	pop	r16
     916:	ef 90       	pop	r14
     918:	cf 90       	pop	r12
     91a:	08 95       	ret

0000091c <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	08 95       	ret

00000928 <_Z12up_keySelectv>:
	temperaturaMedida=valor;
	guardarTemp(valor);
}

void up_keySelect()
{
     928:	08 95       	ret

0000092a <_Z10down_keyUpv>:
	
}

void down_keyUp()
{
     92a:	08 95       	ret

0000092c <_Z12down_keyDownv>:
	
}

void down_keyDown()
{
     92c:	08 95       	ret

0000092e <_Z12down_keyLeftv>:
	
}

void down_keyLeft()
{
     92e:	08 95       	ret

00000930 <_Z13down_keyRightv>:
	
}

void down_keyRight()
{
     930:	08 95       	ret

00000932 <_Z14down_keySelectv>:
	
}

void down_keySelect()
{
     932:	08 95       	ret

00000934 <_Z11guardarTempa>:
/************************************************************************/
/*                          AUXILIARES                                  */
/************************************************************************/
void guardarTemp(int8_t temp)
{
	temps[indiceArreglo]=temp;
     934:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <_ZL13indiceArreglo>
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	f9 01       	movw	r30, r18
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	e2 51       	subi	r30, 0x12	; 18
     942:	fe 4f       	sbci	r31, 0xFE	; 254
     944:	08 2e       	mov	r0, r24
     946:	00 0c       	add	r0, r0
     948:	99 0b       	sbc	r25, r25
     94a:	91 83       	std	Z+1, r25	; 0x01
     94c:	80 83       	st	Z, r24
	indiceArreglo=(indiceArreglo+1)%100;
     94e:	c9 01       	movw	r24, r18
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	64 e6       	ldi	r22, 0x64	; 100
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	0e 94 2c 09 	call	0x1258	; 0x1258 <__divmodhi4>
     95a:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <_ZL13indiceArreglo>
	if (cantTemps<=100)
     95e:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <_ZL9cantTemps>
     962:	85 36       	cpi	r24, 0x65	; 101
     964:	18 f4       	brcc	.+6      	; 0x96c <_Z11guardarTempa+0x38>
		cantTemps++;
     966:	8f 5f       	subi	r24, 0xFF	; 255
     968:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <_ZL9cantTemps>
     96c:	08 95       	ret

0000096e <_Z14tomar_medicioni>:
	showMinTemp();
}

void tomar_medicion(int valor)
{
	temperaturaMedida=valor;
     96e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <_ZL17temperaturaMedida>
     972:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <_ZL17temperaturaMedida+0x1>
	guardarTemp(valor);
     976:	0e 94 9a 04 	call	0x934	; 0x934 <_Z11guardarTempa>
     97a:	08 95       	ret

0000097c <_Z17updateCurrentTempv>:
		cantTemps++;
}

void updateCurrentTemp()
{
	tempActual=temperaturaMedida;
     97c:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <_ZL17temperaturaMedida>
     980:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <_ZL10tempActual>
     984:	08 95       	ret

00000986 <_Z17updateAverageTempv>:
}
void updateAverageTemp()
{
	int16_t sumaTemps=0;
	tempPromedio=0;
     986:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <_ZL12tempPromedio>
	if(cantTemps>0)
     98a:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <_ZL9cantTemps>
     98e:	66 23       	and	r22, r22
     990:	e1 f0       	breq	.+56     	; 0x9ca <_Z17updateAverageTempv+0x44>
	{
		for(int i = 0; i<indiceArreglo; i++)
     992:	40 91 e9 01 	lds	r20, 0x01E9	; 0x8001e9 <_ZL13indiceArreglo>
     996:	44 23       	and	r20, r20
     998:	89 f0       	breq	.+34     	; 0x9bc <_Z17updateAverageTempv+0x36>
     99a:	ee ee       	ldi	r30, 0xEE	; 238
     99c:	f1 e0       	ldi	r31, 0x01	; 1
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	44 0f       	add	r20, r20
     9a2:	55 1f       	adc	r21, r21
     9a4:	42 51       	subi	r20, 0x12	; 18
     9a6:	5e 4f       	sbci	r21, 0xFE	; 254
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
		{
			sumaTemps+=temps[i];
     9ac:	21 91       	ld	r18, Z+
     9ae:	31 91       	ld	r19, Z+
     9b0:	82 0f       	add	r24, r18
     9b2:	93 1f       	adc	r25, r19
{
	int16_t sumaTemps=0;
	tempPromedio=0;
	if(cantTemps>0)
	{
		for(int i = 0; i<indiceArreglo; i++)
     9b4:	e4 17       	cp	r30, r20
     9b6:	f5 07       	cpc	r31, r21
     9b8:	c9 f7       	brne	.-14     	; 0x9ac <_Z17updateAverageTempv+0x26>
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <_Z17updateAverageTempv+0x3a>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
		{
			sumaTemps+=temps[i];
		}
		tempPromedio=sumaTemps/cantTemps;
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	0e 94 2c 09 	call	0x1258	; 0x1258 <__divmodhi4>
     9c6:	60 93 eb 01 	sts	0x01EB, r22	; 0x8001eb <_ZL12tempPromedio>
     9ca:	08 95       	ret

000009cc <_Z13updateMaxTempv>:
	}
}
void updateMaxTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     9cc:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <_ZL13indiceArreglo>
     9d0:	66 23       	and	r22, r22
     9d2:	b1 f0       	breq	.+44     	; 0xa00 <_Z13updateMaxTempv+0x34>
     9d4:	40 91 ec 01 	lds	r20, 0x01EC	; 0x8001ec <_ZL7tempMax>
     9d8:	ee ee       	ldi	r30, 0xEE	; 238
     9da:	f1 e0       	ldi	r31, 0x01	; 1
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	66 0f       	add	r22, r22
     9e0:	77 1f       	adc	r23, r23
     9e2:	62 51       	subi	r22, 0x12	; 18
     9e4:	7e 4f       	sbci	r23, 0xFE	; 254
	{
		if (temps[i]>tempMax)
     9e6:	81 91       	ld	r24, Z+
     9e8:	91 91       	ld	r25, Z+
     9ea:	24 2f       	mov	r18, r20
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	28 17       	cp	r18, r24
     9f0:	39 07       	cpc	r19, r25
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <_Z13updateMaxTempv+0x2a>
		{
			tempMax=temps[i];
     9f4:	48 2f       	mov	r20, r24
		tempPromedio=sumaTemps/cantTemps;
	}
}
void updateMaxTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     9f6:	e6 17       	cp	r30, r22
     9f8:	f7 07       	cpc	r31, r23
     9fa:	a9 f7       	brne	.-22     	; 0x9e6 <_Z13updateMaxTempv+0x1a>
     9fc:	40 93 ec 01 	sts	0x01EC, r20	; 0x8001ec <_ZL7tempMax>
     a00:	08 95       	ret

00000a02 <_Z13updateMinTempv>:
		}
	}
}
void updateMinTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     a02:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <_ZL13indiceArreglo>
     a06:	66 23       	and	r22, r22
     a08:	b1 f0       	breq	.+44     	; 0xa36 <_Z13updateMinTempv+0x34>
     a0a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL7tempMin>
     a0e:	ee ee       	ldi	r30, 0xEE	; 238
     a10:	f1 e0       	ldi	r31, 0x01	; 1
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	66 0f       	add	r22, r22
     a16:	77 1f       	adc	r23, r23
     a18:	62 51       	subi	r22, 0x12	; 18
     a1a:	7e 4f       	sbci	r23, 0xFE	; 254
	{
		if (temps[i]<tempMin)
     a1c:	81 91       	ld	r24, Z+
     a1e:	91 91       	ld	r25, Z+
     a20:	24 2f       	mov	r18, r20
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	82 17       	cp	r24, r18
     a26:	93 07       	cpc	r25, r19
     a28:	08 f4       	brcc	.+2      	; 0xa2c <_Z13updateMinTempv+0x2a>
		{
			tempMin=temps[i];
     a2a:	48 2f       	mov	r20, r24
		}
	}
}
void updateMinTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     a2c:	e6 17       	cp	r30, r22
     a2e:	f7 07       	cpc	r31, r23
     a30:	a9 f7       	brne	.-22     	; 0xa1c <_Z13updateMinTempv+0x1a>
     a32:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <_ZL7tempMin>
     a36:	08 95       	ret

00000a38 <_Z15showCurrentTempv>:
		}
	}
}
void showCurrentTemp()
{
	lcd.setCursor(0,0);
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	81 ed       	ldi	r24, 0xD1	; 209
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	0e 94 93 03 	call	0x726	; 0x726 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Actual");
     a44:	6f e0       	ldi	r22, 0x0F	; 15
     a46:	71 e0       	ldi	r23, 0x01	; 1
     a48:	81 ed       	ldi	r24, 0xD1	; 209
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     a50:	41 e0       	ldi	r20, 0x01	; 1
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	81 ed       	ldi	r24, 0xD1	; 209
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	0e 94 93 03 	call	0x726	; 0x726 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempActual);
     a5c:	4a e0       	ldi	r20, 0x0A	; 10
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <_ZL10tempActual>
     a64:	81 ed       	ldi	r24, 0xD1	; 209
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN5Print5printEhi>
     a6c:	08 95       	ret

00000a6e <_Z10up_keyLeftv>:
/*                           CALLBACKS                                  */
/************************************************************************/

void up_keyLeft()
{
	updateCurrentTemp();
     a6e:	0e 94 be 04 	call	0x97c	; 0x97c <_Z17updateCurrentTempv>
	showCurrentTemp();
     a72:	0e 94 1c 05 	call	0xa38	; 0xa38 <_Z15showCurrentTempv>
     a76:	08 95       	ret

00000a78 <_Z15showAverageTempv>:
	lcd.print(tempActual);
}

void showAverageTemp()
{
	lcd.setCursor(0,0);
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	81 ed       	ldi	r24, 0xD1	; 209
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 93 03 	call	0x726	; 0x726 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Promedio");
     a84:	6b e1       	ldi	r22, 0x1B	; 27
     a86:	71 e0       	ldi	r23, 0x01	; 1
     a88:	81 ed       	ldi	r24, 0xD1	; 209
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     a90:	41 e0       	ldi	r20, 0x01	; 1
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	81 ed       	ldi	r24, 0xD1	; 209
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 93 03 	call	0x726	; 0x726 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempPromedio);
     a9c:	4a e0       	ldi	r20, 0x0A	; 10
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <_ZL12tempPromedio>
     aa4:	81 ed       	ldi	r24, 0xD1	; 209
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN5Print5printEhi>
     aac:	08 95       	ret

00000aae <_Z11up_keyRightv>:
	showCurrentTemp();
}

void up_keyRight()
{
	updateAverageTemp();
     aae:	0e 94 c3 04 	call	0x986	; 0x986 <_Z17updateAverageTempv>
	showAverageTemp();
     ab2:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z15showAverageTempv>
     ab6:	08 95       	ret

00000ab8 <_Z11showMaxTempv>:
	lcd.print(tempPromedio);
}

void showMaxTemp()
{
	lcd.setCursor(0,0);
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	81 ed       	ldi	r24, 0xD1	; 209
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	0e 94 93 03 	call	0x726	; 0x726 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Maxima");
     ac4:	69 e2       	ldi	r22, 0x29	; 41
     ac6:	71 e0       	ldi	r23, 0x01	; 1
     ac8:	81 ed       	ldi	r24, 0xD1	; 209
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     ad0:	41 e0       	ldi	r20, 0x01	; 1
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	81 ed       	ldi	r24, 0xD1	; 209
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0e 94 93 03 	call	0x726	; 0x726 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempMax);
     adc:	4a e0       	ldi	r20, 0x0A	; 10
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <_ZL7tempMax>
     ae4:	81 ed       	ldi	r24, 0xD1	; 209
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN5Print5printEhi>
     aec:	08 95       	ret

00000aee <_Z8up_keyUpv>:
	showAverageTemp();
}

void up_keyUp()
{
	updateMaxTemp();
     aee:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_Z13updateMaxTempv>
	showMaxTemp();
     af2:	0e 94 5c 05 	call	0xab8	; 0xab8 <_Z11showMaxTempv>
     af6:	08 95       	ret

00000af8 <_Z11showMinTempv>:
	lcd.print(tempMax);
}

void showMinTemp()
{
	lcd.setCursor(0,0);
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	81 ed       	ldi	r24, 0xD1	; 209
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	0e 94 93 03 	call	0x726	; 0x726 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Minima");
     b04:	65 e3       	ldi	r22, 0x35	; 53
     b06:	71 e0       	ldi	r23, 0x01	; 1
     b08:	81 ed       	ldi	r24, 0xD1	; 209
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     b10:	41 e0       	ldi	r20, 0x01	; 1
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	81 ed       	ldi	r24, 0xD1	; 209
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	0e 94 93 03 	call	0x726	; 0x726 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempMin);
     b1c:	4a e0       	ldi	r20, 0x0A	; 10
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_ZL7tempMin>
     b24:	81 ed       	ldi	r24, 0xD1	; 209
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN5Print5printEhi>
     b2c:	08 95       	ret

00000b2e <_Z10up_keyDownv>:
	showMaxTemp();
}

void up_keyDown()
{
	updateMinTemp();
     b2e:	0e 94 01 05 	call	0xa02	; 0xa02 <_Z13updateMinTempv>
	showMinTemp();
     b32:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z11showMinTempv>
     b36:	08 95       	ret

00000b38 <setup>:

}

void setup()
{
	fnqueue_init();
     b38:	0e 94 84 02 	call	0x508	; 0x508 <_Z12fnqueue_initv>
	
	
	lcd.setCursor(0,0);
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	81 ed       	ldi	r24, 0xD1	; 209
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 93 03 	call	0x726	; 0x726 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Ta            ");
     b48:	61 e4       	ldi	r22, 0x41	; 65
     b4a:	71 e0       	ldi	r23, 0x01	; 1
     b4c:	81 ed       	ldi	r24, 0xD1	; 209
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN5Print5printEPKc>
	
	// Define los callbacks de cada Tecla
	key_up_callback( up_keyUp, TECLA0);
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	87 e7       	ldi	r24, 0x77	; 119
     b5a:	95 e0       	ldi	r25, 0x05	; 5
     b5c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyUp, TECLA0);
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	85 e9       	ldi	r24, 0x95	; 149
     b66:	94 e0       	ldi	r25, 0x04	; 4
     b68:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keyDown, TECLA1);
     b6c:	62 e0       	ldi	r22, 0x02	; 2
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	87 e9       	ldi	r24, 0x97	; 151
     b72:	95 e0       	ldi	r25, 0x05	; 5
     b74:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyDown, TECLA1);
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	86 e9       	ldi	r24, 0x96	; 150
     b7e:	94 e0       	ldi	r25, 0x04	; 4
     b80:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keyLeft, TECLA2);
     b84:	63 e0       	ldi	r22, 0x03	; 3
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	87 e3       	ldi	r24, 0x37	; 55
     b8a:	95 e0       	ldi	r25, 0x05	; 5
     b8c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyLeft, TECLA2);
     b90:	63 e0       	ldi	r22, 0x03	; 3
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	87 e9       	ldi	r24, 0x97	; 151
     b96:	94 e0       	ldi	r25, 0x04	; 4
     b98:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keyRight, TECLA3);
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	87 e5       	ldi	r24, 0x57	; 87
     ba2:	95 e0       	ldi	r25, 0x05	; 5
     ba4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyRight, TECLA3);
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	88 e9       	ldi	r24, 0x98	; 152
     bae:	94 e0       	ldi	r25, 0x04	; 4
     bb0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keySelect, TECLA4);
     bb4:	64 e0       	ldi	r22, 0x04	; 4
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	84 e9       	ldi	r24, 0x94	; 148
     bba:	94 e0       	ldi	r25, 0x04	; 4
     bbc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keySelect, TECLA4);
     bc0:	64 e0       	ldi	r22, 0x04	; 4
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	89 e9       	ldi	r24, 0x99	; 153
     bc6:	94 e0       	ldi	r25, 0x04	; 4
     bc8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z17key_down_callbackPFvvEi>
	
	//callback del sensor
	medicion_callback(tomar_medicion);
     bcc:	87 eb       	ldi	r24, 0xB7	; 183
     bce:	94 e0       	ldi	r25, 0x04	; 4
     bd0:	0e 94 01 01 	call	0x202	; 0x202 <_Z17medicion_callbackPFviE>
	
	
	teclado_setup();
     bd4:	0e 94 8b 01 	call	0x316	; 0x316 <_Z13teclado_setupv>
	sensor_setup();
     bd8:	0e 94 06 01 	call	0x20c	; 0x20c <_Z12sensor_setupv>
     bdc:	ee ee       	ldi	r30, 0xEE	; 238
     bde:	f1 e0       	ldi	r31, 0x01	; 1
     be0:	86 eb       	ldi	r24, 0xB6	; 182
     be2:	92 e0       	ldi	r25, 0x02	; 2
	
	
	// Inicializa las temps
	for(int i = 0; i<MAX_TEMPS; i++)
		temps[i] = 0;
     be4:	11 92       	st	Z+, r1
     be6:	11 92       	st	Z+, r1
	teclado_setup();
	sensor_setup();
	
	
	// Inicializa las temps
	for(int i = 0; i<MAX_TEMPS; i++)
     be8:	e8 17       	cp	r30, r24
     bea:	f9 07       	cpc	r31, r25
     bec:	d9 f7       	brne	.-10     	; 0xbe4 <setup+0xac>
		temps[i] = 0;
	
	
	lcd.setCursor(0,0);
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	81 ed       	ldi	r24, 0xD1	; 209
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 93 03 	call	0x726	; 0x726 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Te           ");
     bfa:	60 e5       	ldi	r22, 0x50	; 80
     bfc:	71 e0       	ldi	r23, 0x01	; 1
     bfe:	81 ed       	ldi	r24, 0xD1	; 209
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN5Print5printEPKc>
     c06:	08 95       	ret

00000c08 <loop>:

}

void loop()
{
	fnqueue_run();
     c08:	0e 94 8c 02 	call	0x518	; 0x518 <_Z11fnqueue_runv>
     c0c:	08 95       	ret

00000c0e <_GLOBAL__sub_I_lcd>:
}
     c0e:	cf 92       	push	r12
     c10:	ef 92       	push	r14
     c12:	0f 93       	push	r16
static uint8_t tempPromedio = 0;

static uint8_t cantTemps = 0;
static uint8_t indiceArreglo = 0;

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
     c14:	0f 2e       	mov	r0, r31
     c16:	f7 e0       	ldi	r31, 0x07	; 7
     c18:	cf 2e       	mov	r12, r31
     c1a:	f0 2d       	mov	r31, r0
     c1c:	0f 2e       	mov	r0, r31
     c1e:	f6 e0       	ldi	r31, 0x06	; 6
     c20:	ef 2e       	mov	r14, r31
     c22:	f0 2d       	mov	r31, r0
     c24:	05 e0       	ldi	r16, 0x05	; 5
     c26:	24 e0       	ldi	r18, 0x04	; 4
     c28:	49 e0       	ldi	r20, 0x09	; 9
     c2a:	68 e0       	ldi	r22, 0x08	; 8
     c2c:	81 ed       	ldi	r24, 0xD1	; 209
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN13LiquidCrystalC1Ehhhhhh>
}

void loop()
{
	fnqueue_run();
}
     c34:	0f 91       	pop	r16
     c36:	ef 90       	pop	r14
     c38:	cf 90       	pop	r12
     c3a:	08 95       	ret

00000c3c <__fixunssfsi>:
     c3c:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_splitA>
     c40:	88 f0       	brcs	.+34     	; 0xc64 <__fixunssfsi+0x28>
     c42:	9f 57       	subi	r25, 0x7F	; 127
     c44:	98 f0       	brcs	.+38     	; 0xc6c <__fixunssfsi+0x30>
     c46:	b9 2f       	mov	r27, r25
     c48:	99 27       	eor	r25, r25
     c4a:	b7 51       	subi	r27, 0x17	; 23
     c4c:	b0 f0       	brcs	.+44     	; 0xc7a <__fixunssfsi+0x3e>
     c4e:	e1 f0       	breq	.+56     	; 0xc88 <__fixunssfsi+0x4c>
     c50:	66 0f       	add	r22, r22
     c52:	77 1f       	adc	r23, r23
     c54:	88 1f       	adc	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	1a f0       	brmi	.+6      	; 0xc60 <__fixunssfsi+0x24>
     c5a:	ba 95       	dec	r27
     c5c:	c9 f7       	brne	.-14     	; 0xc50 <__fixunssfsi+0x14>
     c5e:	14 c0       	rjmp	.+40     	; 0xc88 <__fixunssfsi+0x4c>
     c60:	b1 30       	cpi	r27, 0x01	; 1
     c62:	91 f0       	breq	.+36     	; 0xc88 <__fixunssfsi+0x4c>
     c64:	0e 94 ac 06 	call	0xd58	; 0xd58 <__fp_zero>
     c68:	b1 e0       	ldi	r27, 0x01	; 1
     c6a:	08 95       	ret
     c6c:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__fp_zero>
     c70:	67 2f       	mov	r22, r23
     c72:	78 2f       	mov	r23, r24
     c74:	88 27       	eor	r24, r24
     c76:	b8 5f       	subi	r27, 0xF8	; 248
     c78:	39 f0       	breq	.+14     	; 0xc88 <__fixunssfsi+0x4c>
     c7a:	b9 3f       	cpi	r27, 0xF9	; 249
     c7c:	cc f3       	brlt	.-14     	; 0xc70 <__fixunssfsi+0x34>
     c7e:	86 95       	lsr	r24
     c80:	77 95       	ror	r23
     c82:	67 95       	ror	r22
     c84:	b3 95       	inc	r27
     c86:	d9 f7       	brne	.-10     	; 0xc7e <__fixunssfsi+0x42>
     c88:	3e f4       	brtc	.+14     	; 0xc98 <__fixunssfsi+0x5c>
     c8a:	90 95       	com	r25
     c8c:	80 95       	com	r24
     c8e:	70 95       	com	r23
     c90:	61 95       	neg	r22
     c92:	7f 4f       	sbci	r23, 0xFF	; 255
     c94:	8f 4f       	sbci	r24, 0xFF	; 255
     c96:	9f 4f       	sbci	r25, 0xFF	; 255
     c98:	08 95       	ret

00000c9a <__floatunsisf>:
     c9a:	e8 94       	clt
     c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <__floatsisf+0x12>

00000c9e <__floatsisf>:
     c9e:	97 fb       	bst	r25, 7
     ca0:	3e f4       	brtc	.+14     	; 0xcb0 <__floatsisf+0x12>
     ca2:	90 95       	com	r25
     ca4:	80 95       	com	r24
     ca6:	70 95       	com	r23
     ca8:	61 95       	neg	r22
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	8f 4f       	sbci	r24, 0xFF	; 255
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	99 23       	and	r25, r25
     cb2:	a9 f0       	breq	.+42     	; 0xcde <__floatsisf+0x40>
     cb4:	f9 2f       	mov	r31, r25
     cb6:	96 e9       	ldi	r25, 0x96	; 150
     cb8:	bb 27       	eor	r27, r27
     cba:	93 95       	inc	r25
     cbc:	f6 95       	lsr	r31
     cbe:	87 95       	ror	r24
     cc0:	77 95       	ror	r23
     cc2:	67 95       	ror	r22
     cc4:	b7 95       	ror	r27
     cc6:	f1 11       	cpse	r31, r1
     cc8:	f8 cf       	rjmp	.-16     	; 0xcba <__floatsisf+0x1c>
     cca:	fa f4       	brpl	.+62     	; 0xd0a <__floatsisf+0x6c>
     ccc:	bb 0f       	add	r27, r27
     cce:	11 f4       	brne	.+4      	; 0xcd4 <__floatsisf+0x36>
     cd0:	60 ff       	sbrs	r22, 0
     cd2:	1b c0       	rjmp	.+54     	; 0xd0a <__floatsisf+0x6c>
     cd4:	6f 5f       	subi	r22, 0xFF	; 255
     cd6:	7f 4f       	sbci	r23, 0xFF	; 255
     cd8:	8f 4f       	sbci	r24, 0xFF	; 255
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	16 c0       	rjmp	.+44     	; 0xd0a <__floatsisf+0x6c>
     cde:	88 23       	and	r24, r24
     ce0:	11 f0       	breq	.+4      	; 0xce6 <__floatsisf+0x48>
     ce2:	96 e9       	ldi	r25, 0x96	; 150
     ce4:	11 c0       	rjmp	.+34     	; 0xd08 <__floatsisf+0x6a>
     ce6:	77 23       	and	r23, r23
     ce8:	21 f0       	breq	.+8      	; 0xcf2 <__floatsisf+0x54>
     cea:	9e e8       	ldi	r25, 0x8E	; 142
     cec:	87 2f       	mov	r24, r23
     cee:	76 2f       	mov	r23, r22
     cf0:	05 c0       	rjmp	.+10     	; 0xcfc <__floatsisf+0x5e>
     cf2:	66 23       	and	r22, r22
     cf4:	71 f0       	breq	.+28     	; 0xd12 <__floatsisf+0x74>
     cf6:	96 e8       	ldi	r25, 0x86	; 134
     cf8:	86 2f       	mov	r24, r22
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	2a f0       	brmi	.+10     	; 0xd0a <__floatsisf+0x6c>
     d00:	9a 95       	dec	r25
     d02:	66 0f       	add	r22, r22
     d04:	77 1f       	adc	r23, r23
     d06:	88 1f       	adc	r24, r24
     d08:	da f7       	brpl	.-10     	; 0xd00 <__floatsisf+0x62>
     d0a:	88 0f       	add	r24, r24
     d0c:	96 95       	lsr	r25
     d0e:	87 95       	ror	r24
     d10:	97 f9       	bld	r25, 7
     d12:	08 95       	ret

00000d14 <__fp_split3>:
     d14:	57 fd       	sbrc	r21, 7
     d16:	90 58       	subi	r25, 0x80	; 128
     d18:	44 0f       	add	r20, r20
     d1a:	55 1f       	adc	r21, r21
     d1c:	59 f0       	breq	.+22     	; 0xd34 <__fp_splitA+0x10>
     d1e:	5f 3f       	cpi	r21, 0xFF	; 255
     d20:	71 f0       	breq	.+28     	; 0xd3e <__fp_splitA+0x1a>
     d22:	47 95       	ror	r20

00000d24 <__fp_splitA>:
     d24:	88 0f       	add	r24, r24
     d26:	97 fb       	bst	r25, 7
     d28:	99 1f       	adc	r25, r25
     d2a:	61 f0       	breq	.+24     	; 0xd44 <__fp_splitA+0x20>
     d2c:	9f 3f       	cpi	r25, 0xFF	; 255
     d2e:	79 f0       	breq	.+30     	; 0xd4e <__fp_splitA+0x2a>
     d30:	87 95       	ror	r24
     d32:	08 95       	ret
     d34:	12 16       	cp	r1, r18
     d36:	13 06       	cpc	r1, r19
     d38:	14 06       	cpc	r1, r20
     d3a:	55 1f       	adc	r21, r21
     d3c:	f2 cf       	rjmp	.-28     	; 0xd22 <__fp_split3+0xe>
     d3e:	46 95       	lsr	r20
     d40:	f1 df       	rcall	.-30     	; 0xd24 <__fp_splitA>
     d42:	08 c0       	rjmp	.+16     	; 0xd54 <__fp_splitA+0x30>
     d44:	16 16       	cp	r1, r22
     d46:	17 06       	cpc	r1, r23
     d48:	18 06       	cpc	r1, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	f1 cf       	rjmp	.-30     	; 0xd30 <__fp_splitA+0xc>
     d4e:	86 95       	lsr	r24
     d50:	71 05       	cpc	r23, r1
     d52:	61 05       	cpc	r22, r1
     d54:	08 94       	sec
     d56:	08 95       	ret

00000d58 <__fp_zero>:
     d58:	e8 94       	clt

00000d5a <__fp_szero>:
     d5a:	bb 27       	eor	r27, r27
     d5c:	66 27       	eor	r22, r22
     d5e:	77 27       	eor	r23, r23
     d60:	cb 01       	movw	r24, r22
     d62:	97 f9       	bld	r25, 7
     d64:	08 95       	ret

00000d66 <__mulsf3>:
     d66:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__mulsf3x>
     d6a:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_round>
     d6e:	0e 94 29 07 	call	0xe52	; 0xe52 <__fp_pscA>
     d72:	38 f0       	brcs	.+14     	; 0xd82 <__mulsf3+0x1c>
     d74:	0e 94 30 07 	call	0xe60	; 0xe60 <__fp_pscB>
     d78:	20 f0       	brcs	.+8      	; 0xd82 <__mulsf3+0x1c>
     d7a:	95 23       	and	r25, r21
     d7c:	11 f0       	breq	.+4      	; 0xd82 <__mulsf3+0x1c>
     d7e:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_inf>
     d82:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_nan>
     d86:	11 24       	eor	r1, r1
     d88:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_szero>

00000d8c <__mulsf3x>:
     d8c:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_split3>
     d90:	70 f3       	brcs	.-36     	; 0xd6e <__mulsf3+0x8>

00000d92 <__mulsf3_pse>:
     d92:	95 9f       	mul	r25, r21
     d94:	c1 f3       	breq	.-16     	; 0xd86 <__mulsf3+0x20>
     d96:	95 0f       	add	r25, r21
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	55 1f       	adc	r21, r21
     d9c:	62 9f       	mul	r22, r18
     d9e:	f0 01       	movw	r30, r0
     da0:	72 9f       	mul	r23, r18
     da2:	bb 27       	eor	r27, r27
     da4:	f0 0d       	add	r31, r0
     da6:	b1 1d       	adc	r27, r1
     da8:	63 9f       	mul	r22, r19
     daa:	aa 27       	eor	r26, r26
     dac:	f0 0d       	add	r31, r0
     dae:	b1 1d       	adc	r27, r1
     db0:	aa 1f       	adc	r26, r26
     db2:	64 9f       	mul	r22, r20
     db4:	66 27       	eor	r22, r22
     db6:	b0 0d       	add	r27, r0
     db8:	a1 1d       	adc	r26, r1
     dba:	66 1f       	adc	r22, r22
     dbc:	82 9f       	mul	r24, r18
     dbe:	22 27       	eor	r18, r18
     dc0:	b0 0d       	add	r27, r0
     dc2:	a1 1d       	adc	r26, r1
     dc4:	62 1f       	adc	r22, r18
     dc6:	73 9f       	mul	r23, r19
     dc8:	b0 0d       	add	r27, r0
     dca:	a1 1d       	adc	r26, r1
     dcc:	62 1f       	adc	r22, r18
     dce:	83 9f       	mul	r24, r19
     dd0:	a0 0d       	add	r26, r0
     dd2:	61 1d       	adc	r22, r1
     dd4:	22 1f       	adc	r18, r18
     dd6:	74 9f       	mul	r23, r20
     dd8:	33 27       	eor	r19, r19
     dda:	a0 0d       	add	r26, r0
     ddc:	61 1d       	adc	r22, r1
     dde:	23 1f       	adc	r18, r19
     de0:	84 9f       	mul	r24, r20
     de2:	60 0d       	add	r22, r0
     de4:	21 1d       	adc	r18, r1
     de6:	82 2f       	mov	r24, r18
     de8:	76 2f       	mov	r23, r22
     dea:	6a 2f       	mov	r22, r26
     dec:	11 24       	eor	r1, r1
     dee:	9f 57       	subi	r25, 0x7F	; 127
     df0:	50 40       	sbci	r21, 0x00	; 0
     df2:	9a f0       	brmi	.+38     	; 0xe1a <__mulsf3_pse+0x88>
     df4:	f1 f0       	breq	.+60     	; 0xe32 <__mulsf3_pse+0xa0>
     df6:	88 23       	and	r24, r24
     df8:	4a f0       	brmi	.+18     	; 0xe0c <__mulsf3_pse+0x7a>
     dfa:	ee 0f       	add	r30, r30
     dfc:	ff 1f       	adc	r31, r31
     dfe:	bb 1f       	adc	r27, r27
     e00:	66 1f       	adc	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	88 1f       	adc	r24, r24
     e06:	91 50       	subi	r25, 0x01	; 1
     e08:	50 40       	sbci	r21, 0x00	; 0
     e0a:	a9 f7       	brne	.-22     	; 0xdf6 <__mulsf3_pse+0x64>
     e0c:	9e 3f       	cpi	r25, 0xFE	; 254
     e0e:	51 05       	cpc	r21, r1
     e10:	80 f0       	brcs	.+32     	; 0xe32 <__mulsf3_pse+0xa0>
     e12:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_inf>
     e16:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__fp_szero>
     e1a:	5f 3f       	cpi	r21, 0xFF	; 255
     e1c:	e4 f3       	brlt	.-8      	; 0xe16 <__mulsf3_pse+0x84>
     e1e:	98 3e       	cpi	r25, 0xE8	; 232
     e20:	d4 f3       	brlt	.-12     	; 0xe16 <__mulsf3_pse+0x84>
     e22:	86 95       	lsr	r24
     e24:	77 95       	ror	r23
     e26:	67 95       	ror	r22
     e28:	b7 95       	ror	r27
     e2a:	f7 95       	ror	r31
     e2c:	e7 95       	ror	r30
     e2e:	9f 5f       	subi	r25, 0xFF	; 255
     e30:	c1 f7       	brne	.-16     	; 0xe22 <__mulsf3_pse+0x90>
     e32:	fe 2b       	or	r31, r30
     e34:	88 0f       	add	r24, r24
     e36:	91 1d       	adc	r25, r1
     e38:	96 95       	lsr	r25
     e3a:	87 95       	ror	r24
     e3c:	97 f9       	bld	r25, 7
     e3e:	08 95       	ret

00000e40 <__fp_inf>:
     e40:	97 f9       	bld	r25, 7
     e42:	9f 67       	ori	r25, 0x7F	; 127
     e44:	80 e8       	ldi	r24, 0x80	; 128
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	08 95       	ret

00000e4c <__fp_nan>:
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	80 ec       	ldi	r24, 0xC0	; 192
     e50:	08 95       	ret

00000e52 <__fp_pscA>:
     e52:	00 24       	eor	r0, r0
     e54:	0a 94       	dec	r0
     e56:	16 16       	cp	r1, r22
     e58:	17 06       	cpc	r1, r23
     e5a:	18 06       	cpc	r1, r24
     e5c:	09 06       	cpc	r0, r25
     e5e:	08 95       	ret

00000e60 <__fp_pscB>:
     e60:	00 24       	eor	r0, r0
     e62:	0a 94       	dec	r0
     e64:	12 16       	cp	r1, r18
     e66:	13 06       	cpc	r1, r19
     e68:	14 06       	cpc	r1, r20
     e6a:	05 06       	cpc	r0, r21
     e6c:	08 95       	ret

00000e6e <__fp_round>:
     e6e:	09 2e       	mov	r0, r25
     e70:	03 94       	inc	r0
     e72:	00 0c       	add	r0, r0
     e74:	11 f4       	brne	.+4      	; 0xe7a <__fp_round+0xc>
     e76:	88 23       	and	r24, r24
     e78:	52 f0       	brmi	.+20     	; 0xe8e <__fp_round+0x20>
     e7a:	bb 0f       	add	r27, r27
     e7c:	40 f4       	brcc	.+16     	; 0xe8e <__fp_round+0x20>
     e7e:	bf 2b       	or	r27, r31
     e80:	11 f4       	brne	.+4      	; 0xe86 <__fp_round+0x18>
     e82:	60 ff       	sbrs	r22, 0
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <__fp_round+0x20>
     e86:	6f 5f       	subi	r22, 0xFF	; 255
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	8f 4f       	sbci	r24, 0xFF	; 255
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	08 95       	ret

00000e90 <__vector_16>:
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	2f 93       	push	r18
     e9c:	3f 93       	push	r19
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <timer0_millis>
     eaa:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <timer0_millis+0x1>
     eae:	a0 91 bb 02 	lds	r26, 0x02BB	; 0x8002bb <timer0_millis+0x2>
     eb2:	b0 91 bc 02 	lds	r27, 0x02BC	; 0x8002bc <timer0_millis+0x3>
     eb6:	30 91 b8 02 	lds	r19, 0x02B8	; 0x8002b8 <timer0_fract>
     eba:	23 e0       	ldi	r18, 0x03	; 3
     ebc:	23 0f       	add	r18, r19
     ebe:	2d 37       	cpi	r18, 0x7D	; 125
     ec0:	20 f4       	brcc	.+8      	; 0xeca <__vector_16+0x3a>
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	a1 1d       	adc	r26, r1
     ec6:	b1 1d       	adc	r27, r1
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__vector_16+0x44>
     eca:	26 e8       	ldi	r18, 0x86	; 134
     ecc:	23 0f       	add	r18, r19
     ece:	02 96       	adiw	r24, 0x02	; 2
     ed0:	a1 1d       	adc	r26, r1
     ed2:	b1 1d       	adc	r27, r1
     ed4:	20 93 b8 02 	sts	0x02B8, r18	; 0x8002b8 <timer0_fract>
     ed8:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <timer0_millis>
     edc:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <timer0_millis+0x1>
     ee0:	a0 93 bb 02 	sts	0x02BB, r26	; 0x8002bb <timer0_millis+0x2>
     ee4:	b0 93 bc 02 	sts	0x02BC, r27	; 0x8002bc <timer0_millis+0x3>
     ee8:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <timer0_overflow_count>
     eec:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <timer0_overflow_count+0x1>
     ef0:	a0 91 bf 02 	lds	r26, 0x02BF	; 0x8002bf <timer0_overflow_count+0x2>
     ef4:	b0 91 c0 02 	lds	r27, 0x02C0	; 0x8002c0 <timer0_overflow_count+0x3>
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	a1 1d       	adc	r26, r1
     efc:	b1 1d       	adc	r27, r1
     efe:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <timer0_overflow_count>
     f02:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <timer0_overflow_count+0x1>
     f06:	a0 93 bf 02 	sts	0x02BF, r26	; 0x8002bf <timer0_overflow_count+0x2>
     f0a:	b0 93 c0 02 	sts	0x02C0, r27	; 0x8002c0 <timer0_overflow_count+0x3>
     f0e:	bf 91       	pop	r27
     f10:	af 91       	pop	r26
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	3f 91       	pop	r19
     f18:	2f 91       	pop	r18
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <delayMicroseconds>:
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	39 f0       	breq	.+14     	; 0xf36 <delayMicroseconds+0x12>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	02 97       	sbiw	r24, 0x02	; 2
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	f1 f7       	brne	.-4      	; 0xf32 <delayMicroseconds+0xe>
     f36:	08 95       	ret

00000f38 <init>:
     f38:	78 94       	sei
     f3a:	84 b5       	in	r24, 0x24	; 36
     f3c:	82 60       	ori	r24, 0x02	; 2
     f3e:	84 bd       	out	0x24, r24	; 36
     f40:	84 b5       	in	r24, 0x24	; 36
     f42:	81 60       	ori	r24, 0x01	; 1
     f44:	84 bd       	out	0x24, r24	; 36
     f46:	85 b5       	in	r24, 0x25	; 37
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	85 bd       	out	0x25, r24	; 37
     f4c:	85 b5       	in	r24, 0x25	; 37
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	85 bd       	out	0x25, r24	; 37
     f52:	ee e6       	ldi	r30, 0x6E	; 110
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	81 60       	ori	r24, 0x01	; 1
     f5a:	80 83       	st	Z, r24
     f5c:	e1 e8       	ldi	r30, 0x81	; 129
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	10 82       	st	Z, r1
     f62:	80 81       	ld	r24, Z
     f64:	82 60       	ori	r24, 0x02	; 2
     f66:	80 83       	st	Z, r24
     f68:	80 81       	ld	r24, Z
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	80 83       	st	Z, r24
     f6e:	e0 e8       	ldi	r30, 0x80	; 128
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	81 60       	ori	r24, 0x01	; 1
     f76:	80 83       	st	Z, r24
     f78:	e1 eb       	ldi	r30, 0xB1	; 177
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	84 60       	ori	r24, 0x04	; 4
     f80:	80 83       	st	Z, r24
     f82:	e0 eb       	ldi	r30, 0xB0	; 176
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	81 60       	ori	r24, 0x01	; 1
     f8a:	80 83       	st	Z, r24
     f8c:	ea e7       	ldi	r30, 0x7A	; 122
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	84 60       	ori	r24, 0x04	; 4
     f94:	80 83       	st	Z, r24
     f96:	80 81       	ld	r24, Z
     f98:	82 60       	ori	r24, 0x02	; 2
     f9a:	80 83       	st	Z, r24
     f9c:	80 81       	ld	r24, Z
     f9e:	81 60       	ori	r24, 0x01	; 1
     fa0:	80 83       	st	Z, r24
     fa2:	80 81       	ld	r24, Z
     fa4:	80 68       	ori	r24, 0x80	; 128
     fa6:	80 83       	st	Z, r24
     fa8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     fac:	08 95       	ret

00000fae <turnOffPWM>:
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	81 f0       	breq	.+32     	; 0xfd2 <turnOffPWM+0x24>
     fb2:	28 f4       	brcc	.+10     	; 0xfbe <turnOffPWM+0x10>
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	99 f0       	breq	.+38     	; 0xfde <turnOffPWM+0x30>
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	a1 f0       	breq	.+40     	; 0xfe4 <turnOffPWM+0x36>
     fbc:	08 95       	ret
     fbe:	87 30       	cpi	r24, 0x07	; 7
     fc0:	a9 f0       	breq	.+42     	; 0xfec <turnOffPWM+0x3e>
     fc2:	88 30       	cpi	r24, 0x08	; 8
     fc4:	b9 f0       	breq	.+46     	; 0xff4 <turnOffPWM+0x46>
     fc6:	84 30       	cpi	r24, 0x04	; 4
     fc8:	d1 f4       	brne	.+52     	; 0xffe <turnOffPWM+0x50>
     fca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     fce:	8f 7d       	andi	r24, 0xDF	; 223
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <turnOffPWM+0x2a>
     fd2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     fd6:	8f 77       	andi	r24, 0x7F	; 127
     fd8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     fdc:	08 95       	ret
     fde:	84 b5       	in	r24, 0x24	; 36
     fe0:	8f 77       	andi	r24, 0x7F	; 127
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <turnOffPWM+0x3a>
     fe4:	84 b5       	in	r24, 0x24	; 36
     fe6:	8f 7d       	andi	r24, 0xDF	; 223
     fe8:	84 bd       	out	0x24, r24	; 36
     fea:	08 95       	ret
     fec:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     ff0:	8f 77       	andi	r24, 0x7F	; 127
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <turnOffPWM+0x4c>
     ff4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     ff8:	8f 7d       	andi	r24, 0xDF	; 223
     ffa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     ffe:	08 95       	ret

00001000 <pinMode>:
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	fc 01       	movw	r30, r24
    1008:	e4 58       	subi	r30, 0x84	; 132
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	24 91       	lpm	r18, Z
    100e:	fc 01       	movw	r30, r24
    1010:	e0 57       	subi	r30, 0x70	; 112
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	84 91       	lpm	r24, Z
    1016:	88 23       	and	r24, r24
    1018:	49 f1       	breq	.+82     	; 0x106c <pinMode+0x6c>
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	fc 01       	movw	r30, r24
    1022:	e2 55       	subi	r30, 0x52	; 82
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	a5 91       	lpm	r26, Z+
    1028:	b4 91       	lpm	r27, Z
    102a:	8c 55       	subi	r24, 0x5C	; 92
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	fc 01       	movw	r30, r24
    1030:	c5 91       	lpm	r28, Z+
    1032:	d4 91       	lpm	r29, Z
    1034:	9f b7       	in	r25, 0x3f	; 63
    1036:	61 11       	cpse	r22, r1
    1038:	08 c0       	rjmp	.+16     	; 0x104a <pinMode+0x4a>
    103a:	f8 94       	cli
    103c:	8c 91       	ld	r24, X
    103e:	20 95       	com	r18
    1040:	82 23       	and	r24, r18
    1042:	8c 93       	st	X, r24
    1044:	88 81       	ld	r24, Y
    1046:	82 23       	and	r24, r18
    1048:	0a c0       	rjmp	.+20     	; 0x105e <pinMode+0x5e>
    104a:	62 30       	cpi	r22, 0x02	; 2
    104c:	51 f4       	brne	.+20     	; 0x1062 <pinMode+0x62>
    104e:	f8 94       	cli
    1050:	8c 91       	ld	r24, X
    1052:	32 2f       	mov	r19, r18
    1054:	30 95       	com	r19
    1056:	83 23       	and	r24, r19
    1058:	8c 93       	st	X, r24
    105a:	88 81       	ld	r24, Y
    105c:	82 2b       	or	r24, r18
    105e:	88 83       	st	Y, r24
    1060:	04 c0       	rjmp	.+8      	; 0x106a <pinMode+0x6a>
    1062:	f8 94       	cli
    1064:	8c 91       	ld	r24, X
    1066:	82 2b       	or	r24, r18
    1068:	8c 93       	st	X, r24
    106a:	9f bf       	out	0x3f, r25	; 63
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <digitalWrite>:
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	1f 92       	push	r1
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	f9 01       	movw	r30, r18
    1086:	e8 59       	subi	r30, 0x98	; 152
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	84 91       	lpm	r24, Z
    108c:	f9 01       	movw	r30, r18
    108e:	e4 58       	subi	r30, 0x84	; 132
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	14 91       	lpm	r17, Z
    1094:	f9 01       	movw	r30, r18
    1096:	e0 57       	subi	r30, 0x70	; 112
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	04 91       	lpm	r16, Z
    109c:	00 23       	and	r16, r16
    109e:	c9 f0       	breq	.+50     	; 0x10d2 <digitalWrite+0x60>
    10a0:	88 23       	and	r24, r24
    10a2:	21 f0       	breq	.+8      	; 0x10ac <digitalWrite+0x3a>
    10a4:	69 83       	std	Y+1, r22	; 0x01
    10a6:	0e 94 d7 07 	call	0xfae	; 0xfae <turnOffPWM>
    10aa:	69 81       	ldd	r22, Y+1	; 0x01
    10ac:	e0 2f       	mov	r30, r16
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	ec 55       	subi	r30, 0x5C	; 92
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	a5 91       	lpm	r26, Z+
    10ba:	b4 91       	lpm	r27, Z
    10bc:	9f b7       	in	r25, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	8c 91       	ld	r24, X
    10c2:	61 11       	cpse	r22, r1
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <digitalWrite+0x5a>
    10c6:	10 95       	com	r17
    10c8:	81 23       	and	r24, r17
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <digitalWrite+0x5c>
    10cc:	81 2b       	or	r24, r17
    10ce:	8c 93       	st	X, r24
    10d0:	9f bf       	out	0x3f, r25	; 63
    10d2:	0f 90       	pop	r0
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	08 95       	ret

000010de <initVariant>:
    10de:	08 95       	ret

000010e0 <main>:
    10e0:	0e 94 9c 07 	call	0xf38	; 0xf38 <init>
    10e4:	0e 94 6f 08 	call	0x10de	; 0x10de <initVariant>
    10e8:	0e 94 9c 05 	call	0xb38	; 0xb38 <setup>
    10ec:	c0 e0       	ldi	r28, 0x00	; 0
    10ee:	d0 e0       	ldi	r29, 0x00	; 0
    10f0:	0e 94 04 06 	call	0xc08	; 0xc08 <loop>
    10f4:	20 97       	sbiw	r28, 0x00	; 0
    10f6:	e1 f3       	breq	.-8      	; 0x10f0 <main+0x10>
    10f8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    10fc:	f9 cf       	rjmp	.-14     	; 0x10f0 <main+0x10>

000010fe <_ZN5Print5writeEPKhj>:
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	6c 01       	movw	r12, r24
    1110:	7a 01       	movw	r14, r20
    1112:	eb 01       	movw	r28, r22
    1114:	e6 0e       	add	r14, r22
    1116:	f7 1e       	adc	r15, r23
    1118:	00 e0       	ldi	r16, 0x00	; 0
    111a:	10 e0       	ldi	r17, 0x00	; 0
    111c:	ce 15       	cp	r28, r14
    111e:	df 05       	cpc	r29, r15
    1120:	61 f0       	breq	.+24     	; 0x113a <_ZN5Print5writeEPKhj+0x3c>
    1122:	69 91       	ld	r22, Y+
    1124:	d6 01       	movw	r26, r12
    1126:	ed 91       	ld	r30, X+
    1128:	fc 91       	ld	r31, X
    112a:	01 90       	ld	r0, Z+
    112c:	f0 81       	ld	r31, Z
    112e:	e0 2d       	mov	r30, r0
    1130:	c6 01       	movw	r24, r12
    1132:	09 95       	icall
    1134:	08 0f       	add	r16, r24
    1136:	19 1f       	adc	r17, r25
    1138:	f1 cf       	rjmp	.-30     	; 0x111c <_ZN5Print5writeEPKhj+0x1e>
    113a:	c8 01       	movw	r24, r16
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	08 95       	ret

0000114e <_ZN5Print5writeEPKc>:
    114e:	61 15       	cp	r22, r1
    1150:	71 05       	cpc	r23, r1
    1152:	81 f0       	breq	.+32     	; 0x1174 <_ZN5Print5writeEPKc+0x26>
    1154:	db 01       	movw	r26, r22
    1156:	0d 90       	ld	r0, X+
    1158:	00 20       	and	r0, r0
    115a:	e9 f7       	brne	.-6      	; 0x1156 <_ZN5Print5writeEPKc+0x8>
    115c:	ad 01       	movw	r20, r26
    115e:	41 50       	subi	r20, 0x01	; 1
    1160:	51 09       	sbc	r21, r1
    1162:	46 1b       	sub	r20, r22
    1164:	57 0b       	sbc	r21, r23
    1166:	dc 01       	movw	r26, r24
    1168:	ed 91       	ld	r30, X+
    116a:	fc 91       	ld	r31, X
    116c:	02 80       	ldd	r0, Z+2	; 0x02
    116e:	f3 81       	ldd	r31, Z+3	; 0x03
    1170:	e0 2d       	mov	r30, r0
    1172:	09 94       	ijmp
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	08 95       	ret

0000117a <_ZN5Print5printEPKc>:
    117a:	0c 94 a7 08 	jmp	0x114e	; 0x114e <_ZN5Print5writeEPKc>

0000117e <_ZN5Print11printNumberEmh>:
    117e:	8f 92       	push	r8
    1180:	9f 92       	push	r9
    1182:	af 92       	push	r10
    1184:	bf 92       	push	r11
    1186:	cf 92       	push	r12
    1188:	df 92       	push	r13
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	a1 97       	sbiw	r28, 0x21	; 33
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	7c 01       	movw	r14, r24
    11a8:	c4 2e       	mov	r12, r20
    11aa:	e5 2f       	mov	r30, r21
    11ac:	cb 01       	movw	r24, r22
    11ae:	d2 2e       	mov	r13, r18
    11b0:	19 a2       	std	Y+33, r1	; 0x21
    11b2:	21 e0       	ldi	r18, 0x01	; 1
    11b4:	2d 15       	cp	r18, r13
    11b6:	10 f0       	brcs	.+4      	; 0x11bc <_ZN5Print11printNumberEmh+0x3e>
    11b8:	2a e0       	ldi	r18, 0x0A	; 10
    11ba:	d2 2e       	mov	r13, r18
    11bc:	8e 01       	movw	r16, r28
    11be:	0f 5d       	subi	r16, 0xDF	; 223
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	8d 2c       	mov	r8, r13
    11c4:	91 2c       	mov	r9, r1
    11c6:	a1 2c       	mov	r10, r1
    11c8:	b1 2c       	mov	r11, r1
    11ca:	6c 2d       	mov	r22, r12
    11cc:	7e 2f       	mov	r23, r30
    11ce:	a5 01       	movw	r20, r10
    11d0:	94 01       	movw	r18, r8
    11d2:	0e 94 40 09 	call	0x1280	; 0x1280 <__udivmodsi4>
    11d6:	8c 2d       	mov	r24, r12
    11d8:	d2 9e       	mul	r13, r18
    11da:	80 19       	sub	r24, r0
    11dc:	11 24       	eor	r1, r1
    11de:	01 50       	subi	r16, 0x01	; 1
    11e0:	11 09       	sbc	r17, r1
    11e2:	8a 30       	cpi	r24, 0x0A	; 10
    11e4:	14 f4       	brge	.+4      	; 0x11ea <_ZN5Print11printNumberEmh+0x6c>
    11e6:	80 5d       	subi	r24, 0xD0	; 208
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <_ZN5Print11printNumberEmh+0x6e>
    11ea:	89 5c       	subi	r24, 0xC9	; 201
    11ec:	f8 01       	movw	r30, r16
    11ee:	80 83       	st	Z, r24
    11f0:	21 15       	cp	r18, r1
    11f2:	31 05       	cpc	r19, r1
    11f4:	41 05       	cpc	r20, r1
    11f6:	51 05       	cpc	r21, r1
    11f8:	21 f0       	breq	.+8      	; 0x1202 <_ZN5Print11printNumberEmh+0x84>
    11fa:	c2 2e       	mov	r12, r18
    11fc:	e3 2f       	mov	r30, r19
    11fe:	ca 01       	movw	r24, r20
    1200:	e4 cf       	rjmp	.-56     	; 0x11ca <_ZN5Print11printNumberEmh+0x4c>
    1202:	b8 01       	movw	r22, r16
    1204:	c7 01       	movw	r24, r14
    1206:	0e 94 a7 08 	call	0x114e	; 0x114e <_ZN5Print5writeEPKc>
    120a:	a1 96       	adiw	r28, 0x21	; 33
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	cf 90       	pop	r12
    1226:	bf 90       	pop	r11
    1228:	af 90       	pop	r10
    122a:	9f 90       	pop	r9
    122c:	8f 90       	pop	r8
    122e:	08 95       	ret

00001230 <_ZN5Print5printEmi>:
    1230:	21 15       	cp	r18, r1
    1232:	31 05       	cpc	r19, r1
    1234:	41 f4       	brne	.+16     	; 0x1246 <_ZN5Print5printEmi+0x16>
    1236:	dc 01       	movw	r26, r24
    1238:	ed 91       	ld	r30, X+
    123a:	fc 91       	ld	r31, X
    123c:	01 90       	ld	r0, Z+
    123e:	f0 81       	ld	r31, Z
    1240:	e0 2d       	mov	r30, r0
    1242:	64 2f       	mov	r22, r20
    1244:	09 94       	ijmp
    1246:	0c 94 bf 08 	jmp	0x117e	; 0x117e <_ZN5Print11printNumberEmh>

0000124a <_ZN5Print5printEhi>:
    124a:	9a 01       	movw	r18, r20
    124c:	46 2f       	mov	r20, r22
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	0c 94 18 09 	jmp	0x1230	; 0x1230 <_ZN5Print5printEmi>

00001258 <__divmodhi4>:
    1258:	97 fb       	bst	r25, 7
    125a:	07 2e       	mov	r0, r23
    125c:	16 f4       	brtc	.+4      	; 0x1262 <__divmodhi4+0xa>
    125e:	00 94       	com	r0
    1260:	07 d0       	rcall	.+14     	; 0x1270 <__divmodhi4_neg1>
    1262:	77 fd       	sbrc	r23, 7
    1264:	09 d0       	rcall	.+18     	; 0x1278 <__divmodhi4_neg2>
    1266:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__udivmodhi4>
    126a:	07 fc       	sbrc	r0, 7
    126c:	05 d0       	rcall	.+10     	; 0x1278 <__divmodhi4_neg2>
    126e:	3e f4       	brtc	.+14     	; 0x127e <__divmodhi4_exit>

00001270 <__divmodhi4_neg1>:
    1270:	90 95       	com	r25
    1272:	81 95       	neg	r24
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	08 95       	ret

00001278 <__divmodhi4_neg2>:
    1278:	70 95       	com	r23
    127a:	61 95       	neg	r22
    127c:	7f 4f       	sbci	r23, 0xFF	; 255

0000127e <__divmodhi4_exit>:
    127e:	08 95       	ret

00001280 <__udivmodsi4>:
    1280:	a1 e2       	ldi	r26, 0x21	; 33
    1282:	1a 2e       	mov	r1, r26
    1284:	aa 1b       	sub	r26, r26
    1286:	bb 1b       	sub	r27, r27
    1288:	fd 01       	movw	r30, r26
    128a:	0d c0       	rjmp	.+26     	; 0x12a6 <__udivmodsi4_ep>

0000128c <__udivmodsi4_loop>:
    128c:	aa 1f       	adc	r26, r26
    128e:	bb 1f       	adc	r27, r27
    1290:	ee 1f       	adc	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	a2 17       	cp	r26, r18
    1296:	b3 07       	cpc	r27, r19
    1298:	e4 07       	cpc	r30, r20
    129a:	f5 07       	cpc	r31, r21
    129c:	20 f0       	brcs	.+8      	; 0x12a6 <__udivmodsi4_ep>
    129e:	a2 1b       	sub	r26, r18
    12a0:	b3 0b       	sbc	r27, r19
    12a2:	e4 0b       	sbc	r30, r20
    12a4:	f5 0b       	sbc	r31, r21

000012a6 <__udivmodsi4_ep>:
    12a6:	66 1f       	adc	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	88 1f       	adc	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	1a 94       	dec	r1
    12b0:	69 f7       	brne	.-38     	; 0x128c <__udivmodsi4_loop>
    12b2:	60 95       	com	r22
    12b4:	70 95       	com	r23
    12b6:	80 95       	com	r24
    12b8:	90 95       	com	r25
    12ba:	9b 01       	movw	r18, r22
    12bc:	ac 01       	movw	r20, r24
    12be:	bd 01       	movw	r22, r26
    12c0:	cf 01       	movw	r24, r30
    12c2:	08 95       	ret

000012c4 <__udivmodhi4>:
    12c4:	aa 1b       	sub	r26, r26
    12c6:	bb 1b       	sub	r27, r27
    12c8:	51 e1       	ldi	r21, 0x11	; 17
    12ca:	07 c0       	rjmp	.+14     	; 0x12da <__udivmodhi4_ep>

000012cc <__udivmodhi4_loop>:
    12cc:	aa 1f       	adc	r26, r26
    12ce:	bb 1f       	adc	r27, r27
    12d0:	a6 17       	cp	r26, r22
    12d2:	b7 07       	cpc	r27, r23
    12d4:	10 f0       	brcs	.+4      	; 0x12da <__udivmodhi4_ep>
    12d6:	a6 1b       	sub	r26, r22
    12d8:	b7 0b       	sbc	r27, r23

000012da <__udivmodhi4_ep>:
    12da:	88 1f       	adc	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	5a 95       	dec	r21
    12e0:	a9 f7       	brne	.-22     	; 0x12cc <__udivmodhi4_loop>
    12e2:	80 95       	com	r24
    12e4:	90 95       	com	r25
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	08 95       	ret

000012ec <__tablejump2__>:
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	05 90       	lpm	r0, Z+
    12f2:	f4 91       	lpm	r31, Z
    12f4:	e0 2d       	mov	r30, r0
    12f6:	09 94       	ijmp

000012f8 <_exit>:
    12f8:	f8 94       	cli

000012fa <__stop_program>:
    12fa:	ff cf       	rjmp	.-2      	; 0x12fa <__stop_program>
