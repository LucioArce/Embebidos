
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000036c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  00800102  00800102  00000402  2**0
                  ALLOC
  3 .comment      00000041  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e18  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a14  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000818  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  000025c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fe  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b4  00000000  00000000  00002ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003396  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  9e:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z14critical_beginv>:
    // módulo de región crítica. Esto puede suceder cuando se está ejecutando
    // una rutina de interrupción. En este caso, no deshabilitar las
    // interrupciones

    // Lectura atómica del registro
    uint8_t status_register = SREG;
  a6:	2f b7       	in	r18, 0x3f	; 63
    cli();
  a8:	f8 94       	cli

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
  aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  ae:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
  b2:	89 2b       	or	r24, r25
  b4:	19 f4       	brne	.+6      	; 0xbc <_Z14critical_beginv+0x16>

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
  b6:	22 23       	and	r18, r18
  b8:	9c f4       	brge	.+38     	; 0xe0 <_Z14critical_beginv+0x3a>
  ba:	08 c0       	rjmp	.+16     	; 0xcc <_Z14critical_beginv+0x26>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
  bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  c0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  c4:	89 2b       	or	r24, r25
  c6:	91 f0       	breq	.+36     	; 0xec <_Z14critical_beginv+0x46>
  c8:	22 23       	and	r18, r18
  ca:	84 f0       	brlt	.+32     	; 0xec <_Z14critical_beginv+0x46>
    {
        anidamiento++;
  cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  de:	08 95       	ret
    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
  e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  e4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  e8:	89 2b       	or	r24, r25
  ea:	81 f7       	brne	.-32     	; 0xcc <_Z14critical_beginv+0x26>
  ec:	08 95       	ret

000000ee <_Z12critical_endv>:
    // crítica, no hacer nada.
}

void critical_end(void)
{
    uint8_t status_register = SREG;
  ee:	2f b7       	in	r18, 0x3f	; 63
    cli();
  f0:	f8 94       	cli

    if (anidamiento > 0) {
  f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  fa:	18 16       	cp	r1, r24
  fc:	19 06       	cpc	r1, r25
  fe:	8c f4       	brge	.+34     	; 0x122 <_Z12critical_endv+0x34>
        anidamiento--;
 100:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 104:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 10e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
        if (anidamiento == 0)
 112:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 116:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 11a:	89 2b       	or	r24, r25
 11c:	29 f4       	brne	.+10     	; 0x128 <_Z12critical_endv+0x3a>
            sei();
 11e:	78 94       	sei
 120:	08 95       	ret
    }
    else if ((status_register & 0x80) != 0)
 122:	22 23       	and	r18, r18
 124:	0c f4       	brge	.+2      	; 0x128 <_Z12critical_endv+0x3a>
        sei();
 126:	78 94       	sei
 128:	08 95       	ret

0000012a <_Z12procesar_adcv>:
		teclasCallback[tecla].callbackUp=handler;
}
	
void key_down_callback(void (*handler)(),int tecla){
	if(tecla>=0 && tecla<5)
		teclasCallback[tecla].callbackDown=handler;
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL9analogVal>
 132:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_ZL9analogVal+0x1>
 136:	c2 97       	sbiw	r24, 0x32	; 50
 138:	00 f1       	brcs	.+64     	; 0x17a <_Z12procesar_adcv+0x50>
 13a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL9analogVal>
 13e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_ZL9analogVal+0x1>
 142:	86 3e       	cpi	r24, 0xE6	; 230
 144:	91 05       	cpc	r25, r1
 146:	08 f4       	brcc	.+2      	; 0x14a <_Z12procesar_adcv+0x20>
 148:	4c c0       	rjmp	.+152    	; 0x1e2 <_Z12procesar_adcv+0xb8>
 14a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL9analogVal>
 14e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_ZL9analogVal+0x1>
 152:	88 36       	cpi	r24, 0x68	; 104
 154:	91 40       	sbci	r25, 0x01	; 1
 156:	08 f4       	brcc	.+2      	; 0x15a <_Z12procesar_adcv+0x30>
 158:	47 c0       	rjmp	.+142    	; 0x1e8 <_Z12procesar_adcv+0xbe>
 15a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL9analogVal>
 15e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_ZL9analogVal+0x1>
 162:	87 31       	cpi	r24, 0x17	; 23
 164:	92 40       	sbci	r25, 0x02	; 2
 166:	08 f4       	brcc	.+2      	; 0x16a <_Z12procesar_adcv+0x40>
 168:	42 c0       	rjmp	.+132    	; 0x1ee <_Z12procesar_adcv+0xc4>
 16a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_ZL9analogVal>
 16e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_ZL9analogVal+0x1>
 172:	88 3f       	cpi	r24, 0xF8	; 248
 174:	92 40       	sbci	r25, 0x02	; 2
 176:	d8 f4       	brcc	.+54     	; 0x1ae <_Z12procesar_adcv+0x84>
 178:	3d c0       	rjmp	.+122    	; 0x1f4 <_Z12procesar_adcv+0xca>
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 182:	89 2b       	or	r24, r25
 184:	09 f4       	brne	.+2      	; 0x188 <_Z12procesar_adcv+0x5e>
 186:	3f c0       	rjmp	.+126    	; 0x206 <_Z12procesar_adcv+0xdc>
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 190:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 194:	fe 01       	movw	r30, r28
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	ec 5f       	subi	r30, 0xFC	; 252
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
 1a2:	02 80       	ldd	r0, Z+2	; 0x02
 1a4:	f3 81       	ldd	r31, Z+3	; 0x03
 1a6:	e0 2d       	mov	r30, r0
 1a8:	09 95       	icall
 1aa:	25 97       	sbiw	r28, 0x05	; 5
 1ac:	64 f1       	brlt	.+88     	; 0x206 <_Z12procesar_adcv+0xdc>
 1ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1b6:	8f 3f       	cpi	r24, 0xFF	; 255
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	92 07       	cpc	r25, r18
 1bc:	21 f1       	breq	.+72     	; 0x206 <_Z12procesar_adcv+0xdc>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	fc 01       	movw	r30, r24
 1c8:	ec 5f       	subi	r30, 0xFC	; 252
 1ca:	fe 4f       	sbci	r31, 0xFE	; 254
 1cc:	01 90       	ld	r0, Z+
 1ce:	f0 81       	ld	r31, Z
 1d0:	e0 2d       	mov	r30, r0
 1d2:	09 95       	icall
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	9f ef       	ldi	r25, 0xFF	; 255
 1d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1e0:	12 c0       	rjmp	.+36     	; 0x206 <_Z12procesar_adcv+0xdc>
 1e2:	c1 e0       	ldi	r28, 0x01	; 1
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	08 c0       	rjmp	.+16     	; 0x1f8 <_Z12procesar_adcv+0xce>
 1e8:	c2 e0       	ldi	r28, 0x02	; 2
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <_Z12procesar_adcv+0xce>
 1ee:	c3 e0       	ldi	r28, 0x03	; 3
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <_Z12procesar_adcv+0xce>
 1f4:	c4 e0       	ldi	r28, 0x04	; 4
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 200:	c8 17       	cp	r28, r24
 202:	d9 07       	cpc	r29, r25
 204:	19 f6       	brne	.-122    	; 0x18c <_Z12procesar_adcv+0x62>
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <__vector_21>:
	;
}

	
ISR (ADC_vect)
	{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
		contador++;
 22e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <_ZL8contador>
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_ZL8contador>
		if(contador > 50)
 238:	83 33       	cpi	r24, 0x33	; 51
 23a:	80 f0       	brcs	.+32     	; 0x25c <__vector_21+0x50>
		{ 
			analogVal= ADCL | (ADCH << 8);
 23c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 240:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	92 2b       	or	r25, r18
 248:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <_ZL9analogVal+0x1>
 24c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL9analogVal>
		
			fnqueue_add(procesar_adc);
 250:	85 e9       	ldi	r24, 0x95	; 149
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z11fnqueue_addPFvvE>
			contador=0;
 258:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <_ZL8contador>
		}
		
	}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <_Z11fnqueue_addPFvvE>:

	return 1;
}

bool fnqueue_add(void (*function)(void))
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ec 01       	movw	r28, r24
	bool result = false;
	
    critical_begin();
 284:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14critical_beginv>
    if (fnqueue_count < FNQUEUE_LENGTH)
 288:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <_ZL13fnqueue_count>
 28c:	20 31       	cpi	r18, 0x10	; 16
 28e:	d0 f4       	brcc	.+52     	; 0x2c4 <_Z11fnqueue_addPFvvE+0x46>
    {
        fnqueue_functions[fnqueue_tail] = function;
 290:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZL12fnqueue_tail>
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	fc 01       	movw	r30, r24
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	e3 5e       	subi	r30, 0xE3	; 227
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	d1 83       	std	Z+1, r29	; 0x01
 2a2:	c0 83       	st	Z, r28
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	90 78       	andi	r25, 0x80	; 128
 2aa:	99 23       	and	r25, r25
 2ac:	24 f4       	brge	.+8      	; 0x2b6 <_Z11fnqueue_addPFvvE+0x38>
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	80 6f       	ori	r24, 0xF0	; 240
 2b2:	9f 6f       	ori	r25, 0xFF	; 255
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_ZL12fnqueue_tail>
        fnqueue_count++;
 2ba:	2f 5f       	subi	r18, 0xFF	; 255
 2bc:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <_ZL13fnqueue_count>
        result = true;
 2c0:	c1 e0       	ldi	r28, 0x01	; 1
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <_Z11fnqueue_addPFvvE+0x48>
	return 1;
}

bool fnqueue_add(void (*function)(void))
{
	bool result = false;
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
        fnqueue_functions[fnqueue_tail] = function;
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
        fnqueue_count++;
        result = true;
    }
    critical_end();
 2c6:	0e 94 77 00 	call	0xee	; 0xee <_Z12critical_endv>
    return result;
 2ca:	8c 2f       	mov	r24, r28
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <main>:

#include <avr/io.h>


int main(void)
{
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <main>

000002d4 <__vector_16>:
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	2f 93       	push	r18
 2e0:	3f 93       	push	r19
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <timer0_millis>
 2ee:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <timer0_millis+0x1>
 2f2:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <timer0_millis+0x2>
 2f6:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <timer0_millis+0x3>
 2fa:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <timer0_fract>
 2fe:	23 e0       	ldi	r18, 0x03	; 3
 300:	23 0f       	add	r18, r19
 302:	2d 37       	cpi	r18, 0x7D	; 125
 304:	20 f4       	brcc	.+8      	; 0x30e <__vector_16+0x3a>
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	a1 1d       	adc	r26, r1
 30a:	b1 1d       	adc	r27, r1
 30c:	05 c0       	rjmp	.+10     	; 0x318 <__vector_16+0x44>
 30e:	26 e8       	ldi	r18, 0x86	; 134
 310:	23 0f       	add	r18, r19
 312:	02 96       	adiw	r24, 0x02	; 2
 314:	a1 1d       	adc	r26, r1
 316:	b1 1d       	adc	r27, r1
 318:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <timer0_fract>
 31c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <timer0_millis>
 320:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <timer0_millis+0x1>
 324:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <timer0_millis+0x2>
 328:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <timer0_millis+0x3>
 32c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <timer0_overflow_count>
 330:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <timer0_overflow_count+0x1>
 334:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <timer0_overflow_count+0x2>
 338:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <timer0_overflow_count+0x3>
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	a1 1d       	adc	r26, r1
 340:	b1 1d       	adc	r27, r1
 342:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <timer0_overflow_count>
 346:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <timer0_overflow_count+0x1>
 34a:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <timer0_overflow_count+0x2>
 34e:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <timer0_overflow_count+0x3>
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	3f 91       	pop	r19
 35c:	2f 91       	pop	r18
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
