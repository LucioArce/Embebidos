
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00001266  000012fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018d  00800190  00800190  0000138a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ce5  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a0  00000000  00000000  000053b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019ce  00000000  00000000  00006459  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  00007e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011f9  00000000  00000000  00008534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022e5  00000000  00000000  0000972d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000ba12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__vector_9>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_21>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	24 00       	.word	0x0024	; ????
      6e:	27 00       	.word	0x0027	; ????
      70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
      7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8c:	03 03 03 03                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
      90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_timer_PGM>:
      a4:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      b4:	00 00 00 00                                         ....

000000b8 <__ctors_start>:
      b8:	7c 08       	sbc	r7, r12

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e6 e6       	ldi	r30, 0x66	; 102
      ce:	f2 e1       	ldi	r31, 0x12	; 18
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a0 39       	cpi	r26, 0x90	; 144
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	23 e0       	ldi	r18, 0x03	; 3
      de:	a0 e9       	ldi	r26, 0x90	; 144
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	ad 31       	cpi	r26, 0x1D	; 29
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	cd e5       	ldi	r28, 0x5D	; 93
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	21 97       	sbiw	r28, 0x01	; 1
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 09 09 	call	0x1212	; 0x1212 <__tablejump2__>
      fc:	cc 35       	cpi	r28, 0x5C	; 92
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 93 08 	call	0x1126	; 0x1126 <main>
     106:	0c 94 31 09 	jmp	0x1262	; 0x1262 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <_ZN5Print5writeEPKc.constprop.2>:
     10e:	61 15       	cp	r22, r1
     110:	71 05       	cpc	r23, r1
     112:	79 f0       	breq	.+30     	; 0x132 <_ZN5Print5writeEPKc.constprop.2+0x24>
     114:	fb 01       	movw	r30, r22
     116:	01 90       	ld	r0, Z+
     118:	00 20       	and	r0, r0
     11a:	e9 f7       	brne	.-6      	; 0x116 <_ZN5Print5writeEPKc.constprop.2+0x8>
     11c:	31 97       	sbiw	r30, 0x01	; 1
     11e:	af 01       	movw	r20, r30
     120:	46 1b       	sub	r20, r22
     122:	57 0b       	sbc	r21, r23
     124:	dc 01       	movw	r26, r24
     126:	ed 91       	ld	r30, X+
     128:	fc 91       	ld	r31, X
     12a:	02 80       	ldd	r0, Z+2	; 0x02
     12c:	f3 81       	ldd	r31, Z+3	; 0x03
     12e:	e0 2d       	mov	r30, r0
     130:	09 94       	ijmp
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	08 95       	ret

00000138 <digitalWrite>:
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	fc 01       	movw	r30, r24
     13c:	ec 55       	subi	r30, 0x5C	; 92
     13e:	ff 4f       	sbci	r31, 0xFF	; 255
     140:	24 91       	lpm	r18, Z
     142:	fc 01       	movw	r30, r24
     144:	e0 57       	subi	r30, 0x70	; 112
     146:	ff 4f       	sbci	r31, 0xFF	; 255
     148:	34 91       	lpm	r19, Z
     14a:	fc 01       	movw	r30, r24
     14c:	e4 58       	subi	r30, 0x84	; 132
     14e:	ff 4f       	sbci	r31, 0xFF	; 255
     150:	e4 91       	lpm	r30, Z
     152:	ee 23       	and	r30, r30
     154:	09 f4       	brne	.+2      	; 0x158 <digitalWrite+0x20>
     156:	3c c0       	rjmp	.+120    	; 0x1d0 <digitalWrite+0x98>
     158:	22 23       	and	r18, r18
     15a:	39 f1       	breq	.+78     	; 0x1aa <digitalWrite+0x72>
     15c:	23 30       	cpi	r18, 0x03	; 3
     15e:	91 f0       	breq	.+36     	; 0x184 <digitalWrite+0x4c>
     160:	38 f4       	brcc	.+14     	; 0x170 <digitalWrite+0x38>
     162:	21 30       	cpi	r18, 0x01	; 1
     164:	a9 f0       	breq	.+42     	; 0x190 <digitalWrite+0x58>
     166:	22 30       	cpi	r18, 0x02	; 2
     168:	01 f5       	brne	.+64     	; 0x1aa <digitalWrite+0x72>
     16a:	84 b5       	in	r24, 0x24	; 36
     16c:	8f 7d       	andi	r24, 0xDF	; 223
     16e:	12 c0       	rjmp	.+36     	; 0x194 <digitalWrite+0x5c>
     170:	27 30       	cpi	r18, 0x07	; 7
     172:	91 f0       	breq	.+36     	; 0x198 <digitalWrite+0x60>
     174:	28 30       	cpi	r18, 0x08	; 8
     176:	a1 f0       	breq	.+40     	; 0x1a0 <digitalWrite+0x68>
     178:	24 30       	cpi	r18, 0x04	; 4
     17a:	b9 f4       	brne	.+46     	; 0x1aa <digitalWrite+0x72>
     17c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     180:	8f 7d       	andi	r24, 0xDF	; 223
     182:	03 c0       	rjmp	.+6      	; 0x18a <digitalWrite+0x52>
     184:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     188:	8f 77       	andi	r24, 0x7F	; 127
     18a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     18e:	0d c0       	rjmp	.+26     	; 0x1aa <digitalWrite+0x72>
     190:	84 b5       	in	r24, 0x24	; 36
     192:	8f 77       	andi	r24, 0x7F	; 127
     194:	84 bd       	out	0x24, r24	; 36
     196:	09 c0       	rjmp	.+18     	; 0x1aa <digitalWrite+0x72>
     198:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     19c:	8f 77       	andi	r24, 0x7F	; 127
     19e:	03 c0       	rjmp	.+6      	; 0x1a6 <digitalWrite+0x6e>
     1a0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     1a4:	8f 7d       	andi	r24, 0xDF	; 223
     1a6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	ee 0f       	add	r30, r30
     1ae:	ff 1f       	adc	r31, r31
     1b0:	ee 58       	subi	r30, 0x8E	; 142
     1b2:	ff 4f       	sbci	r31, 0xFF	; 255
     1b4:	a5 91       	lpm	r26, Z+
     1b6:	b4 91       	lpm	r27, Z
     1b8:	9f b7       	in	r25, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	61 11       	cpse	r22, r1
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <digitalWrite+0x90>
     1c0:	8c 91       	ld	r24, X
     1c2:	30 95       	com	r19
     1c4:	38 23       	and	r19, r24
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <digitalWrite+0x94>
     1c8:	ec 91       	ld	r30, X
     1ca:	3e 2b       	or	r19, r30
     1cc:	3c 93       	st	X, r19
     1ce:	9f bf       	out	0x3f, r25	; 63
     1d0:	08 95       	ret

000001d2 <pinMode>:
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	e0 57       	subi	r30, 0x70	; 112
     1dc:	ff 4f       	sbci	r31, 0xFF	; 255
     1de:	24 91       	lpm	r18, Z
     1e0:	fc 01       	movw	r30, r24
     1e2:	e4 58       	subi	r30, 0x84	; 132
     1e4:	ff 4f       	sbci	r31, 0xFF	; 255
     1e6:	84 91       	lpm	r24, Z
     1e8:	88 23       	and	r24, r24
     1ea:	61 f1       	breq	.+88     	; 0x244 <pinMode+0x72>
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	fc 01       	movw	r30, r24
     1f4:	e8 59       	subi	r30, 0x98	; 152
     1f6:	ff 4f       	sbci	r31, 0xFF	; 255
     1f8:	c5 91       	lpm	r28, Z+
     1fa:	d4 91       	lpm	r29, Z
     1fc:	fc 01       	movw	r30, r24
     1fe:	ee 58       	subi	r30, 0x8E	; 142
     200:	ff 4f       	sbci	r31, 0xFF	; 255
     202:	a5 91       	lpm	r26, Z+
     204:	b4 91       	lpm	r27, Z
     206:	61 11       	cpse	r22, r1
     208:	09 c0       	rjmp	.+18     	; 0x21c <pinMode+0x4a>
     20a:	9f b7       	in	r25, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	88 81       	ld	r24, Y
     210:	20 95       	com	r18
     212:	82 23       	and	r24, r18
     214:	88 83       	st	Y, r24
     216:	ec 91       	ld	r30, X
     218:	2e 23       	and	r18, r30
     21a:	0b c0       	rjmp	.+22     	; 0x232 <pinMode+0x60>
     21c:	62 30       	cpi	r22, 0x02	; 2
     21e:	61 f4       	brne	.+24     	; 0x238 <pinMode+0x66>
     220:	9f b7       	in	r25, 0x3f	; 63
     222:	f8 94       	cli
     224:	88 81       	ld	r24, Y
     226:	32 2f       	mov	r19, r18
     228:	30 95       	com	r19
     22a:	83 23       	and	r24, r19
     22c:	88 83       	st	Y, r24
     22e:	ec 91       	ld	r30, X
     230:	2e 2b       	or	r18, r30
     232:	2c 93       	st	X, r18
     234:	9f bf       	out	0x3f, r25	; 63
     236:	06 c0       	rjmp	.+12     	; 0x244 <pinMode+0x72>
     238:	8f b7       	in	r24, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	e8 81       	ld	r30, Y
     23e:	2e 2b       	or	r18, r30
     240:	28 83       	st	Y, r18
     242:	8f bf       	out	0x3f, r24	; 63
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <delayMicroseconds>:
     24a:	82 30       	cpi	r24, 0x02	; 2
     24c:	91 05       	cpc	r25, r1
     24e:	38 f0       	brcs	.+14     	; 0x25e <delayMicroseconds+0x14>
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	05 97       	sbiw	r24, 0x05	; 5
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <delayMicroseconds+0x10>
     25e:	08 95       	ret

00000260 <__vector_16>:
     260:	1f 92       	push	r1
     262:	0f 92       	push	r0
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	0f 92       	push	r0
     268:	11 24       	eor	r1, r1
     26a:	2f 93       	push	r18
     26c:	3f 93       	push	r19
     26e:	8f 93       	push	r24
     270:	9f 93       	push	r25
     272:	af 93       	push	r26
     274:	bf 93       	push	r27
     276:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <timer0_millis>
     27a:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <timer0_millis+0x1>
     27e:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <timer0_millis+0x2>
     282:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <timer0_millis+0x3>
     286:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <timer0_fract>
     28a:	23 e0       	ldi	r18, 0x03	; 3
     28c:	23 0f       	add	r18, r19
     28e:	2d 37       	cpi	r18, 0x7D	; 125
     290:	20 f4       	brcc	.+8      	; 0x29a <__vector_16+0x3a>
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	a1 1d       	adc	r26, r1
     296:	b1 1d       	adc	r27, r1
     298:	05 c0       	rjmp	.+10     	; 0x2a4 <__vector_16+0x44>
     29a:	26 e8       	ldi	r18, 0x86	; 134
     29c:	23 0f       	add	r18, r19
     29e:	02 96       	adiw	r24, 0x02	; 2
     2a0:	a1 1d       	adc	r26, r1
     2a2:	b1 1d       	adc	r27, r1
     2a4:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <timer0_fract>
     2a8:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <timer0_millis>
     2ac:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <timer0_millis+0x1>
     2b0:	a0 93 97 01 	sts	0x0197, r26	; 0x800197 <timer0_millis+0x2>
     2b4:	b0 93 98 01 	sts	0x0198, r27	; 0x800198 <timer0_millis+0x3>
     2b8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
     2bc:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x1>
     2c0:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <__data_end+0x2>
     2c4:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <__data_end+0x3>
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	a1 1d       	adc	r26, r1
     2cc:	b1 1d       	adc	r27, r1
     2ce:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end>
     2d2:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__data_end+0x1>
     2d6:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <__data_end+0x2>
     2da:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <__data_end+0x3>
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	3f 91       	pop	r19
     2e8:	2f 91       	pop	r18
     2ea:	0f 90       	pop	r0
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	0f 90       	pop	r0
     2f0:	1f 90       	pop	r1
     2f2:	18 95       	reti

000002f4 <_ZN5Print5printEhi>:
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	a1 97       	sbiw	r28, 0x21	; 33
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	5c 01       	movw	r10, r24
     31a:	41 15       	cp	r20, r1
     31c:	51 05       	cpc	r21, r1
     31e:	41 f4       	brne	.+16     	; 0x330 <_ZN5Print5printEhi+0x3c>
     320:	dc 01       	movw	r26, r24
     322:	ed 91       	ld	r30, X+
     324:	fc 91       	ld	r31, X
     326:	01 90       	ld	r0, Z+
     328:	f0 81       	ld	r31, Z
     32a:	e0 2d       	mov	r30, r0
     32c:	09 95       	icall
     32e:	26 c0       	rjmp	.+76     	; 0x37c <_ZN5Print5printEhi+0x88>
     330:	19 a2       	std	Y+33, r1	; 0x21
     332:	42 30       	cpi	r20, 0x02	; 2
     334:	08 f4       	brcc	.+2      	; 0x338 <_ZN5Print5printEhi+0x44>
     336:	4a e0       	ldi	r20, 0x0A	; 10
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	8e 01       	movw	r16, r28
     340:	0f 5d       	subi	r16, 0xDF	; 223
     342:	1f 4f       	sbci	r17, 0xFF	; 255
     344:	c4 2e       	mov	r12, r20
     346:	d1 2c       	mov	r13, r1
     348:	e1 2c       	mov	r14, r1
     34a:	f1 2c       	mov	r15, r1
     34c:	a7 01       	movw	r20, r14
     34e:	96 01       	movw	r18, r12
     350:	0e 94 0f 09 	call	0x121e	; 0x121e <__udivmodsi4>
     354:	e6 2f       	mov	r30, r22
     356:	ca 01       	movw	r24, r20
     358:	b9 01       	movw	r22, r18
     35a:	01 50       	subi	r16, 0x01	; 1
     35c:	11 09       	sbc	r17, r1
     35e:	ea 30       	cpi	r30, 0x0A	; 10
     360:	14 f4       	brge	.+4      	; 0x366 <_ZN5Print5printEhi+0x72>
     362:	e0 5d       	subi	r30, 0xD0	; 208
     364:	01 c0       	rjmp	.+2      	; 0x368 <_ZN5Print5printEhi+0x74>
     366:	e9 5c       	subi	r30, 0xC9	; 201
     368:	d8 01       	movw	r26, r16
     36a:	ec 93       	st	X, r30
     36c:	23 2b       	or	r18, r19
     36e:	24 2b       	or	r18, r20
     370:	25 2b       	or	r18, r21
     372:	61 f7       	brne	.-40     	; 0x34c <_ZN5Print5printEhi+0x58>
     374:	b8 01       	movw	r22, r16
     376:	c5 01       	movw	r24, r10
     378:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN5Print5writeEPKc.constprop.2>
     37c:	a1 96       	adiw	r28, 0x21	; 33
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	bf 90       	pop	r11
     39a:	af 90       	pop	r10
     39c:	08 95       	ret

0000039e <_ZN5Print5printEPKc>:
     39e:	0c 94 87 00 	jmp	0x10e	; 0x10e <_ZN5Print5writeEPKc.constprop.2>

000003a2 <_ZN5Print5writeEPKhj>:
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	6c 01       	movw	r12, r24
     3b4:	7a 01       	movw	r14, r20
     3b6:	8b 01       	movw	r16, r22
     3b8:	c0 e0       	ldi	r28, 0x00	; 0
     3ba:	d0 e0       	ldi	r29, 0x00	; 0
     3bc:	ce 15       	cp	r28, r14
     3be:	df 05       	cpc	r29, r15
     3c0:	81 f0       	breq	.+32     	; 0x3e2 <_ZN5Print5writeEPKhj+0x40>
     3c2:	d8 01       	movw	r26, r16
     3c4:	6d 91       	ld	r22, X+
     3c6:	8d 01       	movw	r16, r26
     3c8:	d6 01       	movw	r26, r12
     3ca:	ed 91       	ld	r30, X+
     3cc:	fc 91       	ld	r31, X
     3ce:	01 90       	ld	r0, Z+
     3d0:	f0 81       	ld	r31, Z
     3d2:	e0 2d       	mov	r30, r0
     3d4:	c6 01       	movw	r24, r12
     3d6:	09 95       	icall
     3d8:	89 2b       	or	r24, r25
     3da:	11 f0       	breq	.+4      	; 0x3e0 <_ZN5Print5writeEPKhj+0x3e>
     3dc:	21 96       	adiw	r28, 0x01	; 1
     3de:	ee cf       	rjmp	.-36     	; 0x3bc <_ZN5Print5writeEPKhj+0x1a>
     3e0:	7e 01       	movw	r14, r28
     3e2:	c7 01       	movw	r24, r14
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	df 90       	pop	r13
     3f2:	cf 90       	pop	r12
     3f4:	08 95       	ret

000003f6 <_Z14critical_beginv>:
    // módulo de región crítica. Esto puede suceder cuando se está ejecutando
    // una rutina de interrupción. En este caso, no deshabilitar las
    // interrupciones

    // Lectura atómica del registro
    uint8_t status_register = SREG;
     3f6:	2f b7       	in	r18, 0x3f	; 63
    cli();
     3f8:	f8 94       	cli

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
     3fa:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_ZL11anidamiento>
     3fe:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZL11anidamiento+0x1>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     402:	89 2b       	or	r24, r25
     404:	19 f4       	brne	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
     406:	22 23       	and	r18, r18
     408:	9c f4       	brge	.+38     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     40a:	08 c0       	rjmp	.+16     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     40c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_ZL11anidamiento>
     410:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZL11anidamiento+0x1>
     414:	89 2b       	or	r24, r25
     416:	91 f0       	breq	.+36     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     418:	22 23       	and	r18, r18
     41a:	84 f0       	brlt	.+32     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
    {
        anidamiento++;
     41c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_ZL11anidamiento>
     420:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZL11anidamiento+0x1>
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <_ZL11anidamiento+0x1>
     42a:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <_ZL11anidamiento>
     42e:	08 95       	ret
    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     430:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_ZL11anidamiento>
     434:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZL11anidamiento+0x1>
     438:	89 2b       	or	r24, r25
     43a:	81 f7       	brne	.-32     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     43c:	08 95       	ret

0000043e <_Z12critical_endv>:
    // crítica, no hacer nada.
}

void critical_end(void)
{
    uint8_t status_register = SREG;
     43e:	2f b7       	in	r18, 0x3f	; 63
    cli();
     440:	f8 94       	cli

    if (anidamiento > 0) {
     442:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_ZL11anidamiento>
     446:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZL11anidamiento+0x1>
     44a:	18 16       	cp	r1, r24
     44c:	19 06       	cpc	r1, r25
     44e:	8c f4       	brge	.+34     	; 0x472 <_Z12critical_endv+0x34>
        anidamiento--;
     450:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_ZL11anidamiento>
     454:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZL11anidamiento+0x1>
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <_ZL11anidamiento+0x1>
     45e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <_ZL11anidamiento>
        if (anidamiento == 0)
     462:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_ZL11anidamiento>
     466:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZL11anidamiento+0x1>
     46a:	89 2b       	or	r24, r25
     46c:	29 f4       	brne	.+10     	; 0x478 <_Z12critical_endv+0x3a>
            sei();
     46e:	78 94       	sei
     470:	08 95       	ret
    }
    else if ((status_register & 0x80) != 0)
     472:	22 23       	and	r18, r18
     474:	0c f4       	brge	.+2      	; 0x478 <_Z12critical_endv+0x3a>
        sei();
     476:	78 94       	sei
     478:	08 95       	ret

0000047a <_Z19procesar_adc_sensorv>:


void procesar_adc_sensor()
{
	
	uint16_t medicion = analogVal * 5 * 100 / 1024;			// formula de conversion de temp del lm35
     47a:	40 91 a7 01 	lds	r20, 0x01A7	; 0x8001a7 <_ZL9analogVal>
     47e:	50 91 a8 01 	lds	r21, 0x01A8	; 0x8001a8 <_ZL9analogVal+0x1>
	callback_sensor(medicion);
     482:	24 ef       	ldi	r18, 0xF4	; 244
     484:	31 e0       	ldi	r19, 0x01	; 1
     486:	42 9f       	mul	r20, r18
     488:	c0 01       	movw	r24, r0
     48a:	43 9f       	mul	r20, r19
     48c:	90 0d       	add	r25, r0
     48e:	52 9f       	mul	r21, r18
     490:	90 0d       	add	r25, r0
     492:	11 24       	eor	r1, r1
     494:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <callback_sensor>
     498:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <callback_sensor+0x1>
     49c:	89 2f       	mov	r24, r25
     49e:	86 95       	lsr	r24
     4a0:	86 95       	lsr	r24
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	09 95       	icall
     4a6:	08 95       	ret

000004a8 <_Z15sensor_callbackj>:
}

void sensor_callback(uint16_t valor)
{
	analogVal=valor;
     4a8:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <_ZL9analogVal+0x1>
     4ac:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <_ZL9analogVal>
	fnqueue_add(procesar_adc_sensor);
     4b0:	8d e3       	ldi	r24, 0x3D	; 61
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	0e 94 97 04 	call	0x92e	; 0x92e <_Z11fnqueue_addPFvvE>
     4b8:	08 95       	ret

000004ba <_Z12sensor_setupPFviE>:
}

int sensor_setup(void (* callback_s)(int))
{
	callback_sensor=callback_s ;
     4ba:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <callback_sensor+0x1>
     4be:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <callback_sensor>
	config.channel=1;
     4c2:	ed e9       	ldi	r30, 0x9D	; 157
     4c4:	f1 e0       	ldi	r31, 0x01	; 1
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	91 83       	std	Z+1, r25	; 0x01
     4cc:	80 83       	st	Z, r24
	config.value=0;
     4ce:	15 82       	std	Z+5, r1	; 0x05
     4d0:	14 82       	std	Z+4, r1	; 0x04
	config.callback=sensor_callback;
     4d2:	84 e5       	ldi	r24, 0x54	; 84
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	93 83       	std	Z+3, r25	; 0x03
     4d8:	82 83       	std	Z+2, r24	; 0x02
	adc_init(&config);
     4da:	cf 01       	movw	r24, r30
     4dc:	0e 94 12 03 	call	0x624	; 0x624 <_Z8adc_initP7adc_cfg>
	return 1;
	//...
}
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	08 95       	ret

000004e6 <_Z20procesar_adc_tecladoj>:
	if(tecla>=0 && tecla<5)
		teclasCallback[tecla].callbackDown=handler;
}
	
void procesar_adc_teclado(uint16_t analogVal)
{
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
	int16_t k;
	for (k = 0; k < NUM_KEYS; k++)
		if (analogVal < adc_key_val[k])
     4ea:	82 33       	cpi	r24, 0x32	; 50
     4ec:	91 05       	cpc	r25, r1
     4ee:	80 f0       	brcs	.+32     	; 0x510 <_Z20procesar_adc_tecladoj+0x2a>
     4f0:	86 3e       	cpi	r24, 0xE6	; 230
     4f2:	91 05       	cpc	r25, r1
     4f4:	08 f4       	brcc	.+2      	; 0x4f8 <_Z20procesar_adc_tecladoj+0x12>
     4f6:	40 c0       	rjmp	.+128    	; 0x578 <_Z20procesar_adc_tecladoj+0x92>
     4f8:	88 36       	cpi	r24, 0x68	; 104
     4fa:	21 e0       	ldi	r18, 0x01	; 1
     4fc:	92 07       	cpc	r25, r18
     4fe:	f8 f1       	brcs	.+126    	; 0x57e <_Z20procesar_adc_tecladoj+0x98>
     500:	87 31       	cpi	r24, 0x17	; 23
     502:	22 e0       	ldi	r18, 0x02	; 2
     504:	92 07       	cpc	r25, r18
     506:	f0 f1       	brcs	.+124    	; 0x584 <_Z20procesar_adc_tecladoj+0x9e>
     508:	88 3f       	cpi	r24, 0xF8	; 248
     50a:	92 40       	sbci	r25, 0x02	; 2
     50c:	d8 f4       	brcc	.+54     	; 0x544 <_Z20procesar_adc_tecladoj+0x5e>
     50e:	3d c0       	rjmp	.+122    	; 0x58a <_Z20procesar_adc_tecladoj+0xa4>
		{
			if(oldkey!=k)
     510:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     514:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     518:	89 2b       	or	r24, r25
     51a:	09 f4       	brne	.+2      	; 0x51e <_Z20procesar_adc_tecladoj+0x38>
     51c:	3f c0       	rjmp	.+126    	; 0x59c <_Z20procesar_adc_tecladoj+0xb6>
}
	
void procesar_adc_teclado(uint16_t analogVal)
{
	int16_t k;
	for (k = 0; k < NUM_KEYS; k++)
     51e:	c0 e0       	ldi	r28, 0x00	; 0
     520:	d0 e0       	ldi	r29, 0x00	; 0
		if (analogVal < adc_key_val[k])
		{
			if(oldkey!=k)
			{	
				oldkey=k;
     522:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
     526:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
				teclasCallback[k].callbackDown();
     52a:	fe 01       	movw	r30, r28
     52c:	ee 0f       	add	r30, r30
     52e:	ff 1f       	adc	r31, r31
     530:	ee 0f       	add	r30, r30
     532:	ff 1f       	adc	r31, r31
     534:	e7 55       	subi	r30, 0x57	; 87
     536:	fe 4f       	sbci	r31, 0xFE	; 254
     538:	02 80       	ldd	r0, Z+2	; 0x02
     53a:	f3 81       	ldd	r31, Z+3	; 0x03
     53c:	e0 2d       	mov	r30, r0
     53e:	09 95       	icall
			}
			break;
		}
	if (k >= NUM_KEYS)		//solto el boton
     540:	25 97       	sbiw	r28, 0x05	; 5
     542:	64 f1       	brlt	.+88     	; 0x59c <_Z20procesar_adc_tecladoj+0xb6>
		if(oldkey!= -1)
     544:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     548:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     54c:	8f 3f       	cpi	r24, 0xFF	; 255
     54e:	2f ef       	ldi	r18, 0xFF	; 255
     550:	92 07       	cpc	r25, r18
     552:	21 f1       	breq	.+72     	; 0x59c <_Z20procesar_adc_tecladoj+0xb6>
		{
			teclasCallback[oldkey].callbackUp();
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	fc 01       	movw	r30, r24
     55e:	e7 55       	subi	r30, 0x57	; 87
     560:	fe 4f       	sbci	r31, 0xFE	; 254
     562:	01 90       	ld	r0, Z+
     564:	f0 81       	ld	r31, Z
     566:	e0 2d       	mov	r30, r0
     568:	09 95       	icall
			oldkey = -1;     // Solto el boton y cambio el valor de oldkey 
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	9f ef       	ldi	r25, 0xFF	; 255
     56e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     572:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		};
}
     576:	12 c0       	rjmp	.+36     	; 0x59c <_Z20procesar_adc_tecladoj+0xb6>
}
	
void procesar_adc_teclado(uint16_t analogVal)
{
	int16_t k;
	for (k = 0; k < NUM_KEYS; k++)
     578:	c1 e0       	ldi	r28, 0x01	; 1
     57a:	d0 e0       	ldi	r29, 0x00	; 0
     57c:	08 c0       	rjmp	.+16     	; 0x58e <_Z20procesar_adc_tecladoj+0xa8>
     57e:	c2 e0       	ldi	r28, 0x02	; 2
     580:	d0 e0       	ldi	r29, 0x00	; 0
     582:	05 c0       	rjmp	.+10     	; 0x58e <_Z20procesar_adc_tecladoj+0xa8>
     584:	c3 e0       	ldi	r28, 0x03	; 3
     586:	d0 e0       	ldi	r29, 0x00	; 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <_Z20procesar_adc_tecladoj+0xa8>
     58a:	c4 e0       	ldi	r28, 0x04	; 4
     58c:	d0 e0       	ldi	r29, 0x00	; 0
		if (analogVal < adc_key_val[k])
		{
			if(oldkey!=k)
     58e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     592:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     596:	c8 17       	cp	r28, r24
     598:	d9 07       	cpc	r29, r25
     59a:	19 f6       	brne	.-122    	; 0x522 <_Z20procesar_adc_tecladoj+0x3c>
		if(oldkey!= -1)
		{
			teclasCallback[oldkey].callbackUp();
			oldkey = -1;     // Solto el boton y cambio el valor de oldkey 
		};
}
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <_Z15key_up_callbackPFvvEi>:
static adc_cfg config;

struct callbackSTR teclasCallback[5];

void key_up_callback(void (*handler)(),int tecla){
	if(tecla>=0 && tecla<5)
     5a2:	65 30       	cpi	r22, 0x05	; 5
     5a4:	71 05       	cpc	r23, r1
     5a6:	48 f4       	brcc	.+18     	; 0x5ba <_Z15key_up_callbackPFvvEi+0x18>
		teclasCallback[tecla].callbackUp=handler;
     5a8:	66 0f       	add	r22, r22
     5aa:	77 1f       	adc	r23, r23
     5ac:	66 0f       	add	r22, r22
     5ae:	77 1f       	adc	r23, r23
     5b0:	fb 01       	movw	r30, r22
     5b2:	e7 55       	subi	r30, 0x57	; 87
     5b4:	fe 4f       	sbci	r31, 0xFE	; 254
     5b6:	91 83       	std	Z+1, r25	; 0x01
     5b8:	80 83       	st	Z, r24
     5ba:	08 95       	ret

000005bc <_Z17key_down_callbackPFvvEi>:
}
	
void key_down_callback(void (*handler)(),int tecla){
	if(tecla>=0 && tecla<5)
     5bc:	65 30       	cpi	r22, 0x05	; 5
     5be:	71 05       	cpc	r23, r1
     5c0:	48 f4       	brcc	.+18     	; 0x5d4 <_Z17key_down_callbackPFvvEi+0x18>
		teclasCallback[tecla].callbackDown=handler;
     5c2:	66 0f       	add	r22, r22
     5c4:	77 1f       	adc	r23, r23
     5c6:	66 0f       	add	r22, r22
     5c8:	77 1f       	adc	r23, r23
     5ca:	fb 01       	movw	r30, r22
     5cc:	e7 55       	subi	r30, 0x57	; 87
     5ce:	fe 4f       	sbci	r31, 0xFE	; 254
     5d0:	93 83       	std	Z+3, r25	; 0x03
     5d2:	82 83       	std	Z+2, r24	; 0x02
     5d4:	08 95       	ret

000005d6 <_Z13teclado_setupv>:



void teclado_setup()
{
	config.channel=0;
     5d6:	ed eb       	ldi	r30, 0xBD	; 189
     5d8:	f1 e0       	ldi	r31, 0x01	; 1
     5da:	11 82       	std	Z+1, r1	; 0x01
     5dc:	10 82       	st	Z, r1
	config.value=0;
     5de:	15 82       	std	Z+5, r1	; 0x05
     5e0:	14 82       	std	Z+4, r1	; 0x04
	config.callback=procesar_adc_teclado;
     5e2:	83 e7       	ldi	r24, 0x73	; 115
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	93 83       	std	Z+3, r25	; 0x03
     5e8:	82 83       	std	Z+2, r24	; 0x02
	adc_init(&config);
     5ea:	cf 01       	movw	r24, r30
     5ec:	0e 94 12 03 	call	0x624	; 0x624 <_Z8adc_initP7adc_cfg>
     5f0:	08 95       	ret

000005f2 <_Z14llamarCallbackv>:
	return 1;
}

void llamarCallback()
{
	canales[fnLlamar].callback(valor_leido);
     5f2:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <fnLlamar>
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	fc 01       	movw	r30, r24
     5fa:	ee 0f       	add	r30, r30
     5fc:	ff 1f       	adc	r31, r31
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	e8 0f       	add	r30, r24
     60c:	f9 1f       	adc	r31, r25
     60e:	e0 53       	subi	r30, 0x30	; 48
     610:	fe 4f       	sbci	r31, 0xFE	; 254
     612:	02 80       	ldd	r0, Z+2	; 0x02
     614:	f3 81       	ldd	r31, Z+3	; 0x03
     616:	e0 2d       	mov	r30, r0
     618:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <valor_leido>
     61c:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <valor_leido+0x1>
     620:	09 95       	icall
     622:	08 95       	ret

00000624 <_Z8adc_initP7adc_cfg>:
uint8_t seteados[6];		// Almacena que canales estan en uso.
uint16_t valor_leido;		// Almacena el ultimo valor leido (util).
uint8_t i;

int adc_init(adc_cfg *cfg)
{
     624:	fc 01       	movw	r30, r24
	if(cfg->channel>5)
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	06 97       	sbiw	r24, 0x06	; 6
     62c:	0c f0       	brlt	.+2      	; 0x630 <_Z8adc_initP7adc_cfg+0xc>
     62e:	92 c0       	rjmp	.+292    	; 0x754 <_Z8adc_initP7adc_cfg+0x130>
	{
		return 0;
	}
	if(iniciado==0)
     630:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <iniciado>
     634:	81 11       	cpse	r24, r1
     636:	6a c0       	rjmp	.+212    	; 0x70c <_Z8adc_initP7adc_cfg+0xe8>
	{
		ADMUX &= ~(1<<ADLAR);
     638:	ac e7       	ldi	r26, 0x7C	; 124
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	8c 91       	ld	r24, X
     63e:	8f 7d       	andi	r24, 0xDF	; 223
     640:	8c 93       	st	X, r24
		ADMUX |= (1<<REFS0);
     642:	8c 91       	ld	r24, X
     644:	80 64       	ori	r24, 0x40	; 64
     646:	8c 93       	st	X, r24
		ADMUX &= ~(1<<MUX3 | 1<<MUX2 | 1<<MUX1 | 1<<MUX0);
     648:	8c 91       	ld	r24, X
     64a:	80 7f       	andi	r24, 0xF0	; 240
     64c:	8c 93       	st	X, r24

		switch(cfg->channel)
     64e:	80 81       	ld	r24, Z
     650:	91 81       	ldd	r25, Z+1	; 0x01
     652:	83 30       	cpi	r24, 0x03	; 3
     654:	91 05       	cpc	r25, r1
     656:	d1 f0       	breq	.+52     	; 0x68c <_Z8adc_initP7adc_cfg+0x68>
     658:	34 f4       	brge	.+12     	; 0x666 <_Z8adc_initP7adc_cfg+0x42>
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	91 05       	cpc	r25, r1
     65e:	51 f0       	breq	.+20     	; 0x674 <_Z8adc_initP7adc_cfg+0x50>
     660:	02 97       	sbiw	r24, 0x02	; 2
     662:	71 f0       	breq	.+28     	; 0x680 <_Z8adc_initP7adc_cfg+0x5c>
     664:	2a c0       	rjmp	.+84     	; 0x6ba <_Z8adc_initP7adc_cfg+0x96>
     666:	85 30       	cpi	r24, 0x05	; 5
     668:	91 05       	cpc	r25, r1
     66a:	e1 f0       	breq	.+56     	; 0x6a4 <_Z8adc_initP7adc_cfg+0x80>
     66c:	ac f0       	brlt	.+42     	; 0x698 <_Z8adc_initP7adc_cfg+0x74>
     66e:	06 97       	sbiw	r24, 0x06	; 6
     670:	f9 f0       	breq	.+62     	; 0x6b0 <_Z8adc_initP7adc_cfg+0x8c>
     672:	23 c0       	rjmp	.+70     	; 0x6ba <_Z8adc_initP7adc_cfg+0x96>
		{
			case 0: break;
			case 1:
			{
				ADMUX |= (1<<MUX0);
     674:	ac e7       	ldi	r26, 0x7C	; 124
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	8c 91       	ld	r24, X
     67a:	81 60       	ori	r24, 0x01	; 1
     67c:	8c 93       	st	X, r24
			}break;
     67e:	1d c0       	rjmp	.+58     	; 0x6ba <_Z8adc_initP7adc_cfg+0x96>
			case 2:
			{
				ADMUX |= (1<<MUX1);
     680:	ac e7       	ldi	r26, 0x7C	; 124
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	8c 91       	ld	r24, X
     686:	82 60       	ori	r24, 0x02	; 2
     688:	8c 93       	st	X, r24
			}break;
     68a:	17 c0       	rjmp	.+46     	; 0x6ba <_Z8adc_initP7adc_cfg+0x96>
			case 3:
			{
				ADMUX |= ( (1<<MUX1) | (1<<MUX0));
     68c:	ac e7       	ldi	r26, 0x7C	; 124
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	8c 91       	ld	r24, X
     692:	83 60       	ori	r24, 0x03	; 3
     694:	8c 93       	st	X, r24
			}break;
     696:	11 c0       	rjmp	.+34     	; 0x6ba <_Z8adc_initP7adc_cfg+0x96>
			case 4:
			{
				ADMUX |= (1<<MUX2);
     698:	ac e7       	ldi	r26, 0x7C	; 124
     69a:	b0 e0       	ldi	r27, 0x00	; 0
     69c:	8c 91       	ld	r24, X
     69e:	84 60       	ori	r24, 0x04	; 4
     6a0:	8c 93       	st	X, r24
			}break;
     6a2:	0b c0       	rjmp	.+22     	; 0x6ba <_Z8adc_initP7adc_cfg+0x96>
			case 5:
			{
				ADMUX |= ((1<<MUX2)|(1<<MUX0));
     6a4:	ac e7       	ldi	r26, 0x7C	; 124
     6a6:	b0 e0       	ldi	r27, 0x00	; 0
     6a8:	8c 91       	ld	r24, X
     6aa:	85 60       	ori	r24, 0x05	; 5
     6ac:	8c 93       	st	X, r24
			}break;
     6ae:	05 c0       	rjmp	.+10     	; 0x6ba <_Z8adc_initP7adc_cfg+0x96>
			case 6:
			{
				ADMUX |= ((1<<MUX2) |(1<<MUX1));
     6b0:	ac e7       	ldi	r26, 0x7C	; 124
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	8c 91       	ld	r24, X
     6b6:	86 60       	ori	r24, 0x06	; 6
     6b8:	8c 93       	st	X, r24
			}break;
		}

		ADCSRA |= 1<<ADEN;
     6ba:	aa e7       	ldi	r26, 0x7A	; 122
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	8c 91       	ld	r24, X
     6c0:	80 68       	ori	r24, 0x80	; 128
     6c2:	8c 93       	st	X, r24
		ADCSRA &= ~(1<<ADATE);
     6c4:	8c 91       	ld	r24, X
     6c6:	8f 7d       	andi	r24, 0xDF	; 223
     6c8:	8c 93       	st	X, r24
		ADCSRA |= (1<<ADPS2 | 1<<ADPS1 | 1<<ADPS2);
     6ca:	8c 91       	ld	r24, X
     6cc:	86 60       	ori	r24, 0x06	; 6
     6ce:	8c 93       	st	X, r24
		ADCSRA |= 1<<ADIE;
     6d0:	8c 91       	ld	r24, X
     6d2:	88 60       	ori	r24, 0x08	; 8
     6d4:	8c 93       	st	X, r24
		sei();
     6d6:	78 94       	sei
		ADCSRA |= 1<<ADSC;
     6d8:	8c 91       	ld	r24, X
     6da:	80 64       	ori	r24, 0x40	; 64
     6dc:	8c 93       	st	X, r24
		for(i=0;i<6;i++)
		{
			seteados[i]=0;
     6de:	aa ec       	ldi	r26, 0xCA	; 202
     6e0:	b1 e0       	ldi	r27, 0x01	; 1
     6e2:	1c 92       	st	X, r1
     6e4:	11 96       	adiw	r26, 0x01	; 1
     6e6:	1c 92       	st	X, r1
     6e8:	11 97       	sbiw	r26, 0x01	; 1
     6ea:	12 96       	adiw	r26, 0x02	; 2
     6ec:	1c 92       	st	X, r1
     6ee:	12 97       	sbiw	r26, 0x02	; 2
     6f0:	13 96       	adiw	r26, 0x03	; 3
     6f2:	1c 92       	st	X, r1
     6f4:	13 97       	sbiw	r26, 0x03	; 3
     6f6:	14 96       	adiw	r26, 0x04	; 4
     6f8:	1c 92       	st	X, r1
     6fa:	14 97       	sbiw	r26, 0x04	; 4
     6fc:	15 96       	adiw	r26, 0x05	; 5
     6fe:	1c 92       	st	X, r1
     700:	86 e0       	ldi	r24, 0x06	; 6
     702:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <i>
		}

		iniciado=1;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <iniciado>
	}
	if (seteados[cfg->channel] != 0)
     70c:	80 81       	ld	r24, Z
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	dc 01       	movw	r26, r24
     712:	a6 53       	subi	r26, 0x36	; 54
     714:	be 4f       	sbci	r27, 0xFE	; 254
     716:	2c 91       	ld	r18, X
     718:	21 11       	cpse	r18, r1
     71a:	1f c0       	rjmp	.+62     	; 0x75a <_Z8adc_initP7adc_cfg+0x136>
	{
		return 0;
	}
	seteados[cfg->channel] = 1;
     71c:	dc 01       	movw	r26, r24
     71e:	a6 53       	subi	r26, 0x36	; 54
     720:	be 4f       	sbci	r27, 0xFE	; 254
     722:	21 e0       	ldi	r18, 0x01	; 1
     724:	2c 93       	st	X, r18
	canales[cfg->channel] = * cfg;
     726:	80 81       	ld	r24, Z
     728:	91 81       	ldd	r25, Z+1	; 0x01
     72a:	dc 01       	movw	r26, r24
     72c:	aa 0f       	add	r26, r26
     72e:	bb 1f       	adc	r27, r27
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	a8 0f       	add	r26, r24
     73e:	b9 1f       	adc	r27, r25
     740:	a0 53       	subi	r26, 0x30	; 48
     742:	be 4f       	sbci	r27, 0xFE	; 254
     744:	8a e0       	ldi	r24, 0x0A	; 10
     746:	01 90       	ld	r0, Z+
     748:	0d 92       	st	X+, r0
     74a:	8a 95       	dec	r24
     74c:	e1 f7       	brne	.-8      	; 0x746 <_Z8adc_initP7adc_cfg+0x122>
	return 1;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	08 95       	ret

int adc_init(adc_cfg *cfg)
{
	if(cfg->channel>5)
	{
		return 0;
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	08 95       	ret

		iniciado=1;
	}
	if (seteados[cfg->channel] != 0)
	{
		return 0;
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
	}
	seteados[cfg->channel] = 1;
	canales[cfg->channel] = * cfg;
	return 1;
}
     75e:	08 95       	ret

00000760 <__vector_21>:
{
	canales[fnLlamar].callback(valor_leido);
}
//uint8_t corte=0;
ISR (ADC_vect)
{
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	cf 93       	push	r28
     780:	ef 93       	push	r30
     782:	ff 93       	push	r31
	if(contador>=100)
     784:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <contador>
     788:	84 36       	cpi	r24, 0x64	; 100
     78a:	08 f4       	brcc	.+2      	; 0x78e <__vector_21+0x2e>
     78c:	7a c0       	rjmp	.+244    	; 0x882 <__vector_21+0x122>
	{
		valor_leido = ADC;
     78e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     792:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     796:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <valor_leido+0x1>
     79a:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <valor_leido>
		fnLlamar = canalConvirtiendo;
     79e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <canalConvirtiendo>
     7a2:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <fnLlamar>
		fnqueue_add(llamarCallback);
     7a6:	89 ef       	ldi	r24, 0xF9	; 249
     7a8:	92 e0       	ldi	r25, 0x02	; 2
     7aa:	0e 94 97 04 	call	0x92e	; 0x92e <_Z11fnqueue_addPFvvE>
		for(i=1;i<=6;i++)
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <i>
		{
			if(seteados[(canalConvirtiendo+i)%6]==1)
     7b4:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <canalConvirtiendo>
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	c9 01       	movw	r24, r18
     7bc:	01 96       	adiw	r24, 0x01	; 1
     7be:	66 e0       	ldi	r22, 0x06	; 6
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__divmodhi4>
     7c6:	58 2f       	mov	r21, r24
     7c8:	fc 01       	movw	r30, r24
     7ca:	e6 53       	subi	r30, 0x36	; 54
     7cc:	fe 4f       	sbci	r31, 0xFE	; 254
     7ce:	80 81       	ld	r24, Z
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <__vector_21+0x76>
     7d4:	5f c0       	rjmp	.+190    	; 0x894 <__vector_21+0x134>
     7d6:	0e c0       	rjmp	.+28     	; 0x7f4 <__vector_21+0x94>
     7d8:	48 2f       	mov	r20, r24
     7da:	c9 01       	movw	r24, r18
     7dc:	bf 01       	movw	r22, r30
     7de:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__divmodhi4>
     7e2:	58 2f       	mov	r21, r24
     7e4:	dc 01       	movw	r26, r24
     7e6:	a6 53       	subi	r26, 0x36	; 54
     7e8:	be 4f       	sbci	r27, 0xFE	; 254
     7ea:	8c 91       	ld	r24, X
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	29 f4       	brne	.+10     	; 0x7fa <__vector_21+0x9a>
     7f0:	c0 93 c7 01 	sts	0x01C7, r28	; 0x8001c7 <i>
			{
				canalConvirtiendo=(canalConvirtiendo+i)%6;
     7f4:	50 93 0e 02 	sts	0x020E, r21	; 0x80020e <canalConvirtiendo>
				break;
     7f8:	09 c0       	rjmp	.+18     	; 0x80c <__vector_21+0xac>
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	84 0f       	add	r24, r20
     7fe:	2f 5f       	subi	r18, 0xFF	; 255
     800:	3f 4f       	sbci	r19, 0xFF	; 255
	if(contador>=100)
	{
		valor_leido = ADC;
		fnLlamar = canalConvirtiendo;
		fnqueue_add(llamarCallback);
		for(i=1;i<=6;i++)
     802:	c4 2f       	mov	r28, r20
     804:	88 30       	cpi	r24, 0x08	; 8
     806:	41 f7       	brne	.-48     	; 0x7d8 <__vector_21+0x78>
     808:	40 93 c7 01 	sts	0x01C7, r20	; 0x8001c7 <i>
			{
				canalConvirtiendo=(canalConvirtiendo+i)%6;
				break;
			}
		}
        ADMUX &= ~(1<<MUX3 | 1<<MUX2 | 1<<MUX1 | 1<<MUX0);
     80c:	ec e7       	ldi	r30, 0x7C	; 124
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	80 7f       	andi	r24, 0xF0	; 240
     814:	80 83       	st	Z, r24
        switch(canalConvirtiendo)
     816:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <canalConvirtiendo>
     81a:	83 30       	cpi	r24, 0x03	; 3
     81c:	c1 f0       	breq	.+48     	; 0x84e <__vector_21+0xee>
     81e:	28 f4       	brcc	.+10     	; 0x82a <__vector_21+0xca>
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	49 f0       	breq	.+18     	; 0x836 <__vector_21+0xd6>
     824:	82 30       	cpi	r24, 0x02	; 2
     826:	69 f0       	breq	.+26     	; 0x842 <__vector_21+0xe2>
     828:	29 c0       	rjmp	.+82     	; 0x87c <__vector_21+0x11c>
     82a:	85 30       	cpi	r24, 0x05	; 5
     82c:	e1 f0       	breq	.+56     	; 0x866 <__vector_21+0x106>
     82e:	a8 f0       	brcs	.+42     	; 0x85a <__vector_21+0xfa>
     830:	86 30       	cpi	r24, 0x06	; 6
     832:	f9 f0       	breq	.+62     	; 0x872 <__vector_21+0x112>
     834:	23 c0       	rjmp	.+70     	; 0x87c <__vector_21+0x11c>
        {
            case 0: break;
            case 1:
            {
                ADMUX |= (1<<MUX0);
     836:	ec e7       	ldi	r30, 0x7C	; 124
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	81 60       	ori	r24, 0x01	; 1
     83e:	80 83       	st	Z, r24
            }break;
     840:	1d c0       	rjmp	.+58     	; 0x87c <__vector_21+0x11c>
            case 2:
            {
                ADMUX |= (1<<MUX1);
     842:	ec e7       	ldi	r30, 0x7C	; 124
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	82 60       	ori	r24, 0x02	; 2
     84a:	80 83       	st	Z, r24
            }break;
     84c:	17 c0       	rjmp	.+46     	; 0x87c <__vector_21+0x11c>
            case 3:
            {
                ADMUX |= ( (1<<MUX1) | (1<<MUX0));
     84e:	ec e7       	ldi	r30, 0x7C	; 124
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
     854:	83 60       	ori	r24, 0x03	; 3
     856:	80 83       	st	Z, r24
            }break;
     858:	11 c0       	rjmp	.+34     	; 0x87c <__vector_21+0x11c>
            case 4:
            {
                ADMUX |= (1<<MUX2);
     85a:	ec e7       	ldi	r30, 0x7C	; 124
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	84 60       	ori	r24, 0x04	; 4
     862:	80 83       	st	Z, r24
            }break;
     864:	0b c0       	rjmp	.+22     	; 0x87c <__vector_21+0x11c>
            case 5:
            {
                ADMUX |= ((1<<MUX2)|(1<<MUX0));
     866:	ec e7       	ldi	r30, 0x7C	; 124
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	85 60       	ori	r24, 0x05	; 5
     86e:	80 83       	st	Z, r24
            }break;
     870:	05 c0       	rjmp	.+10     	; 0x87c <__vector_21+0x11c>
            case 6:
            {
                ADMUX |= ((1<<MUX2) |(1<<MUX1));
     872:	ec e7       	ldi	r30, 0x7C	; 124
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	86 60       	ori	r24, 0x06	; 6
     87a:	80 83       	st	Z, r24
            }break;
        }
		contador = 0;
     87c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <contador>
     880:	03 c0       	rjmp	.+6      	; 0x888 <__vector_21+0x128>
	} else
	{
		contador++;
     882:	8f 5f       	subi	r24, 0xFF	; 255
     884:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <contador>

	}
	ADCSRA |= 1<<ADSC;
     888:	ea e7       	ldi	r30, 0x7A	; 122
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	80 64       	ori	r24, 0x40	; 64
     890:	80 83       	st	Z, r24

}
     892:	07 c0       	rjmp	.+14     	; 0x8a2 <__vector_21+0x142>
     894:	2e 5f       	subi	r18, 0xFE	; 254
     896:	3f 4f       	sbci	r19, 0xFF	; 255
	if(contador>=100)
	{
		valor_leido = ADC;
		fnLlamar = canalConvirtiendo;
		fnqueue_add(llamarCallback);
		for(i=1;i<=6;i++)
     898:	43 e0       	ldi	r20, 0x03	; 3
     89a:	c2 e0       	ldi	r28, 0x02	; 2
		{
			if(seteados[(canalConvirtiendo+i)%6]==1)
     89c:	e6 e0       	ldi	r30, 0x06	; 6
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	9c cf       	rjmp	.-200    	; 0x7da <__vector_21+0x7a>
		contador++;

	}
	ADCSRA |= 1<<ADSC;

}
     8a2:	ff 91       	pop	r31
     8a4:	ef 91       	pop	r30
     8a6:	cf 91       	pop	r28
     8a8:	bf 91       	pop	r27
     8aa:	af 91       	pop	r26
     8ac:	9f 91       	pop	r25
     8ae:	8f 91       	pop	r24
     8b0:	7f 91       	pop	r23
     8b2:	6f 91       	pop	r22
     8b4:	5f 91       	pop	r21
     8b6:	4f 91       	pop	r20
     8b8:	3f 91       	pop	r19
     8ba:	2f 91       	pop	r18
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <_Z12fnqueue_initv>:
	fnqueue_tail,
	fnqueue_count;

bool fnqueue_init(void)
{
	fnqueue_head = 0;
     8c6:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <_ZL12fnqueue_head>
	fnqueue_tail = 0;
     8ca:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <_ZL12fnqueue_tail>
	fnqueue_count = 0;
     8ce:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <_ZL13fnqueue_count>
    
    return true;
}
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	08 95       	ret

000008d6 <_Z11fnqueue_runv>:

bool fnqueue_run(void)
{
    critical_begin();
     8d6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z14critical_beginv>
    if (fnqueue_count > 0)
     8da:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_ZL13fnqueue_count>
     8de:	88 23       	and	r24, r24
     8e0:	11 f1       	breq	.+68     	; 0x926 <__stack+0x27>
    {
        critical_end();
     8e2:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z12critical_endv>

        fnqueue_functions[fnqueue_head]();
     8e6:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <_ZL12fnqueue_head>
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	ee 0f       	add	r30, r30
     8ee:	ff 1f       	adc	r31, r31
     8f0:	ed 5e       	subi	r30, 0xED	; 237
     8f2:	fd 4f       	sbci	r31, 0xFD	; 253
     8f4:	01 90       	ld	r0, Z+
     8f6:	f0 81       	ld	r31, Z
     8f8:	e0 2d       	mov	r30, r0
     8fa:	09 95       	icall
        critical_begin();
     8fc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z14critical_beginv>
        fnqueue_head = (fnqueue_head + 1) % FNQUEUE_LENGTH;
     900:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <_ZL12fnqueue_head>
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	8f 70       	andi	r24, 0x0F	; 15
     90a:	90 78       	andi	r25, 0x80	; 128
     90c:	99 23       	and	r25, r25
     90e:	24 f4       	brge	.+8      	; 0x918 <__stack+0x19>
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	80 6f       	ori	r24, 0xF0	; 240
     914:	9f 6f       	ori	r25, 0xFF	; 255
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <_ZL12fnqueue_head>
        fnqueue_count--;
     91c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_ZL13fnqueue_count>
     920:	81 50       	subi	r24, 0x01	; 1
     922:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <_ZL13fnqueue_count>
    }
    critical_end();
     926:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z12critical_endv>

	return 1;
}
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	08 95       	ret

0000092e <_Z11fnqueue_addPFvvE>:

bool fnqueue_add(void (*function)(void))
{
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ec 01       	movw	r28, r24
	bool result = false;
	
    critical_begin();
     934:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z14critical_beginv>
    if (fnqueue_count < FNQUEUE_LENGTH)
     938:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <_ZL13fnqueue_count>
     93c:	20 31       	cpi	r18, 0x10	; 16
     93e:	d0 f4       	brcc	.+52     	; 0x974 <_Z11fnqueue_addPFvvE+0x46>
    {
        fnqueue_functions[fnqueue_tail] = function;
     940:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <_ZL12fnqueue_tail>
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	fc 01       	movw	r30, r24
     948:	ee 0f       	add	r30, r30
     94a:	ff 1f       	adc	r31, r31
     94c:	ed 5e       	subi	r30, 0xED	; 237
     94e:	fd 4f       	sbci	r31, 0xFD	; 253
     950:	d1 83       	std	Z+1, r29	; 0x01
     952:	c0 83       	st	Z, r28
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	8f 70       	andi	r24, 0x0F	; 15
     958:	90 78       	andi	r25, 0x80	; 128
     95a:	99 23       	and	r25, r25
     95c:	24 f4       	brge	.+8      	; 0x966 <_Z11fnqueue_addPFvvE+0x38>
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	80 6f       	ori	r24, 0xF0	; 240
     962:	9f 6f       	ori	r25, 0xFF	; 255
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <_ZL12fnqueue_tail>
        fnqueue_count++;
     96a:	2f 5f       	subi	r18, 0xFF	; 255
     96c:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <_ZL13fnqueue_count>
        result = true;
     970:	c1 e0       	ldi	r28, 0x01	; 1
     972:	01 c0       	rjmp	.+2      	; 0x976 <_Z11fnqueue_addPFvvE+0x48>
	return 1;
}

bool fnqueue_add(void (*function)(void))
{
	bool result = false;
     974:	c0 e0       	ldi	r28, 0x00	; 0
        fnqueue_functions[fnqueue_tail] = function;
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
        fnqueue_count++;
        result = true;
    }
    critical_end();
     976:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z12critical_endv>
    return result;
     97a:	8c 2f       	mov	r24, r28
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <_ZN5Print17availableForWriteEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	08 95       	ret

00000988 <_ZN5Print5flushEv>:
     988:	08 95       	ret

0000098a <_ZN13LiquidCrystal11pulseEnableEv>:
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ec 01       	movw	r28, r24
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	8e 81       	ldd	r24, Y+6	; 0x06
     994:	0e 94 9c 00 	call	0x138	; 0x138 <digitalWrite>
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 25 01 	call	0x24a	; 0x24a <delayMicroseconds>
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	8e 81       	ldd	r24, Y+6	; 0x06
     9a4:	0e 94 9c 00 	call	0x138	; 0x138 <digitalWrite>
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 25 01 	call	0x24a	; 0x24a <delayMicroseconds>
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	8e 81       	ldd	r24, Y+6	; 0x06
     9b4:	0e 94 9c 00 	call	0x138	; 0x138 <digitalWrite>
     9b8:	84 e6       	ldi	r24, 0x64	; 100
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 25 01 	call	0x24a	; 0x24a <delayMicroseconds>
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <_ZN13LiquidCrystal10write4bitsEh>:
     9c6:	cf 92       	push	r12
     9c8:	df 92       	push	r13
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	6c 01       	movw	r12, r24
     9d8:	8c 01       	movw	r16, r24
     9da:	09 5f       	subi	r16, 0xF9	; 249
     9dc:	1f 4f       	sbci	r17, 0xFF	; 255
     9de:	c0 e0       	ldi	r28, 0x00	; 0
     9e0:	d0 e0       	ldi	r29, 0x00	; 0
     9e2:	e6 2e       	mov	r14, r22
     9e4:	f1 2c       	mov	r15, r1
     9e6:	b7 01       	movw	r22, r14
     9e8:	0c 2e       	mov	r0, r28
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <_ZN13LiquidCrystal10write4bitsEh+0x2a>
     9ec:	75 95       	asr	r23
     9ee:	67 95       	ror	r22
     9f0:	0a 94       	dec	r0
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <_ZN13LiquidCrystal10write4bitsEh+0x26>
     9f4:	61 70       	andi	r22, 0x01	; 1
     9f6:	f8 01       	movw	r30, r16
     9f8:	81 91       	ld	r24, Z+
     9fa:	8f 01       	movw	r16, r30
     9fc:	0e 94 9c 00 	call	0x138	; 0x138 <digitalWrite>
     a00:	21 96       	adiw	r28, 0x01	; 1
     a02:	c4 30       	cpi	r28, 0x04	; 4
     a04:	d1 05       	cpc	r29, r1
     a06:	79 f7       	brne	.-34     	; 0x9e6 <_ZN13LiquidCrystal10write4bitsEh+0x20>
     a08:	c6 01       	movw	r24, r12
     a0a:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN13LiquidCrystal11pulseEnableEv>
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	df 90       	pop	r13
     a1c:	cf 90       	pop	r12
     a1e:	08 95       	ret

00000a20 <_ZN13LiquidCrystal10write8bitsEh>:
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	6c 01       	movw	r12, r24
     a32:	8c 01       	movw	r16, r24
     a34:	09 5f       	subi	r16, 0xF9	; 249
     a36:	1f 4f       	sbci	r17, 0xFF	; 255
     a38:	c0 e0       	ldi	r28, 0x00	; 0
     a3a:	d0 e0       	ldi	r29, 0x00	; 0
     a3c:	e6 2e       	mov	r14, r22
     a3e:	f1 2c       	mov	r15, r1
     a40:	b7 01       	movw	r22, r14
     a42:	0c 2e       	mov	r0, r28
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <_ZN13LiquidCrystal10write8bitsEh+0x2a>
     a46:	75 95       	asr	r23
     a48:	67 95       	ror	r22
     a4a:	0a 94       	dec	r0
     a4c:	e2 f7       	brpl	.-8      	; 0xa46 <_ZN13LiquidCrystal10write8bitsEh+0x26>
     a4e:	61 70       	andi	r22, 0x01	; 1
     a50:	f8 01       	movw	r30, r16
     a52:	81 91       	ld	r24, Z+
     a54:	8f 01       	movw	r16, r30
     a56:	0e 94 9c 00 	call	0x138	; 0x138 <digitalWrite>
     a5a:	21 96       	adiw	r28, 0x01	; 1
     a5c:	c8 30       	cpi	r28, 0x08	; 8
     a5e:	d1 05       	cpc	r29, r1
     a60:	79 f7       	brne	.-34     	; 0xa40 <_ZN13LiquidCrystal10write8bitsEh+0x20>
     a62:	c6 01       	movw	r24, r12
     a64:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN13LiquidCrystal11pulseEnableEv>
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	ff 90       	pop	r15
     a72:	ef 90       	pop	r14
     a74:	df 90       	pop	r13
     a76:	cf 90       	pop	r12
     a78:	08 95       	ret

00000a7a <_ZN13LiquidCrystal4sendEhh>:
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	ec 01       	movw	r28, r24
     a82:	16 2f       	mov	r17, r22
     a84:	64 2f       	mov	r22, r20
     a86:	8c 81       	ldd	r24, Y+4	; 0x04
     a88:	0e 94 9c 00 	call	0x138	; 0x138 <digitalWrite>
     a8c:	8d 81       	ldd	r24, Y+5	; 0x05
     a8e:	8f 3f       	cpi	r24, 0xFF	; 255
     a90:	19 f0       	breq	.+6      	; 0xa98 <_ZN13LiquidCrystal4sendEhh+0x1e>
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	0e 94 9c 00 	call	0x138	; 0x138 <digitalWrite>
     a98:	8f 85       	ldd	r24, Y+15	; 0x0f
     a9a:	84 ff       	sbrs	r24, 4
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <_ZN13LiquidCrystal4sendEhh+0x2e>
     a9e:	61 2f       	mov	r22, r17
     aa0:	ce 01       	movw	r24, r28
     aa2:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN13LiquidCrystal10write8bitsEh>
     aa6:	11 c0       	rjmp	.+34     	; 0xaca <_ZN13LiquidCrystal4sendEhh+0x50>
     aa8:	61 2f       	mov	r22, r17
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	75 95       	asr	r23
     aae:	67 95       	ror	r22
     ab0:	75 95       	asr	r23
     ab2:	67 95       	ror	r22
     ab4:	75 95       	asr	r23
     ab6:	67 95       	ror	r22
     ab8:	75 95       	asr	r23
     aba:	67 95       	ror	r22
     abc:	ce 01       	movw	r24, r28
     abe:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN13LiquidCrystal10write4bitsEh>
     ac2:	61 2f       	mov	r22, r17
     ac4:	ce 01       	movw	r24, r28
     ac6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN13LiquidCrystal10write4bitsEh>
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	08 95       	ret

00000ad2 <_ZN13LiquidCrystal5clearEv>:
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN13LiquidCrystal4sendEhh>
     ada:	80 ed       	ldi	r24, 0xD0	; 208
     adc:	97 e0       	ldi	r25, 0x07	; 7
     ade:	0e 94 25 01 	call	0x24a	; 0x24a <delayMicroseconds>
     ae2:	08 95       	ret

00000ae4 <_ZN13LiquidCrystal9setCursorEhh>:
     ae4:	fc 01       	movw	r30, r24
     ae6:	44 30       	cpi	r20, 0x04	; 4
     ae8:	08 f0       	brcs	.+2      	; 0xaec <_ZN13LiquidCrystal9setCursorEhh+0x8>
     aea:	43 e0       	ldi	r20, 0x03	; 3
     aec:	83 89       	ldd	r24, Z+19	; 0x13
     aee:	48 17       	cp	r20, r24
     af0:	10 f0       	brcs	.+4      	; 0xaf6 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     af2:	4f ef       	ldi	r20, 0xFF	; 255
     af4:	48 0f       	add	r20, r24
     af6:	df 01       	movw	r26, r30
     af8:	a4 0f       	add	r26, r20
     afa:	b1 1d       	adc	r27, r1
     afc:	54 96       	adiw	r26, 0x14	; 20
     afe:	9c 91       	ld	r25, X
     b00:	69 0f       	add	r22, r25
     b02:	60 68       	ori	r22, 0x80	; 128
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	cf 01       	movw	r24, r30
     b08:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN13LiquidCrystal4sendEhh>
     b0c:	08 95       	ret

00000b0e <_ZN13LiquidCrystal7displayEv>:
     b0e:	fc 01       	movw	r30, r24
     b10:	60 89       	ldd	r22, Z+16	; 0x10
     b12:	26 2f       	mov	r18, r22
     b14:	24 60       	ori	r18, 0x04	; 4
     b16:	20 8b       	std	Z+16, r18	; 0x10
     b18:	6c 60       	ori	r22, 0x0C	; 12
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN13LiquidCrystal4sendEhh>
     b20:	08 95       	ret

00000b22 <_ZN13LiquidCrystal5beginEhhh>:
     b22:	af 92       	push	r10
     b24:	bf 92       	push	r11
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	ec 01       	movw	r28, r24
     b38:	42 30       	cpi	r20, 0x02	; 2
     b3a:	18 f0       	brcs	.+6      	; 0xb42 <_ZN13LiquidCrystal5beginEhhh+0x20>
     b3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b3e:	88 60       	ori	r24, 0x08	; 8
     b40:	8f 87       	std	Y+15, r24	; 0x0f
     b42:	4b 8b       	std	Y+19, r20	; 0x13
     b44:	1c 8a       	std	Y+20, r1	; 0x14
     b46:	80 e4       	ldi	r24, 0x40	; 64
     b48:	8d 8b       	std	Y+21, r24	; 0x15
     b4a:	6e 8b       	std	Y+22, r22	; 0x16
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	60 5c       	subi	r22, 0xC0	; 192
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	6f 8b       	std	Y+23, r22	; 0x17
     b54:	22 23       	and	r18, r18
     b56:	29 f0       	breq	.+10     	; 0xb62 <_ZN13LiquidCrystal5beginEhhh+0x40>
     b58:	41 30       	cpi	r20, 0x01	; 1
     b5a:	19 f4       	brne	.+6      	; 0xb62 <_ZN13LiquidCrystal5beginEhhh+0x40>
     b5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b5e:	84 60       	ori	r24, 0x04	; 4
     b60:	8f 87       	std	Y+15, r24	; 0x0f
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <pinMode>
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	8f 3f       	cpi	r24, 0xFF	; 255
     b6e:	19 f0       	breq	.+6      	; 0xb76 <_ZN13LiquidCrystal5beginEhhh+0x54>
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <pinMode>
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	8e 81       	ldd	r24, Y+6	; 0x06
     b7a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <pinMode>
     b7e:	7e 01       	movw	r14, r28
     b80:	87 e0       	ldi	r24, 0x07	; 7
     b82:	e8 0e       	add	r14, r24
     b84:	f1 1c       	adc	r15, r1
     b86:	00 e0       	ldi	r16, 0x00	; 0
     b88:	10 e0       	ldi	r17, 0x00	; 0
     b8a:	68 94       	set
     b8c:	aa 24       	eor	r10, r10
     b8e:	a3 f8       	bld	r10, 3
     b90:	b1 2c       	mov	r11, r1
     b92:	68 94       	set
     b94:	cc 24       	eor	r12, r12
     b96:	c2 f8       	bld	r12, 2
     b98:	d1 2c       	mov	r13, r1
     b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b9c:	84 fd       	sbrc	r24, 4
     b9e:	03 c0       	rjmp	.+6      	; 0xba6 <_ZN13LiquidCrystal5beginEhhh+0x84>
     ba0:	8c 2d       	mov	r24, r12
     ba2:	9d 2d       	mov	r25, r13
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <_ZN13LiquidCrystal5beginEhhh+0x88>
     ba6:	8a 2d       	mov	r24, r10
     ba8:	9b 2d       	mov	r25, r11
     baa:	08 17       	cp	r16, r24
     bac:	19 07       	cpc	r17, r25
     bae:	4c f4       	brge	.+18     	; 0xbc2 <_ZN13LiquidCrystal5beginEhhh+0xa0>
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	f7 01       	movw	r30, r14
     bb4:	81 91       	ld	r24, Z+
     bb6:	7f 01       	movw	r14, r30
     bb8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <pinMode>
     bbc:	0f 5f       	subi	r16, 0xFF	; 255
     bbe:	1f 4f       	sbci	r17, 0xFF	; 255
     bc0:	ec cf       	rjmp	.-40     	; 0xb9a <_ZN13LiquidCrystal5beginEhhh+0x78>
     bc2:	80 e5       	ldi	r24, 0x50	; 80
     bc4:	93 ec       	ldi	r25, 0xC3	; 195
     bc6:	0e 94 25 01 	call	0x24a	; 0x24a <delayMicroseconds>
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	8c 81       	ldd	r24, Y+4	; 0x04
     bce:	0e 94 9c 00 	call	0x138	; 0x138 <digitalWrite>
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	8e 81       	ldd	r24, Y+6	; 0x06
     bd6:	0e 94 9c 00 	call	0x138	; 0x138 <digitalWrite>
     bda:	8d 81       	ldd	r24, Y+5	; 0x05
     bdc:	8f 3f       	cpi	r24, 0xFF	; 255
     bde:	19 f0       	breq	.+6      	; 0xbe6 <_ZN13LiquidCrystal5beginEhhh+0xc4>
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	0e 94 9c 00 	call	0x138	; 0x138 <digitalWrite>
     be6:	6f 85       	ldd	r22, Y+15	; 0x0f
     be8:	64 fd       	sbrc	r22, 4
     bea:	1d c0       	rjmp	.+58     	; 0xc26 <_ZN13LiquidCrystal5beginEhhh+0x104>
     bec:	63 e0       	ldi	r22, 0x03	; 3
     bee:	ce 01       	movw	r24, r28
     bf0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN13LiquidCrystal10write4bitsEh>
     bf4:	84 e9       	ldi	r24, 0x94	; 148
     bf6:	91 e1       	ldi	r25, 0x11	; 17
     bf8:	0e 94 25 01 	call	0x24a	; 0x24a <delayMicroseconds>
     bfc:	63 e0       	ldi	r22, 0x03	; 3
     bfe:	ce 01       	movw	r24, r28
     c00:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN13LiquidCrystal10write4bitsEh>
     c04:	84 e9       	ldi	r24, 0x94	; 148
     c06:	91 e1       	ldi	r25, 0x11	; 17
     c08:	0e 94 25 01 	call	0x24a	; 0x24a <delayMicroseconds>
     c0c:	63 e0       	ldi	r22, 0x03	; 3
     c0e:	ce 01       	movw	r24, r28
     c10:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN13LiquidCrystal10write4bitsEh>
     c14:	86 e9       	ldi	r24, 0x96	; 150
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 25 01 	call	0x24a	; 0x24a <delayMicroseconds>
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	ce 01       	movw	r24, r28
     c20:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN13LiquidCrystal10write4bitsEh>
     c24:	19 c0       	rjmp	.+50     	; 0xc58 <_ZN13LiquidCrystal5beginEhhh+0x136>
     c26:	60 62       	ori	r22, 0x20	; 32
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	ce 01       	movw	r24, r28
     c2c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN13LiquidCrystal4sendEhh>
     c30:	84 e9       	ldi	r24, 0x94	; 148
     c32:	91 e1       	ldi	r25, 0x11	; 17
     c34:	0e 94 25 01 	call	0x24a	; 0x24a <delayMicroseconds>
     c38:	6f 85       	ldd	r22, Y+15	; 0x0f
     c3a:	60 62       	ori	r22, 0x20	; 32
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	ce 01       	movw	r24, r28
     c40:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN13LiquidCrystal4sendEhh>
     c44:	86 e9       	ldi	r24, 0x96	; 150
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 25 01 	call	0x24a	; 0x24a <delayMicroseconds>
     c4c:	6f 85       	ldd	r22, Y+15	; 0x0f
     c4e:	60 62       	ori	r22, 0x20	; 32
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	ce 01       	movw	r24, r28
     c54:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN13LiquidCrystal4sendEhh>
     c58:	6f 85       	ldd	r22, Y+15	; 0x0f
     c5a:	60 62       	ori	r22, 0x20	; 32
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	ce 01       	movw	r24, r28
     c60:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN13LiquidCrystal4sendEhh>
     c64:	84 e0       	ldi	r24, 0x04	; 4
     c66:	88 8b       	std	Y+16, r24	; 0x10
     c68:	ce 01       	movw	r24, r28
     c6a:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN13LiquidCrystal7displayEv>
     c6e:	ce 01       	movw	r24, r28
     c70:	0e 94 69 05 	call	0xad2	; 0xad2 <_ZN13LiquidCrystal5clearEv>
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	89 8b       	std	Y+17, r24	; 0x11
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	66 e0       	ldi	r22, 0x06	; 6
     c7c:	ce 01       	movw	r24, r28
     c7e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN13LiquidCrystal4sendEhh>
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	df 90       	pop	r13
     c90:	cf 90       	pop	r12
     c92:	bf 90       	pop	r11
     c94:	af 90       	pop	r10
     c96:	08 95       	ret

00000c98 <_ZN13LiquidCrystalC1Ehhhhhh>:
     c98:	cf 92       	push	r12
     c9a:	ef 92       	push	r14
     c9c:	0f 93       	push	r16
     c9e:	fc 01       	movw	r30, r24
     ca0:	13 82       	std	Z+3, r1	; 0x03
     ca2:	12 82       	std	Z+2, r1	; 0x02
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	91 83       	std	Z+1, r25	; 0x01
     caa:	80 83       	st	Z, r24
     cac:	64 83       	std	Z+4, r22	; 0x04
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	85 83       	std	Z+5, r24	; 0x05
     cb2:	46 83       	std	Z+6, r20	; 0x06
     cb4:	27 83       	std	Z+7, r18	; 0x07
     cb6:	00 87       	std	Z+8, r16	; 0x08
     cb8:	e1 86       	std	Z+9, r14	; 0x09
     cba:	c2 86       	std	Z+10, r12	; 0x0a
     cbc:	13 86       	std	Z+11, r1	; 0x0b
     cbe:	14 86       	std	Z+12, r1	; 0x0c
     cc0:	15 86       	std	Z+13, r1	; 0x0d
     cc2:	16 86       	std	Z+14, r1	; 0x0e
     cc4:	17 86       	std	Z+15, r1	; 0x0f
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	60 e1       	ldi	r22, 0x10	; 16
     ccc:	cf 01       	movw	r24, r30
     cce:	0e 94 91 05 	call	0xb22	; 0xb22 <_ZN13LiquidCrystal5beginEhhh>
     cd2:	0f 91       	pop	r16
     cd4:	ef 90       	pop	r14
     cd6:	cf 90       	pop	r12
     cd8:	08 95       	ret

00000cda <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	08 95       	ret

00000ce6 <_Z14tomar_medicioni>:
	showMinTemp();
}

void tomar_medicion(int valor)
{
	temperaturaMedida=valor;
     ce6:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <_ZL17temperaturaMedida+0x1>
     cea:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_ZL17temperaturaMedida>
     cee:	08 95       	ret

00000cf0 <_Z12up_keySelectv>:
	
}

void up_keySelect()
{
     cf0:	08 95       	ret

00000cf2 <_Z10down_keyUpv>:
	
}

void down_keyUp()
{
     cf2:	08 95       	ret

00000cf4 <_Z12down_keyDownv>:
	
}

void down_keyDown()
{
     cf4:	08 95       	ret

00000cf6 <_Z12down_keyLeftv>:
	
}

void down_keyLeft()
{
     cf6:	08 95       	ret

00000cf8 <_Z13down_keyRightv>:
	
}

void down_keyRight()
{
     cf8:	08 95       	ret

00000cfa <_Z14down_keySelectv>:
	
}

void down_keySelect()
{
     cfa:	08 95       	ret

00000cfc <_Z11guardarTempa>:
/************************************************************************/
/*                          AUXILIARES                                  */
/************************************************************************/
void guardarTemp(int8_t temp)
{
	temps[indiceArreglo]=temp;
     cfc:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <_ZL13indiceArreglo>
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	f9 01       	movw	r30, r18
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	e0 5b       	subi	r30, 0xB0	; 176
     d0a:	fd 4f       	sbci	r31, 0xFD	; 253
     d0c:	08 2e       	mov	r0, r24
     d0e:	00 0c       	add	r0, r0
     d10:	99 0b       	sbc	r25, r25
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	80 83       	st	Z, r24
	indiceArreglo=(indiceArreglo+1)%100;
     d16:	c9 01       	movw	r24, r18
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	64 e6       	ldi	r22, 0x64	; 100
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__divmodhi4>
     d22:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <_ZL13indiceArreglo>
	if (cantTemps<=100)
     d26:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <_ZL9cantTemps>
     d2a:	85 36       	cpi	r24, 0x65	; 101
     d2c:	18 f4       	brcc	.+6      	; 0xd34 <_Z11guardarTempa+0x38>
		cantTemps++;
     d2e:	8f 5f       	subi	r24, 0xFF	; 255
     d30:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <_ZL9cantTemps>
     d34:	08 95       	ret

00000d36 <_Z8auxiliarv>:

}

void auxiliar()
{
	guardarTemp(temperaturaMedida);
     d36:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL17temperaturaMedida>
     d3a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_Z11guardarTempa>
     d3e:	08 95       	ret

00000d40 <_Z17updateCurrentTempv>:
		cantTemps++;
}

void updateCurrentTemp()
{
	tempActual=temperaturaMedida;
     d40:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZL17temperaturaMedida>
     d44:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <_ZL10tempActual>
     d48:	08 95       	ret

00000d4a <_Z17updateAverageTempv>:
}
void updateAverageTemp()
{
	int16_t sumaTemps=0;
	tempPromedio=0;
     d4a:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <_ZL12tempPromedio>
	if(cantTemps>0)
     d4e:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <_ZL9cantTemps>
     d52:	44 23       	and	r20, r20
     d54:	e1 f0       	breq	.+56     	; 0xd8e <_Z17updateAverageTempv+0x44>
	{
		for(int i = 0; i<cantTemps; i++)
     d56:	64 2f       	mov	r22, r20
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	16 16       	cp	r1, r22
     d5c:	17 06       	cpc	r1, r23
     d5e:	8c f4       	brge	.+34     	; 0xd82 <_Z17updateAverageTempv+0x38>
     d60:	e0 e5       	ldi	r30, 0x50	; 80
     d62:	f2 e0       	ldi	r31, 0x02	; 2
     d64:	ab 01       	movw	r20, r22
     d66:	44 0f       	add	r20, r20
     d68:	55 1f       	adc	r21, r21
     d6a:	40 5b       	subi	r20, 0xB0	; 176
     d6c:	5d 4f       	sbci	r21, 0xFD	; 253
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
		{
			sumaTemps+=temps[i];
     d72:	21 91       	ld	r18, Z+
     d74:	31 91       	ld	r19, Z+
     d76:	82 0f       	add	r24, r18
     d78:	93 1f       	adc	r25, r19
{
	int16_t sumaTemps=0;
	tempPromedio=0;
	if(cantTemps>0)
	{
		for(int i = 0; i<cantTemps; i++)
     d7a:	e4 17       	cp	r30, r20
     d7c:	f5 07       	cpc	r31, r21
     d7e:	c9 f7       	brne	.-14     	; 0xd72 <_Z17updateAverageTempv+0x28>
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <_Z17updateAverageTempv+0x3c>
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
		{
			sumaTemps+=temps[i];
		}
		tempPromedio=sumaTemps/cantTemps;
     d86:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__divmodhi4>
     d8a:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <_ZL12tempPromedio>
     d8e:	08 95       	ret

00000d90 <_Z13updateMaxTempv>:
	}
}
void updateMaxTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     d90:	60 91 4b 02 	lds	r22, 0x024B	; 0x80024b <_ZL13indiceArreglo>
     d94:	66 23       	and	r22, r22
     d96:	b1 f0       	breq	.+44     	; 0xdc4 <_Z13updateMaxTempv+0x34>
     d98:	40 91 4e 02 	lds	r20, 0x024E	; 0x80024e <_ZL7tempMax>
     d9c:	e0 e5       	ldi	r30, 0x50	; 80
     d9e:	f2 e0       	ldi	r31, 0x02	; 2
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	66 0f       	add	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	60 5b       	subi	r22, 0xB0	; 176
     da8:	7d 4f       	sbci	r23, 0xFD	; 253
	{
		if (temps[i]>tempMax)
     daa:	81 91       	ld	r24, Z+
     dac:	91 91       	ld	r25, Z+
     dae:	24 2f       	mov	r18, r20
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	28 17       	cp	r18, r24
     db4:	39 07       	cpc	r19, r25
     db6:	08 f4       	brcc	.+2      	; 0xdba <_Z13updateMaxTempv+0x2a>
		{
			tempMax=temps[i];
     db8:	48 2f       	mov	r20, r24
		tempPromedio=sumaTemps/cantTemps;
	}
}
void updateMaxTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     dba:	e6 17       	cp	r30, r22
     dbc:	f7 07       	cpc	r31, r23
     dbe:	a9 f7       	brne	.-22     	; 0xdaa <_Z13updateMaxTempv+0x1a>
     dc0:	40 93 4e 02 	sts	0x024E, r20	; 0x80024e <_ZL7tempMax>
     dc4:	08 95       	ret

00000dc6 <_Z13updateMinTempv>:
		}
	}
}
void updateMinTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     dc6:	60 91 4b 02 	lds	r22, 0x024B	; 0x80024b <_ZL13indiceArreglo>
     dca:	66 23       	and	r22, r22
     dcc:	b1 f0       	breq	.+44     	; 0xdfa <_Z13updateMinTempv+0x34>
     dce:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL7tempMin>
     dd2:	e0 e5       	ldi	r30, 0x50	; 80
     dd4:	f2 e0       	ldi	r31, 0x02	; 2
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	66 0f       	add	r22, r22
     dda:	77 1f       	adc	r23, r23
     ddc:	60 5b       	subi	r22, 0xB0	; 176
     dde:	7d 4f       	sbci	r23, 0xFD	; 253
	{
		if (temps[i]<tempMin)
     de0:	81 91       	ld	r24, Z+
     de2:	91 91       	ld	r25, Z+
     de4:	24 2f       	mov	r18, r20
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	82 17       	cp	r24, r18
     dea:	93 07       	cpc	r25, r19
     dec:	08 f4       	brcc	.+2      	; 0xdf0 <_Z13updateMinTempv+0x2a>
		{
			tempMin=temps[i];
     dee:	48 2f       	mov	r20, r24
		}
	}
}
void updateMinTemp()
{
	for(int i = 0; i<indiceArreglo; i++)
     df0:	e6 17       	cp	r30, r22
     df2:	f7 07       	cpc	r31, r23
     df4:	a9 f7       	brne	.-22     	; 0xde0 <_Z13updateMinTempv+0x1a>
     df6:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <_ZL7tempMin>
     dfa:	08 95       	ret

00000dfc <_Z15showCurrentTempv>:
		}
	}
}
void showCurrentTemp()
{
	lcd.setCursor(0,0);
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	83 e3       	ldi	r24, 0x33	; 51
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Actual       ");
     e08:	6f e0       	ldi	r22, 0x0F	; 15
     e0a:	71 e0       	ldi	r23, 0x01	; 1
     e0c:	83 e3       	ldi	r24, 0x33	; 51
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	83 e3       	ldi	r24, 0x33	; 51
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("                ");
     e20:	62 e2       	ldi	r22, 0x22	; 34
     e22:	71 e0       	ldi	r23, 0x01	; 1
     e24:	83 e3       	ldi	r24, 0x33	; 51
     e26:	92 e0       	ldi	r25, 0x02	; 2
     e28:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Print5printEPKc>
	lcd.setCursor(1,1);
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	83 e3       	ldi	r24, 0x33	; 51
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempActual);
     e38:	4a e0       	ldi	r20, 0x0A	; 10
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	60 91 4f 02 	lds	r22, 0x024F	; 0x80024f <_ZL10tempActual>
     e40:	83 e3       	ldi	r24, 0x33	; 51
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN5Print5printEhi>
     e48:	08 95       	ret

00000e4a <_Z10up_keyLeftv>:
/*                           CALLBACKS                                  */
/************************************************************************/

void up_keyLeft()
{
	updateCurrentTemp();
     e4a:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z17updateCurrentTempv>
	showCurrentTemp();
     e4e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_Z15showCurrentTempv>
     e52:	08 95       	ret

00000e54 <_Z15showAverageTempv>:
	lcd.print(tempActual);
}

void showAverageTemp()
{
	lcd.setCursor(0,0);
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	83 e3       	ldi	r24, 0x33	; 51
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Promedio           ");
     e60:	63 e3       	ldi	r22, 0x33	; 51
     e62:	71 e0       	ldi	r23, 0x01	; 1
     e64:	83 e3       	ldi	r24, 0x33	; 51
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	83 e3       	ldi	r24, 0x33	; 51
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("                ");
     e78:	62 e2       	ldi	r22, 0x22	; 34
     e7a:	71 e0       	ldi	r23, 0x01	; 1
     e7c:	83 e3       	ldi	r24, 0x33	; 51
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Print5printEPKc>
	
	lcd.setCursor(1,1);
     e84:	41 e0       	ldi	r20, 0x01	; 1
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	83 e3       	ldi	r24, 0x33	; 51
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempPromedio);
     e90:	4a e0       	ldi	r20, 0x0A	; 10
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	60 91 4d 02 	lds	r22, 0x024D	; 0x80024d <_ZL12tempPromedio>
     e98:	83 e3       	ldi	r24, 0x33	; 51
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN5Print5printEhi>
     ea0:	08 95       	ret

00000ea2 <_Z11up_keyRightv>:
	showCurrentTemp();
}

void up_keyRight()
{
	updateAverageTemp();
     ea2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_Z17updateAverageTempv>
	showAverageTemp();
     ea6:	0e 94 2a 07 	call	0xe54	; 0xe54 <_Z15showAverageTempv>
     eaa:	08 95       	ret

00000eac <_Z11showMaxTempv>:
	lcd.print(tempPromedio);
}

void showMaxTemp()
{
	lcd.setCursor(0,0);
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	83 e3       	ldi	r24, 0x33	; 51
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Maxima     ");
     eb8:	6c e4       	ldi	r22, 0x4C	; 76
     eba:	71 e0       	ldi	r23, 0x01	; 1
     ebc:	83 e3       	ldi	r24, 0x33	; 51
     ebe:	92 e0       	ldi	r25, 0x02	; 2
     ec0:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     ec4:	41 e0       	ldi	r20, 0x01	; 1
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	83 e3       	ldi	r24, 0x33	; 51
     eca:	92 e0       	ldi	r25, 0x02	; 2
     ecc:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("                ");
     ed0:	62 e2       	ldi	r22, 0x22	; 34
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	83 e3       	ldi	r24, 0x33	; 51
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Print5printEPKc>
	lcd.setCursor(1,1);
     edc:	41 e0       	ldi	r20, 0x01	; 1
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	83 e3       	ldi	r24, 0x33	; 51
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempMax);
     ee8:	4a e0       	ldi	r20, 0x0A	; 10
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <_ZL7tempMax>
     ef0:	83 e3       	ldi	r24, 0x33	; 51
     ef2:	92 e0       	ldi	r25, 0x02	; 2
     ef4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN5Print5printEhi>
     ef8:	08 95       	ret

00000efa <_Z8up_keyUpv>:
	showAverageTemp();
}

void up_keyUp()
{
	updateMaxTemp();
     efa:	0e 94 c8 06 	call	0xd90	; 0xd90 <_Z13updateMaxTempv>
	showMaxTemp();
     efe:	0e 94 56 07 	call	0xeac	; 0xeac <_Z11showMaxTempv>
     f02:	08 95       	ret

00000f04 <_Z11showMinTempv>:
	lcd.print(tempMax);
}

void showMinTemp()
{
	lcd.setCursor(0,0);
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	83 e3       	ldi	r24, 0x33	; 51
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Temp Minima       ");
     f10:	6d e5       	ldi	r22, 0x5D	; 93
     f12:	71 e0       	ldi	r23, 0x01	; 1
     f14:	83 e3       	ldi	r24, 0x33	; 51
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     f1c:	41 e0       	ldi	r20, 0x01	; 1
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	83 e3       	ldi	r24, 0x33	; 51
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("                ");
     f28:	62 e2       	ldi	r22, 0x22	; 34
     f2a:	71 e0       	ldi	r23, 0x01	; 1
     f2c:	83 e3       	ldi	r24, 0x33	; 51
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Print5printEPKc>
	lcd.setCursor(1,1);
     f34:	41 e0       	ldi	r20, 0x01	; 1
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	83 e3       	ldi	r24, 0x33	; 51
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print(tempMin);
     f40:	4a e0       	ldi	r20, 0x0A	; 10
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_ZL7tempMin>
     f48:	83 e3       	ldi	r24, 0x33	; 51
     f4a:	92 e0       	ldi	r25, 0x02	; 2
     f4c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN5Print5printEhi>
     f50:	08 95       	ret

00000f52 <_Z10up_keyDownv>:
	showMaxTemp();
}

void up_keyDown()
{
	updateMinTemp();
     f52:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <_Z13updateMinTempv>
	showMinTemp();
     f56:	0e 94 82 07 	call	0xf04	; 0xf04 <_Z11showMinTempv>
     f5a:	08 95       	ret

00000f5c <setup>:

}

void setup()
{
	fnqueue_init();
     f5c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_Z12fnqueue_initv>
	lcd.begin(numCols,numRows);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	42 e0       	ldi	r20, 0x02	; 2
     f64:	60 e1       	ldi	r22, 0x10	; 16
     f66:	83 e3       	ldi	r24, 0x33	; 51
     f68:	92 e0       	ldi	r25, 0x02	; 2
     f6a:	0e 94 91 05 	call	0xb22	; 0xb22 <_ZN13LiquidCrystal5beginEhhh>
	teclado_setup();
     f6e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <_Z13teclado_setupv>
	sensor_setup(tomar_medicion);
     f72:	83 e7       	ldi	r24, 0x73	; 115
     f74:	96 e0       	ldi	r25, 0x06	; 6
     f76:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Z12sensor_setupPFviE>
	lcd.setCursor(0,0);
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	83 e3       	ldi	r24, 0x33	; 51
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("            ");
     f86:	66 e2       	ldi	r22, 0x26	; 38
     f88:	71 e0       	ldi	r23, 0x01	; 1
     f8a:	83 e3       	ldi	r24, 0x33	; 51
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Print5printEPKc>
	
	//setup del timer2
	cli();
     f92:	f8 94       	cli
	TCCR2A = 0;// set entire TCCR2A register to 0
     f94:	a0 eb       	ldi	r26, 0xB0	; 176
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	1c 92       	st	X, r1
	TCCR2B = 0;// same for TCCR2B
     f9a:	e1 eb       	ldi	r30, 0xB1	; 177
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);  // ctc for timer 0
     fa0:	8c 91       	ld	r24, X
     fa2:	82 60       	ori	r24, 0x02	; 2
     fa4:	8c 93       	st	X, r24
	TIMSK2 |= (1<<TOIE2); //setea la interrupcion por overflow
     fa6:	a0 e7       	ldi	r26, 0x70	; 112
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	8c 91       	ld	r24, X
     fac:	81 60       	ori	r24, 0x01	; 1
     fae:	8c 93       	st	X, r24
	TCNT2 = 0; //set timer en 0
     fb0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  // CS#2 y CS#0 bits -> Timer0 preescaler = 1024
     fb4:	80 81       	ld	r24, Z
     fb6:	87 60       	ori	r24, 0x07	; 7
     fb8:	80 83       	st	Z, r24
	sei();
     fba:	78 94       	sei
	
	// Define los callbacks de cada Tecla
	key_up_callback( up_keyUp, TECLA0);
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	8d e7       	ldi	r24, 0x7D	; 125
     fc2:	97 e0       	ldi	r25, 0x07	; 7
     fc4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyUp, TECLA0);
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	89 e7       	ldi	r24, 0x79	; 121
     fce:	96 e0       	ldi	r25, 0x06	; 6
     fd0:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keyDown, TECLA1);
     fd4:	62 e0       	ldi	r22, 0x02	; 2
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	89 ea       	ldi	r24, 0xA9	; 169
     fda:	97 e0       	ldi	r25, 0x07	; 7
     fdc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyDown, TECLA1);
     fe0:	62 e0       	ldi	r22, 0x02	; 2
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	8a e7       	ldi	r24, 0x7A	; 122
     fe6:	96 e0       	ldi	r25, 0x06	; 6
     fe8:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keyLeft, TECLA2);
     fec:	63 e0       	ldi	r22, 0x03	; 3
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	85 e2       	ldi	r24, 0x25	; 37
     ff2:	97 e0       	ldi	r25, 0x07	; 7
     ff4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyLeft, TECLA2);
     ff8:	63 e0       	ldi	r22, 0x03	; 3
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	8b e7       	ldi	r24, 0x7B	; 123
     ffe:	96 e0       	ldi	r25, 0x06	; 6
    1000:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keyRight, TECLA3);
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	81 e5       	ldi	r24, 0x51	; 81
    100a:	97 e0       	ldi	r25, 0x07	; 7
    100c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyRight, TECLA3);
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	8c e7       	ldi	r24, 0x7C	; 124
    1016:	96 e0       	ldi	r25, 0x06	; 6
    1018:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keySelect, TECLA4);
    101c:	64 e0       	ldi	r22, 0x04	; 4
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	88 e7       	ldi	r24, 0x78	; 120
    1022:	96 e0       	ldi	r25, 0x06	; 6
    1024:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keySelect, TECLA4);
    1028:	64 e0       	ldi	r22, 0x04	; 4
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	8d e7       	ldi	r24, 0x7D	; 125
    102e:	96 e0       	ldi	r25, 0x06	; 6
    1030:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z17key_down_callbackPFvvEi>
    1034:	e0 e5       	ldi	r30, 0x50	; 80
    1036:	f2 e0       	ldi	r31, 0x02	; 2
    1038:	88 e1       	ldi	r24, 0x18	; 24
    103a:	93 e0       	ldi	r25, 0x03	; 3
	
	
	
	// Inicializa las temps
	for(int i = 0; i<MAX_TEMPS; i++)
		temps[i] = 0;
    103c:	11 92       	st	Z+, r1
    103e:	11 92       	st	Z+, r1
	
	
	
	
	// Inicializa las temps
	for(int i = 0; i<MAX_TEMPS; i++)
    1040:	e8 17       	cp	r30, r24
    1042:	f9 07       	cpc	r31, r25
    1044:	d9 f7       	brne	.-10     	; 0x103c <setup+0xe0>
		temps[i] = 0;
	
	
	lcd.setCursor(0,0);
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	83 e3       	ldi	r24, 0x33	; 51
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("S.E. 2019         ");
    1052:	60 e7       	ldi	r22, 0x70	; 112
    1054:	71 e0       	ldi	r23, 0x01	; 1
    1056:	83 e3       	ldi	r24, 0x33	; 51
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
    105e:	41 e0       	ldi	r20, 0x01	; 1
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	83 e3       	ldi	r24, 0x33	; 51
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Actividad 1");
    106a:	63 e8       	ldi	r22, 0x83	; 131
    106c:	71 e0       	ldi	r23, 0x01	; 1
    106e:	83 e3       	ldi	r24, 0x33	; 51
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN5Print5printEPKc>
    1076:	08 95       	ret

00001078 <loop>:
	guardarTemp(temperaturaMedida);
}

void loop()
{
	fnqueue_run();
    1078:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <_Z11fnqueue_runv>
    107c:	08 95       	ret

0000107e <__vector_9>:
}

ISR(TIMER2_OVF_vect) // TIMER2_OVF_vect
{
    107e:	1f 92       	push	r1
    1080:	0f 92       	push	r0
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	0f 92       	push	r0
    1086:	11 24       	eor	r1, r1
    1088:	2f 93       	push	r18
    108a:	3f 93       	push	r19
    108c:	4f 93       	push	r20
    108e:	5f 93       	push	r21
    1090:	6f 93       	push	r22
    1092:	7f 93       	push	r23
    1094:	8f 93       	push	r24
    1096:	9f 93       	push	r25
    1098:	af 93       	push	r26
    109a:	bf 93       	push	r27
    109c:	ef 93       	push	r30
    109e:	ff 93       	push	r31
	TCNT2 = 0;
    10a0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	timerOvf= (timerOvf + 1) % 9;
    10a4:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <_ZL8timerOvf>
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	69 e0       	ldi	r22, 0x09	; 9
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__divmodhi4>
    10b4:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <_ZL8timerOvf>
	if(timerOvf == 0 ) //como el prescaler esta seteado en 1024, cada 9 interrupciones cuento 1 seg(0.144 seg)
    10b8:	81 11       	cpse	r24, r1
    10ba:	0d c0       	rjmp	.+26     	; 0x10d6 <__vector_9+0x58>
	{
		contador++;
    10bc:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZL8contador>
    10c0:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <_ZL8contador+0x1>
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <_ZL8contador+0x1>
    10ca:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <_ZL8contador>
		//timerOvf=0;
		fnqueue_add(auxiliar);
    10ce:	8b e9       	ldi	r24, 0x9B	; 155
    10d0:	96 e0       	ldi	r25, 0x06	; 6
    10d2:	0e 94 97 04 	call	0x92e	; 0x92e <_Z11fnqueue_addPFvvE>
	}
	
}
    10d6:	ff 91       	pop	r31
    10d8:	ef 91       	pop	r30
    10da:	bf 91       	pop	r27
    10dc:	af 91       	pop	r26
    10de:	9f 91       	pop	r25
    10e0:	8f 91       	pop	r24
    10e2:	7f 91       	pop	r23
    10e4:	6f 91       	pop	r22
    10e6:	5f 91       	pop	r21
    10e8:	4f 91       	pop	r20
    10ea:	3f 91       	pop	r19
    10ec:	2f 91       	pop	r18
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <_GLOBAL__sub_I_lcd>:
    10f8:	cf 92       	push	r12
    10fa:	ef 92       	push	r14
    10fc:	0f 93       	push	r16
static uint8_t tempPromedio = 0;

static uint8_t cantTemps = 0;
static uint8_t indiceArreglo = 0;

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
    10fe:	0f 2e       	mov	r0, r31
    1100:	f7 e0       	ldi	r31, 0x07	; 7
    1102:	cf 2e       	mov	r12, r31
    1104:	f0 2d       	mov	r31, r0
    1106:	0f 2e       	mov	r0, r31
    1108:	f6 e0       	ldi	r31, 0x06	; 6
    110a:	ef 2e       	mov	r14, r31
    110c:	f0 2d       	mov	r31, r0
    110e:	05 e0       	ldi	r16, 0x05	; 5
    1110:	24 e0       	ldi	r18, 0x04	; 4
    1112:	49 e0       	ldi	r20, 0x09	; 9
    1114:	68 e0       	ldi	r22, 0x08	; 8
    1116:	83 e3       	ldi	r24, 0x33	; 51
    1118:	92 e0       	ldi	r25, 0x02	; 2
    111a:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN13LiquidCrystalC1Ehhhhhh>
		contador++;
		//timerOvf=0;
		fnqueue_add(auxiliar);
	}
	
}
    111e:	0f 91       	pop	r16
    1120:	ef 90       	pop	r14
    1122:	cf 90       	pop	r12
    1124:	08 95       	ret

00001126 <main>:
    1126:	78 94       	sei
    1128:	84 b5       	in	r24, 0x24	; 36
    112a:	82 60       	ori	r24, 0x02	; 2
    112c:	84 bd       	out	0x24, r24	; 36
    112e:	84 b5       	in	r24, 0x24	; 36
    1130:	81 60       	ori	r24, 0x01	; 1
    1132:	84 bd       	out	0x24, r24	; 36
    1134:	85 b5       	in	r24, 0x25	; 37
    1136:	82 60       	ori	r24, 0x02	; 2
    1138:	85 bd       	out	0x25, r24	; 37
    113a:	85 b5       	in	r24, 0x25	; 37
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	85 bd       	out	0x25, r24	; 37
    1140:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1144:	81 60       	ori	r24, 0x01	; 1
    1146:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    114a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    114e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1152:	82 60       	ori	r24, 0x02	; 2
    1154:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1158:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    115c:	81 60       	ori	r24, 0x01	; 1
    115e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1162:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1166:	81 60       	ori	r24, 0x01	; 1
    1168:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    116c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1170:	84 60       	ori	r24, 0x04	; 4
    1172:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1176:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    117a:	81 60       	ori	r24, 0x01	; 1
    117c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1180:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1184:	84 60       	ori	r24, 0x04	; 4
    1186:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    118a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    118e:	82 60       	ori	r24, 0x02	; 2
    1190:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1194:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1198:	81 60       	ori	r24, 0x01	; 1
    119a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    119e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    11a2:	80 68       	ori	r24, 0x80	; 128
    11a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    11a8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11ac:	0e 94 ae 07 	call	0xf5c	; 0xf5c <setup>
    11b0:	c0 e0       	ldi	r28, 0x00	; 0
    11b2:	d0 e0       	ldi	r29, 0x00	; 0
    11b4:	0e 94 3c 08 	call	0x1078	; 0x1078 <loop>
    11b8:	20 97       	sbiw	r28, 0x00	; 0
    11ba:	e1 f3       	breq	.-8      	; 0x11b4 <main+0x8e>
    11bc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    11c0:	f9 cf       	rjmp	.-14     	; 0x11b4 <main+0x8e>

000011c2 <__divmodhi4>:
    11c2:	97 fb       	bst	r25, 7
    11c4:	07 2e       	mov	r0, r23
    11c6:	16 f4       	brtc	.+4      	; 0x11cc <__divmodhi4+0xa>
    11c8:	00 94       	com	r0
    11ca:	07 d0       	rcall	.+14     	; 0x11da <__divmodhi4_neg1>
    11cc:	77 fd       	sbrc	r23, 7
    11ce:	09 d0       	rcall	.+18     	; 0x11e2 <__divmodhi4_neg2>
    11d0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__udivmodhi4>
    11d4:	07 fc       	sbrc	r0, 7
    11d6:	05 d0       	rcall	.+10     	; 0x11e2 <__divmodhi4_neg2>
    11d8:	3e f4       	brtc	.+14     	; 0x11e8 <__divmodhi4_exit>

000011da <__divmodhi4_neg1>:
    11da:	90 95       	com	r25
    11dc:	81 95       	neg	r24
    11de:	9f 4f       	sbci	r25, 0xFF	; 255
    11e0:	08 95       	ret

000011e2 <__divmodhi4_neg2>:
    11e2:	70 95       	com	r23
    11e4:	61 95       	neg	r22
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255

000011e8 <__divmodhi4_exit>:
    11e8:	08 95       	ret

000011ea <__udivmodhi4>:
    11ea:	aa 1b       	sub	r26, r26
    11ec:	bb 1b       	sub	r27, r27
    11ee:	51 e1       	ldi	r21, 0x11	; 17
    11f0:	07 c0       	rjmp	.+14     	; 0x1200 <__udivmodhi4_ep>

000011f2 <__udivmodhi4_loop>:
    11f2:	aa 1f       	adc	r26, r26
    11f4:	bb 1f       	adc	r27, r27
    11f6:	a6 17       	cp	r26, r22
    11f8:	b7 07       	cpc	r27, r23
    11fa:	10 f0       	brcs	.+4      	; 0x1200 <__udivmodhi4_ep>
    11fc:	a6 1b       	sub	r26, r22
    11fe:	b7 0b       	sbc	r27, r23

00001200 <__udivmodhi4_ep>:
    1200:	88 1f       	adc	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	5a 95       	dec	r21
    1206:	a9 f7       	brne	.-22     	; 0x11f2 <__udivmodhi4_loop>
    1208:	80 95       	com	r24
    120a:	90 95       	com	r25
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	08 95       	ret

00001212 <__tablejump2__>:
    1212:	ee 0f       	add	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	05 90       	lpm	r0, Z+
    1218:	f4 91       	lpm	r31, Z
    121a:	e0 2d       	mov	r30, r0
    121c:	09 94       	ijmp

0000121e <__udivmodsi4>:
    121e:	a1 e2       	ldi	r26, 0x21	; 33
    1220:	1a 2e       	mov	r1, r26
    1222:	aa 1b       	sub	r26, r26
    1224:	bb 1b       	sub	r27, r27
    1226:	fd 01       	movw	r30, r26
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <__udivmodsi4_ep>

0000122a <__udivmodsi4_loop>:
    122a:	aa 1f       	adc	r26, r26
    122c:	bb 1f       	adc	r27, r27
    122e:	ee 1f       	adc	r30, r30
    1230:	ff 1f       	adc	r31, r31
    1232:	a2 17       	cp	r26, r18
    1234:	b3 07       	cpc	r27, r19
    1236:	e4 07       	cpc	r30, r20
    1238:	f5 07       	cpc	r31, r21
    123a:	20 f0       	brcs	.+8      	; 0x1244 <__udivmodsi4_ep>
    123c:	a2 1b       	sub	r26, r18
    123e:	b3 0b       	sbc	r27, r19
    1240:	e4 0b       	sbc	r30, r20
    1242:	f5 0b       	sbc	r31, r21

00001244 <__udivmodsi4_ep>:
    1244:	66 1f       	adc	r22, r22
    1246:	77 1f       	adc	r23, r23
    1248:	88 1f       	adc	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	1a 94       	dec	r1
    124e:	69 f7       	brne	.-38     	; 0x122a <__udivmodsi4_loop>
    1250:	60 95       	com	r22
    1252:	70 95       	com	r23
    1254:	80 95       	com	r24
    1256:	90 95       	com	r25
    1258:	9b 01       	movw	r18, r22
    125a:	ac 01       	movw	r20, r24
    125c:	bd 01       	movw	r22, r26
    125e:	cf 01       	movw	r24, r30
    1260:	08 95       	ret

00001262 <_exit>:
    1262:	f8 94       	cli

00001264 <__stop_program>:
    1264:	ff cf       	rjmp	.-2      	; 0x1264 <__stop_program>
