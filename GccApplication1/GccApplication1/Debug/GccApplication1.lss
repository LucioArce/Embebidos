
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000d30  00000dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800140  00800140  00000e04  2**0
                  ALLOC
  3 .comment      00000041  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000068aa  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000174c  00000000  00000000  00007b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ff8  00000000  00000000  000092de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b94  00000000  00000000  0000b2d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002071  00000000  00000000  0000be6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004766  00000000  00000000  0000dedd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000428  00000000  00000000  00012643  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_16>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_21>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	73 04       	cpc	r7, r3

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e0 e3       	ldi	r30, 0x30	; 48
  ce:	fd e0       	ldi	r31, 0x0D	; 13
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a0 34       	cpi	r26, 0x40	; 64
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a0 e4       	ldi	r26, 0x40	; 64
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	ac 3a       	cpi	r26, 0xAC	; 172
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	cd e5       	ldi	r28, 0x5D	; 93
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
  f4:	21 97       	sbiw	r28, 0x01	; 1
  f6:	fe 01       	movw	r30, r28
  f8:	0e 94 90 06 	call	0xd20	; 0xd20 <__tablejump2__>
  fc:	cc 35       	cpi	r28, 0x5C	; 92
  fe:	d1 07       	cpc	r29, r17
 100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
 102:	0e 94 b2 05 	call	0xb64	; 0xb64 <main>
 106:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <_Z14critical_beginv>:
    // módulo de región crítica. Esto puede suceder cuando se está ejecutando
    // una rutina de interrupción. En este caso, no deshabilitar las
    // interrupciones

    // Lectura atómica del registro
    uint8_t status_register = SREG;
 10e:	2f b7       	in	r18, 0x3f	; 63
    cli();
 110:	f8 94       	cli

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
 112:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 116:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
 11a:	89 2b       	or	r24, r25
 11c:	19 f4       	brne	.+6      	; 0x124 <_Z14critical_beginv+0x16>

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
 11e:	22 23       	and	r18, r18
 120:	9c f4       	brge	.+38     	; 0x148 <_Z14critical_beginv+0x3a>
 122:	08 c0       	rjmp	.+16     	; 0x134 <_Z14critical_beginv+0x26>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
 124:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 128:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 12c:	89 2b       	or	r24, r25
 12e:	91 f0       	breq	.+36     	; 0x154 <_Z14critical_beginv+0x46>
 130:	22 23       	and	r18, r18
 132:	84 f0       	brlt	.+32     	; 0x154 <_Z14critical_beginv+0x46>
    {
        anidamiento++;
 134:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 138:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
 142:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
 146:	08 95       	ret
    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
 148:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 14c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 150:	89 2b       	or	r24, r25
 152:	81 f7       	brne	.-32     	; 0x134 <_Z14critical_beginv+0x26>
 154:	08 95       	ret

00000156 <_Z12critical_endv>:
    // crítica, no hacer nada.
}

void critical_end(void)
{
    uint8_t status_register = SREG;
 156:	2f b7       	in	r18, 0x3f	; 63
    cli();
 158:	f8 94       	cli

    if (anidamiento > 0) {
 15a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 15e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 162:	18 16       	cp	r1, r24
 164:	19 06       	cpc	r1, r25
 166:	8c f4       	brge	.+34     	; 0x18a <_Z12critical_endv+0x34>
        anidamiento--;
 168:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 16c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x1>
 176:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
        if (anidamiento == 0)
 17a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 17e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
 182:	89 2b       	or	r24, r25
 184:	29 f4       	brne	.+10     	; 0x190 <_Z12critical_endv+0x3a>
            sei();
 186:	78 94       	sei
 188:	08 95       	ret
    }
    else if ((status_register & 0x80) != 0)
 18a:	22 23       	and	r18, r18
 18c:	0c f4       	brge	.+2      	; 0x190 <_Z12critical_endv+0x3a>
        sei();
 18e:	78 94       	sei
 190:	08 95       	ret

00000192 <_Z19procesar_adc_sensorv>:

static adc_cfg config;

void procesar_adc_sensor()
{
	analogVal=config.valor;
 192:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_ZL6config+0x3>
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <_ZL9analogVal+0x1>
 19c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <_ZL9analogVal>
	medicion=analogVal * 1.1 * 100 / 1024;			// formula de conversion de temp del lm35
 1a0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <_ZL9analogVal>
 1a4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <_ZL9analogVal+0x1>
 1a8:	08 95       	ret

000001aa <_Z15sensor_callbackv>:
	//como la mando al main???
}

void sensor_callback()
{
	contador++;
 1aa:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_ZL8contador>
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_ZL8contador>
	if(contador > 50)
 1b4:	83 33       	cpi	r24, 0x33	; 51
 1b6:	30 f0       	brcs	.+12     	; 0x1c4 <_Z15sensor_callbackv+0x1a>
	{
		fnqueue_add(procesar_adc_sensor);
 1b8:	89 ec       	ldi	r24, 0xC9	; 201
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_Z11fnqueue_addPFvvE>
		contador=0;
 1c0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <_ZL8contador>
 1c4:	08 95       	ret

000001c6 <_Z12sensor_setupv>:
	}
}

void sensor_setup()
{
	config.canal=0;
 1c6:	e2 e4       	ldi	r30, 0x42	; 66
 1c8:	f1 e0       	ldi	r31, 0x01	; 1
 1ca:	10 82       	st	Z, r1
	config.valor=0;
 1cc:	13 82       	std	Z+3, r1	; 0x03
	config.callback=sensor_callback;
 1ce:	85 ed       	ldi	r24, 0xD5	; 213
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	92 83       	std	Z+2, r25	; 0x02
 1d4:	81 83       	std	Z+1, r24	; 0x01
 1d6:	08 95       	ret

000001d8 <_Z20procesar_adc_tecladov>:
	if(tecla>=0 && tecla<5)
		teclasCallback[tecla].callbackDown=handler;
}
	
void procesar_adc_teclado()
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
	int16_t k;
	analogVal=config.valor;
 1dc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_ZL6config+0x3>
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <_ZL9analogVal+0x1>
 1e6:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <_ZL9analogVal>
	for (k = 0; k < NUM_KEYS; k++)
		if (analogVal < adc_key_val[k])
 1ea:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <_ZL9analogVal>
 1ee:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <_ZL9analogVal+0x1>
 1f2:	c2 97       	sbiw	r24, 0x32	; 50
 1f4:	00 f1       	brcs	.+64     	; 0x236 <_Z20procesar_adc_tecladov+0x5e>
 1f6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <_ZL9analogVal>
 1fa:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <_ZL9analogVal+0x1>
 1fe:	86 3e       	cpi	r24, 0xE6	; 230
 200:	91 05       	cpc	r25, r1
 202:	08 f4       	brcc	.+2      	; 0x206 <_Z20procesar_adc_tecladov+0x2e>
 204:	4c c0       	rjmp	.+152    	; 0x29e <_Z20procesar_adc_tecladov+0xc6>
 206:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <_ZL9analogVal>
 20a:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <_ZL9analogVal+0x1>
 20e:	88 36       	cpi	r24, 0x68	; 104
 210:	91 40       	sbci	r25, 0x01	; 1
 212:	08 f4       	brcc	.+2      	; 0x216 <_Z20procesar_adc_tecladov+0x3e>
 214:	47 c0       	rjmp	.+142    	; 0x2a4 <_Z20procesar_adc_tecladov+0xcc>
 216:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <_ZL9analogVal>
 21a:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <_ZL9analogVal+0x1>
 21e:	87 31       	cpi	r24, 0x17	; 23
 220:	92 40       	sbci	r25, 0x02	; 2
 222:	08 f4       	brcc	.+2      	; 0x226 <_Z20procesar_adc_tecladov+0x4e>
 224:	42 c0       	rjmp	.+132    	; 0x2aa <_Z20procesar_adc_tecladov+0xd2>
 226:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <_ZL9analogVal>
 22a:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <_ZL9analogVal+0x1>
 22e:	88 3f       	cpi	r24, 0xF8	; 248
 230:	92 40       	sbci	r25, 0x02	; 2
 232:	d8 f4       	brcc	.+54     	; 0x26a <_Z20procesar_adc_tecladov+0x92>
 234:	3d c0       	rjmp	.+122    	; 0x2b0 <_Z20procesar_adc_tecladov+0xd8>
		{
			if(oldkey!=k)
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 23e:	89 2b       	or	r24, r25
 240:	09 f4       	brne	.+2      	; 0x244 <_Z20procesar_adc_tecladov+0x6c>
 242:	3f c0       	rjmp	.+126    	; 0x2c2 <_Z20procesar_adc_tecladov+0xea>
	
void procesar_adc_teclado()
{
	int16_t k;
	analogVal=config.valor;
	for (k = 0; k < NUM_KEYS; k++)
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	d0 e0       	ldi	r29, 0x00	; 0
		if (analogVal < adc_key_val[k])
		{
			if(oldkey!=k)
			{	
				oldkey=k;
 248:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 24c:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
				teclasCallback[k].callbackDown();
 250:	fe 01       	movw	r30, r28
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	ee 0f       	add	r30, r30
 258:	ff 1f       	adc	r31, r31
 25a:	e5 5b       	subi	r30, 0xB5	; 181
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	02 80       	ldd	r0, Z+2	; 0x02
 260:	f3 81       	ldd	r31, Z+3	; 0x03
 262:	e0 2d       	mov	r30, r0
 264:	09 95       	icall
			}
			break;
		}
	if (k >= NUM_KEYS)		//solto el boton
 266:	25 97       	sbiw	r28, 0x05	; 5
 268:	64 f1       	brlt	.+88     	; 0x2c2 <_Z20procesar_adc_tecladov+0xea>
		if(oldkey!= -1)
 26a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 26e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 272:	8f 3f       	cpi	r24, 0xFF	; 255
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	92 07       	cpc	r25, r18
 278:	21 f1       	breq	.+72     	; 0x2c2 <_Z20procesar_adc_tecladov+0xea>
		{
			teclasCallback[oldkey].callbackUp();
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	fc 01       	movw	r30, r24
 284:	e5 5b       	subi	r30, 0xB5	; 181
 286:	fe 4f       	sbci	r31, 0xFE	; 254
 288:	01 90       	ld	r0, Z+
 28a:	f0 81       	ld	r31, Z
 28c:	e0 2d       	mov	r30, r0
 28e:	09 95       	icall
			oldkey = -1;     // Solto el boton y cambio el valor de oldkey 
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	9f ef       	ldi	r25, 0xFF	; 255
 294:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 298:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		};
}
 29c:	12 c0       	rjmp	.+36     	; 0x2c2 <_Z20procesar_adc_tecladov+0xea>
	
void procesar_adc_teclado()
{
	int16_t k;
	analogVal=config.valor;
	for (k = 0; k < NUM_KEYS; k++)
 29e:	c1 e0       	ldi	r28, 0x01	; 1
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <_Z20procesar_adc_tecladov+0xdc>
 2a4:	c2 e0       	ldi	r28, 0x02	; 2
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <_Z20procesar_adc_tecladov+0xdc>
 2aa:	c3 e0       	ldi	r28, 0x03	; 3
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <_Z20procesar_adc_tecladov+0xdc>
 2b0:	c4 e0       	ldi	r28, 0x04	; 4
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
		if (analogVal < adc_key_val[k])
		{
			if(oldkey!=k)
 2b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2bc:	c8 17       	cp	r28, r24
 2be:	d9 07       	cpc	r29, r25
 2c0:	19 f6       	brne	.-122    	; 0x248 <_Z20procesar_adc_tecladov+0x70>
		if(oldkey!= -1)
		{
			teclasCallback[oldkey].callbackUp();
			oldkey = -1;     // Solto el boton y cambio el valor de oldkey 
		};
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <_Z16teclado_callbackv>:

void teclado_callback()
{
	contador++;
 2c8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_ZL8contador>
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_ZL8contador>
	if(contador > 50)
 2d2:	83 33       	cpi	r24, 0x33	; 51
 2d4:	30 f0       	brcs	.+12     	; 0x2e2 <_Z16teclado_callbackv+0x1a>
	{
		fnqueue_add(procesar_adc_teclado);
 2d6:	8c ee       	ldi	r24, 0xEC	; 236
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_Z11fnqueue_addPFvvE>
		contador=0;
 2de:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <_ZL8contador>
 2e2:	08 95       	ret

000002e4 <_Z15key_up_callbackPFvvEi>:
static adc_cfg config;

struct callbackSTR teclasCallback[5];

void key_up_callback(void (*handler)(),int tecla){
	if(tecla>=0 && tecla<5)
 2e4:	65 30       	cpi	r22, 0x05	; 5
 2e6:	71 05       	cpc	r23, r1
 2e8:	48 f4       	brcc	.+18     	; 0x2fc <_Z15key_up_callbackPFvvEi+0x18>
		teclasCallback[tecla].callbackUp=handler;
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	fb 01       	movw	r30, r22
 2f4:	e5 5b       	subi	r30, 0xB5	; 181
 2f6:	fe 4f       	sbci	r31, 0xFE	; 254
 2f8:	91 83       	std	Z+1, r25	; 0x01
 2fa:	80 83       	st	Z, r24
 2fc:	08 95       	ret

000002fe <_Z17key_down_callbackPFvvEi>:
}
	
void key_down_callback(void (*handler)(),int tecla){
	if(tecla>=0 && tecla<5)
 2fe:	65 30       	cpi	r22, 0x05	; 5
 300:	71 05       	cpc	r23, r1
 302:	48 f4       	brcc	.+18     	; 0x316 <_Z17key_down_callbackPFvvEi+0x18>
		teclasCallback[tecla].callbackDown=handler;
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	fb 01       	movw	r30, r22
 30e:	e5 5b       	subi	r30, 0xB5	; 181
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	93 83       	std	Z+3, r25	; 0x03
 314:	82 83       	std	Z+2, r24	; 0x02
 316:	08 95       	ret

00000318 <_Z13teclado_setupv>:
	}
}

void teclado_setup()
{
	config.canal=0;
 318:	ef e5       	ldi	r30, 0x5F	; 95
 31a:	f1 e0       	ldi	r31, 0x01	; 1
 31c:	10 82       	st	Z, r1
	config.valor=0;
 31e:	13 82       	std	Z+3, r1	; 0x03
	config.callback=teclado_callback;
 320:	84 e6       	ldi	r24, 0x64	; 100
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	92 83       	std	Z+2, r25	; 0x02
 326:	81 83       	std	Z+1, r24	; 0x01
 328:	08 95       	ret

0000032a <__vector_21>:
{
	
}

ISR (ADC_vect)
{
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
	
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <_Z12fnqueue_initv>:
	fnqueue_tail,
	fnqueue_count;

bool fnqueue_init(void)
{
	fnqueue_head = 0;
 33e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <_ZL12fnqueue_head>
	fnqueue_tail = 0;
 342:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <_ZL12fnqueue_tail>
	fnqueue_count = 0;
 346:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <_ZL13fnqueue_count>
    
    return true;
}
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	08 95       	ret

0000034e <_Z11fnqueue_runv>:

bool fnqueue_run(void)
{
    critical_begin();
 34e:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14critical_beginv>
    if (fnqueue_count > 0)
 352:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZL13fnqueue_count>
 356:	88 23       	and	r24, r24
 358:	11 f1       	breq	.+68     	; 0x39e <_Z11fnqueue_runv+0x50>
    {
        critical_end();
 35a:	0e 94 ab 00 	call	0x156	; 0x156 <_Z12critical_endv>

        fnqueue_functions[fnqueue_head]();
 35e:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <_ZL12fnqueue_head>
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	e5 59       	subi	r30, 0x95	; 149
 36a:	fe 4f       	sbci	r31, 0xFE	; 254
 36c:	01 90       	ld	r0, Z+
 36e:	f0 81       	ld	r31, Z
 370:	e0 2d       	mov	r30, r0
 372:	09 95       	icall
        critical_begin();
 374:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14critical_beginv>
        fnqueue_head = (fnqueue_head + 1) % FNQUEUE_LENGTH;
 378:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <_ZL12fnqueue_head>
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	8f 70       	andi	r24, 0x0F	; 15
 382:	90 78       	andi	r25, 0x80	; 128
 384:	99 23       	and	r25, r25
 386:	24 f4       	brge	.+8      	; 0x390 <_Z11fnqueue_runv+0x42>
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	80 6f       	ori	r24, 0xF0	; 240
 38c:	9f 6f       	ori	r25, 0xFF	; 255
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <_ZL12fnqueue_head>
        fnqueue_count--;
 394:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZL13fnqueue_count>
 398:	81 50       	subi	r24, 0x01	; 1
 39a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <_ZL13fnqueue_count>
    }
    critical_end();
 39e:	0e 94 ab 00 	call	0x156	; 0x156 <_Z12critical_endv>

	return 1;
}
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	08 95       	ret

000003a6 <_Z11fnqueue_addPFvvE>:

bool fnqueue_add(void (*function)(void))
{
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	ec 01       	movw	r28, r24
	bool result = false;
	
    critical_begin();
 3ac:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14critical_beginv>
    if (fnqueue_count < FNQUEUE_LENGTH)
 3b0:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <_ZL13fnqueue_count>
 3b4:	20 31       	cpi	r18, 0x10	; 16
 3b6:	d0 f4       	brcc	.+52     	; 0x3ec <_Z11fnqueue_addPFvvE+0x46>
    {
        fnqueue_functions[fnqueue_tail] = function;
 3b8:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_ZL12fnqueue_tail>
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	fc 01       	movw	r30, r24
 3c0:	ee 0f       	add	r30, r30
 3c2:	ff 1f       	adc	r31, r31
 3c4:	e5 59       	subi	r30, 0x95	; 149
 3c6:	fe 4f       	sbci	r31, 0xFE	; 254
 3c8:	d1 83       	std	Z+1, r29	; 0x01
 3ca:	c0 83       	st	Z, r28
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	8f 70       	andi	r24, 0x0F	; 15
 3d0:	90 78       	andi	r25, 0x80	; 128
 3d2:	99 23       	and	r25, r25
 3d4:	24 f4       	brge	.+8      	; 0x3de <_Z11fnqueue_addPFvvE+0x38>
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	80 6f       	ori	r24, 0xF0	; 240
 3da:	9f 6f       	ori	r25, 0xFF	; 255
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <_ZL12fnqueue_tail>
        fnqueue_count++;
 3e2:	2f 5f       	subi	r18, 0xFF	; 255
 3e4:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <_ZL13fnqueue_count>
        result = true;
 3e8:	c1 e0       	ldi	r28, 0x01	; 1
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <_Z11fnqueue_addPFvvE+0x48>
	return 1;
}

bool fnqueue_add(void (*function)(void))
{
	bool result = false;
 3ec:	c0 e0       	ldi	r28, 0x00	; 0
        fnqueue_functions[fnqueue_tail] = function;
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
        fnqueue_count++;
        result = true;
    }
    critical_end();
 3ee:	0e 94 ab 00 	call	0x156	; 0x156 <_Z12critical_endv>
    return result;
 3f2:	8c 2f       	mov	r24, r28
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <_ZN5Print17availableForWriteEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	08 95       	ret

00000400 <_ZN5Print5flushEv>:
 400:	08 95       	ret

00000402 <_ZN13LiquidCrystal11pulseEnableEv>:
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	ec 01       	movw	r28, r24
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	8e 81       	ldd	r24, Y+6	; 0x06
 40c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <digitalWrite>
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <delayMicroseconds>
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	8e 81       	ldd	r24, Y+6	; 0x06
 41c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <digitalWrite>
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <delayMicroseconds>
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	8e 81       	ldd	r24, Y+6	; 0x06
 42c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <digitalWrite>
 430:	84 e6       	ldi	r24, 0x64	; 100
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <delayMicroseconds>
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <_ZN13LiquidCrystal10write4bitsEh>:
 43e:	cf 92       	push	r12
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	6c 01       	movw	r12, r24
 450:	8c 01       	movw	r16, r24
 452:	09 5f       	subi	r16, 0xF9	; 249
 454:	1f 4f       	sbci	r17, 0xFF	; 255
 456:	c0 e0       	ldi	r28, 0x00	; 0
 458:	d0 e0       	ldi	r29, 0x00	; 0
 45a:	e6 2e       	mov	r14, r22
 45c:	f1 2c       	mov	r15, r1
 45e:	b7 01       	movw	r22, r14
 460:	0c 2e       	mov	r0, r28
 462:	02 c0       	rjmp	.+4      	; 0x468 <_ZN13LiquidCrystal10write4bitsEh+0x2a>
 464:	75 95       	asr	r23
 466:	67 95       	ror	r22
 468:	0a 94       	dec	r0
 46a:	e2 f7       	brpl	.-8      	; 0x464 <_ZN13LiquidCrystal10write4bitsEh+0x26>
 46c:	61 70       	andi	r22, 0x01	; 1
 46e:	f8 01       	movw	r30, r16
 470:	81 91       	ld	r24, Z+
 472:	8f 01       	movw	r16, r30
 474:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <digitalWrite>
 478:	21 96       	adiw	r28, 0x01	; 1
 47a:	c4 30       	cpi	r28, 0x04	; 4
 47c:	d1 05       	cpc	r29, r1
 47e:	79 f7       	brne	.-34     	; 0x45e <_ZN13LiquidCrystal10write4bitsEh+0x20>
 480:	c6 01       	movw	r24, r12
 482:	0e 94 01 02 	call	0x402	; 0x402 <_ZN13LiquidCrystal11pulseEnableEv>
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	df 90       	pop	r13
 494:	cf 90       	pop	r12
 496:	08 95       	ret

00000498 <_ZN13LiquidCrystal10write8bitsEh>:
 498:	cf 92       	push	r12
 49a:	df 92       	push	r13
 49c:	ef 92       	push	r14
 49e:	ff 92       	push	r15
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	6c 01       	movw	r12, r24
 4aa:	8c 01       	movw	r16, r24
 4ac:	09 5f       	subi	r16, 0xF9	; 249
 4ae:	1f 4f       	sbci	r17, 0xFF	; 255
 4b0:	c0 e0       	ldi	r28, 0x00	; 0
 4b2:	d0 e0       	ldi	r29, 0x00	; 0
 4b4:	e6 2e       	mov	r14, r22
 4b6:	f1 2c       	mov	r15, r1
 4b8:	b7 01       	movw	r22, r14
 4ba:	0c 2e       	mov	r0, r28
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <_ZN13LiquidCrystal10write8bitsEh+0x2a>
 4be:	75 95       	asr	r23
 4c0:	67 95       	ror	r22
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <_ZN13LiquidCrystal10write8bitsEh+0x26>
 4c6:	61 70       	andi	r22, 0x01	; 1
 4c8:	f8 01       	movw	r30, r16
 4ca:	81 91       	ld	r24, Z+
 4cc:	8f 01       	movw	r16, r30
 4ce:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <digitalWrite>
 4d2:	21 96       	adiw	r28, 0x01	; 1
 4d4:	c8 30       	cpi	r28, 0x08	; 8
 4d6:	d1 05       	cpc	r29, r1
 4d8:	79 f7       	brne	.-34     	; 0x4b8 <_ZN13LiquidCrystal10write8bitsEh+0x20>
 4da:	c6 01       	movw	r24, r12
 4dc:	0e 94 01 02 	call	0x402	; 0x402 <_ZN13LiquidCrystal11pulseEnableEv>
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	ff 90       	pop	r15
 4ea:	ef 90       	pop	r14
 4ec:	df 90       	pop	r13
 4ee:	cf 90       	pop	r12
 4f0:	08 95       	ret

000004f2 <_ZN13LiquidCrystal4sendEhh>:
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	ec 01       	movw	r28, r24
 4fa:	16 2f       	mov	r17, r22
 4fc:	64 2f       	mov	r22, r20
 4fe:	8c 81       	ldd	r24, Y+4	; 0x04
 500:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <digitalWrite>
 504:	8d 81       	ldd	r24, Y+5	; 0x05
 506:	8f 3f       	cpi	r24, 0xFF	; 255
 508:	19 f0       	breq	.+6      	; 0x510 <_ZN13LiquidCrystal4sendEhh+0x1e>
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <digitalWrite>
 510:	8f 85       	ldd	r24, Y+15	; 0x0f
 512:	84 ff       	sbrs	r24, 4
 514:	05 c0       	rjmp	.+10     	; 0x520 <_ZN13LiquidCrystal4sendEhh+0x2e>
 516:	61 2f       	mov	r22, r17
 518:	ce 01       	movw	r24, r28
 51a:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN13LiquidCrystal10write8bitsEh>
 51e:	11 c0       	rjmp	.+34     	; 0x542 <_ZN13LiquidCrystal4sendEhh+0x50>
 520:	61 2f       	mov	r22, r17
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	75 95       	asr	r23
 526:	67 95       	ror	r22
 528:	75 95       	asr	r23
 52a:	67 95       	ror	r22
 52c:	75 95       	asr	r23
 52e:	67 95       	ror	r22
 530:	75 95       	asr	r23
 532:	67 95       	ror	r22
 534:	ce 01       	movw	r24, r28
 536:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>
 53a:	61 2f       	mov	r22, r17
 53c:	ce 01       	movw	r24, r28
 53e:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	08 95       	ret

0000054a <_ZN13LiquidCrystal5clearEv>:
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN13LiquidCrystal4sendEhh>
 552:	80 ed       	ldi	r24, 0xD0	; 208
 554:	97 e0       	ldi	r25, 0x07	; 7
 556:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <delayMicroseconds>
 55a:	08 95       	ret

0000055c <_ZN13LiquidCrystal9setCursorEhh>:
 55c:	fc 01       	movw	r30, r24
 55e:	44 30       	cpi	r20, 0x04	; 4
 560:	08 f0       	brcs	.+2      	; 0x564 <_ZN13LiquidCrystal9setCursorEhh+0x8>
 562:	43 e0       	ldi	r20, 0x03	; 3
 564:	83 89       	ldd	r24, Z+19	; 0x13
 566:	48 17       	cp	r20, r24
 568:	10 f0       	brcs	.+4      	; 0x56e <_ZN13LiquidCrystal9setCursorEhh+0x12>
 56a:	4f ef       	ldi	r20, 0xFF	; 255
 56c:	48 0f       	add	r20, r24
 56e:	df 01       	movw	r26, r30
 570:	a4 0f       	add	r26, r20
 572:	b1 1d       	adc	r27, r1
 574:	54 96       	adiw	r26, 0x14	; 20
 576:	9c 91       	ld	r25, X
 578:	69 0f       	add	r22, r25
 57a:	60 68       	ori	r22, 0x80	; 128
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	cf 01       	movw	r24, r30
 580:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN13LiquidCrystal4sendEhh>
 584:	08 95       	ret

00000586 <_ZN13LiquidCrystal7displayEv>:
 586:	fc 01       	movw	r30, r24
 588:	60 89       	ldd	r22, Z+16	; 0x10
 58a:	26 2f       	mov	r18, r22
 58c:	24 60       	ori	r18, 0x04	; 4
 58e:	20 8b       	std	Z+16, r18	; 0x10
 590:	6c 60       	ori	r22, 0x0C	; 12
 592:	40 e0       	ldi	r20, 0x00	; 0
 594:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN13LiquidCrystal4sendEhh>
 598:	08 95       	ret

0000059a <_ZN13LiquidCrystal5beginEhhh>:
 59a:	af 92       	push	r10
 59c:	bf 92       	push	r11
 59e:	cf 92       	push	r12
 5a0:	df 92       	push	r13
 5a2:	ef 92       	push	r14
 5a4:	ff 92       	push	r15
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	ec 01       	movw	r28, r24
 5b0:	42 30       	cpi	r20, 0x02	; 2
 5b2:	18 f0       	brcs	.+6      	; 0x5ba <_ZN13LiquidCrystal5beginEhhh+0x20>
 5b4:	8f 85       	ldd	r24, Y+15	; 0x0f
 5b6:	88 60       	ori	r24, 0x08	; 8
 5b8:	8f 87       	std	Y+15, r24	; 0x0f
 5ba:	4b 8b       	std	Y+19, r20	; 0x13
 5bc:	1c 8a       	std	Y+20, r1	; 0x14
 5be:	80 e4       	ldi	r24, 0x40	; 64
 5c0:	8d 8b       	std	Y+21, r24	; 0x15
 5c2:	6e 8b       	std	Y+22, r22	; 0x16
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	60 5c       	subi	r22, 0xC0	; 192
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	6f 8b       	std	Y+23, r22	; 0x17
 5cc:	22 23       	and	r18, r18
 5ce:	29 f0       	breq	.+10     	; 0x5da <_ZN13LiquidCrystal5beginEhhh+0x40>
 5d0:	41 30       	cpi	r20, 0x01	; 1
 5d2:	19 f4       	brne	.+6      	; 0x5da <_ZN13LiquidCrystal5beginEhhh+0x40>
 5d4:	8f 85       	ldd	r24, Y+15	; 0x0f
 5d6:	84 60       	ori	r24, 0x04	; 4
 5d8:	8f 87       	std	Y+15, r24	; 0x0f
 5da:	61 e0       	ldi	r22, 0x01	; 1
 5dc:	8c 81       	ldd	r24, Y+4	; 0x04
 5de:	0e 94 42 05 	call	0xa84	; 0xa84 <pinMode>
 5e2:	8d 81       	ldd	r24, Y+5	; 0x05
 5e4:	8f 3f       	cpi	r24, 0xFF	; 255
 5e6:	19 f0       	breq	.+6      	; 0x5ee <_ZN13LiquidCrystal5beginEhhh+0x54>
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	0e 94 42 05 	call	0xa84	; 0xa84 <pinMode>
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	8e 81       	ldd	r24, Y+6	; 0x06
 5f2:	0e 94 42 05 	call	0xa84	; 0xa84 <pinMode>
 5f6:	7e 01       	movw	r14, r28
 5f8:	87 e0       	ldi	r24, 0x07	; 7
 5fa:	e8 0e       	add	r14, r24
 5fc:	f1 1c       	adc	r15, r1
 5fe:	00 e0       	ldi	r16, 0x00	; 0
 600:	10 e0       	ldi	r17, 0x00	; 0
 602:	68 94       	set
 604:	aa 24       	eor	r10, r10
 606:	a3 f8       	bld	r10, 3
 608:	b1 2c       	mov	r11, r1
 60a:	68 94       	set
 60c:	cc 24       	eor	r12, r12
 60e:	c2 f8       	bld	r12, 2
 610:	d1 2c       	mov	r13, r1
 612:	8f 85       	ldd	r24, Y+15	; 0x0f
 614:	84 fd       	sbrc	r24, 4
 616:	03 c0       	rjmp	.+6      	; 0x61e <_ZN13LiquidCrystal5beginEhhh+0x84>
 618:	8c 2d       	mov	r24, r12
 61a:	9d 2d       	mov	r25, r13
 61c:	02 c0       	rjmp	.+4      	; 0x622 <_ZN13LiquidCrystal5beginEhhh+0x88>
 61e:	8a 2d       	mov	r24, r10
 620:	9b 2d       	mov	r25, r11
 622:	08 17       	cp	r16, r24
 624:	19 07       	cpc	r17, r25
 626:	4c f4       	brge	.+18     	; 0x63a <_ZN13LiquidCrystal5beginEhhh+0xa0>
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	f7 01       	movw	r30, r14
 62c:	81 91       	ld	r24, Z+
 62e:	7f 01       	movw	r14, r30
 630:	0e 94 42 05 	call	0xa84	; 0xa84 <pinMode>
 634:	0f 5f       	subi	r16, 0xFF	; 255
 636:	1f 4f       	sbci	r17, 0xFF	; 255
 638:	ec cf       	rjmp	.-40     	; 0x612 <_ZN13LiquidCrystal5beginEhhh+0x78>
 63a:	80 e5       	ldi	r24, 0x50	; 80
 63c:	93 ec       	ldi	r25, 0xC3	; 195
 63e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <delayMicroseconds>
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	8c 81       	ldd	r24, Y+4	; 0x04
 646:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <digitalWrite>
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	8e 81       	ldd	r24, Y+6	; 0x06
 64e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <digitalWrite>
 652:	8d 81       	ldd	r24, Y+5	; 0x05
 654:	8f 3f       	cpi	r24, 0xFF	; 255
 656:	19 f0       	breq	.+6      	; 0x65e <_ZN13LiquidCrystal5beginEhhh+0xc4>
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <digitalWrite>
 65e:	6f 85       	ldd	r22, Y+15	; 0x0f
 660:	64 fd       	sbrc	r22, 4
 662:	1d c0       	rjmp	.+58     	; 0x69e <_ZN13LiquidCrystal5beginEhhh+0x104>
 664:	63 e0       	ldi	r22, 0x03	; 3
 666:	ce 01       	movw	r24, r28
 668:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>
 66c:	84 e9       	ldi	r24, 0x94	; 148
 66e:	91 e1       	ldi	r25, 0x11	; 17
 670:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <delayMicroseconds>
 674:	63 e0       	ldi	r22, 0x03	; 3
 676:	ce 01       	movw	r24, r28
 678:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>
 67c:	84 e9       	ldi	r24, 0x94	; 148
 67e:	91 e1       	ldi	r25, 0x11	; 17
 680:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <delayMicroseconds>
 684:	63 e0       	ldi	r22, 0x03	; 3
 686:	ce 01       	movw	r24, r28
 688:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>
 68c:	86 e9       	ldi	r24, 0x96	; 150
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <delayMicroseconds>
 694:	62 e0       	ldi	r22, 0x02	; 2
 696:	ce 01       	movw	r24, r28
 698:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN13LiquidCrystal10write4bitsEh>
 69c:	19 c0       	rjmp	.+50     	; 0x6d0 <_ZN13LiquidCrystal5beginEhhh+0x136>
 69e:	60 62       	ori	r22, 0x20	; 32
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	ce 01       	movw	r24, r28
 6a4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN13LiquidCrystal4sendEhh>
 6a8:	84 e9       	ldi	r24, 0x94	; 148
 6aa:	91 e1       	ldi	r25, 0x11	; 17
 6ac:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <delayMicroseconds>
 6b0:	6f 85       	ldd	r22, Y+15	; 0x0f
 6b2:	60 62       	ori	r22, 0x20	; 32
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	ce 01       	movw	r24, r28
 6b8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN13LiquidCrystal4sendEhh>
 6bc:	86 e9       	ldi	r24, 0x96	; 150
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <delayMicroseconds>
 6c4:	6f 85       	ldd	r22, Y+15	; 0x0f
 6c6:	60 62       	ori	r22, 0x20	; 32
 6c8:	40 e0       	ldi	r20, 0x00	; 0
 6ca:	ce 01       	movw	r24, r28
 6cc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN13LiquidCrystal4sendEhh>
 6d0:	6f 85       	ldd	r22, Y+15	; 0x0f
 6d2:	60 62       	ori	r22, 0x20	; 32
 6d4:	40 e0       	ldi	r20, 0x00	; 0
 6d6:	ce 01       	movw	r24, r28
 6d8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN13LiquidCrystal4sendEhh>
 6dc:	84 e0       	ldi	r24, 0x04	; 4
 6de:	88 8b       	std	Y+16, r24	; 0x10
 6e0:	ce 01       	movw	r24, r28
 6e2:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN13LiquidCrystal7displayEv>
 6e6:	ce 01       	movw	r24, r28
 6e8:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN13LiquidCrystal5clearEv>
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	89 8b       	std	Y+17, r24	; 0x11
 6f0:	40 e0       	ldi	r20, 0x00	; 0
 6f2:	66 e0       	ldi	r22, 0x06	; 6
 6f4:	ce 01       	movw	r24, r28
 6f6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN13LiquidCrystal4sendEhh>
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	ff 90       	pop	r15
 704:	ef 90       	pop	r14
 706:	df 90       	pop	r13
 708:	cf 90       	pop	r12
 70a:	bf 90       	pop	r11
 70c:	af 90       	pop	r10
 70e:	08 95       	ret

00000710 <_ZN13LiquidCrystalC1Ehhhhhh>:
 710:	cf 92       	push	r12
 712:	ef 92       	push	r14
 714:	0f 93       	push	r16
 716:	fc 01       	movw	r30, r24
 718:	13 82       	std	Z+3, r1	; 0x03
 71a:	12 82       	std	Z+2, r1	; 0x02
 71c:	86 e0       	ldi	r24, 0x06	; 6
 71e:	91 e0       	ldi	r25, 0x01	; 1
 720:	91 83       	std	Z+1, r25	; 0x01
 722:	80 83       	st	Z, r24
 724:	64 83       	std	Z+4, r22	; 0x04
 726:	8f ef       	ldi	r24, 0xFF	; 255
 728:	85 83       	std	Z+5, r24	; 0x05
 72a:	46 83       	std	Z+6, r20	; 0x06
 72c:	27 83       	std	Z+7, r18	; 0x07
 72e:	00 87       	std	Z+8, r16	; 0x08
 730:	e1 86       	std	Z+9, r14	; 0x09
 732:	c2 86       	std	Z+10, r12	; 0x0a
 734:	13 86       	std	Z+11, r1	; 0x0b
 736:	14 86       	std	Z+12, r1	; 0x0c
 738:	15 86       	std	Z+13, r1	; 0x0d
 73a:	16 86       	std	Z+14, r1	; 0x0e
 73c:	17 86       	std	Z+15, r1	; 0x0f
 73e:	20 e0       	ldi	r18, 0x00	; 0
 740:	41 e0       	ldi	r20, 0x01	; 1
 742:	60 e1       	ldi	r22, 0x10	; 16
 744:	cf 01       	movw	r24, r30
 746:	0e 94 cd 02 	call	0x59a	; 0x59a <_ZN13LiquidCrystal5beginEhhh>
 74a:	0f 91       	pop	r16
 74c:	ef 90       	pop	r14
 74e:	cf 90       	pop	r12
 750:	08 95       	ret

00000752 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
 752:	41 e0       	ldi	r20, 0x01	; 1
 754:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	08 95       	ret

0000075e <_Z12up_keySelectv>:
{
	fnqueue_run();
}

void procesarTimer()
{
 75e:	08 95       	ret

00000760 <_Z10down_keyUpv>:
 760:	08 95       	ret

00000762 <_Z12down_keyDownv>:
 762:	08 95       	ret

00000764 <_Z12down_keyLeftv>:
 764:	08 95       	ret

00000766 <_Z13down_keyRightv>:
 766:	08 95       	ret

00000768 <_Z14down_keySelectv>:
 768:	08 95       	ret

0000076a <_Z15showCurrentTempv>:
 76a:	40 e0       	ldi	r20, 0x00	; 0
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	8b e8       	ldi	r24, 0x8B	; 139
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN13LiquidCrystal9setCursorEhh>
 776:	6e e0       	ldi	r22, 0x0E	; 14
 778:	71 e0       	ldi	r23, 0x01	; 1
 77a:	8b e8       	ldi	r24, 0x8B	; 139
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN5Print5printEPKc>
 782:	41 e0       	ldi	r20, 0x01	; 1
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	8b e8       	ldi	r24, 0x8B	; 139
 788:	91 e0       	ldi	r25, 0x01	; 1
 78a:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN13LiquidCrystal9setCursorEhh>
 78e:	4a e0       	ldi	r20, 0x0A	; 10
 790:	50 e0       	ldi	r21, 0x00	; 0
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	8b e8       	ldi	r24, 0x8B	; 139
 796:	91 e0       	ldi	r25, 0x01	; 1
 798:	0e 94 67 06 	call	0xcce	; 0xcce <_ZN5Print5printEhi>
 79c:	08 95       	ret

0000079e <_Z10up_keyLeftv>:
 79e:	0e 94 b5 03 	call	0x76a	; 0x76a <_Z15showCurrentTempv>
 7a2:	08 95       	ret

000007a4 <_Z15showAverageTempv>:
 7a4:	40 e0       	ldi	r20, 0x00	; 0
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	8b e8       	ldi	r24, 0x8B	; 139
 7aa:	91 e0       	ldi	r25, 0x01	; 1
 7ac:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN13LiquidCrystal9setCursorEhh>
 7b0:	6a e1       	ldi	r22, 0x1A	; 26
 7b2:	71 e0       	ldi	r23, 0x01	; 1
 7b4:	8b e8       	ldi	r24, 0x8B	; 139
 7b6:	91 e0       	ldi	r25, 0x01	; 1
 7b8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN5Print5printEPKc>
 7bc:	41 e0       	ldi	r20, 0x01	; 1
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	8b e8       	ldi	r24, 0x8B	; 139
 7c2:	91 e0       	ldi	r25, 0x01	; 1
 7c4:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN13LiquidCrystal9setCursorEhh>
 7c8:	4a e0       	ldi	r20, 0x0A	; 10
 7ca:	50 e0       	ldi	r21, 0x00	; 0
 7cc:	60 e0       	ldi	r22, 0x00	; 0
 7ce:	8b e8       	ldi	r24, 0x8B	; 139
 7d0:	91 e0       	ldi	r25, 0x01	; 1
 7d2:	0e 94 67 06 	call	0xcce	; 0xcce <_ZN5Print5printEhi>
 7d6:	08 95       	ret

000007d8 <_Z11up_keyRightv>:
 7d8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <_Z15showAverageTempv>
 7dc:	08 95       	ret

000007de <_Z11showMaxTempv>:
 7de:	40 e0       	ldi	r20, 0x00	; 0
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	8b e8       	ldi	r24, 0x8B	; 139
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN13LiquidCrystal9setCursorEhh>
 7ea:	68 e2       	ldi	r22, 0x28	; 40
 7ec:	71 e0       	ldi	r23, 0x01	; 1
 7ee:	8b e8       	ldi	r24, 0x8B	; 139
 7f0:	91 e0       	ldi	r25, 0x01	; 1
 7f2:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN5Print5printEPKc>
 7f6:	41 e0       	ldi	r20, 0x01	; 1
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	8b e8       	ldi	r24, 0x8B	; 139
 7fc:	91 e0       	ldi	r25, 0x01	; 1
 7fe:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN13LiquidCrystal9setCursorEhh>
 802:	4a e0       	ldi	r20, 0x0A	; 10
 804:	50 e0       	ldi	r21, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	8b e8       	ldi	r24, 0x8B	; 139
 80a:	91 e0       	ldi	r25, 0x01	; 1
 80c:	0e 94 67 06 	call	0xcce	; 0xcce <_ZN5Print5printEhi>
 810:	08 95       	ret

00000812 <_Z8up_keyUpv>:
 812:	0e 94 ef 03 	call	0x7de	; 0x7de <_Z11showMaxTempv>
 816:	08 95       	ret

00000818 <_Z11showMinTempv>:
 818:	40 e0       	ldi	r20, 0x00	; 0
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	8b e8       	ldi	r24, 0x8B	; 139
 81e:	91 e0       	ldi	r25, 0x01	; 1
 820:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN13LiquidCrystal9setCursorEhh>
 824:	64 e3       	ldi	r22, 0x34	; 52
 826:	71 e0       	ldi	r23, 0x01	; 1
 828:	8b e8       	ldi	r24, 0x8B	; 139
 82a:	91 e0       	ldi	r25, 0x01	; 1
 82c:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN5Print5printEPKc>
 830:	41 e0       	ldi	r20, 0x01	; 1
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	8b e8       	ldi	r24, 0x8B	; 139
 836:	91 e0       	ldi	r25, 0x01	; 1
 838:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN13LiquidCrystal9setCursorEhh>
 83c:	4a e0       	ldi	r20, 0x0A	; 10
 83e:	50 e0       	ldi	r21, 0x00	; 0
 840:	68 ec       	ldi	r22, 0xC8	; 200
 842:	8b e8       	ldi	r24, 0x8B	; 139
 844:	91 e0       	ldi	r25, 0x01	; 1
 846:	0e 94 67 06 	call	0xcce	; 0xcce <_ZN5Print5printEhi>
 84a:	08 95       	ret

0000084c <_Z10up_keyDownv>:
 84c:	0e 94 0c 04 	call	0x818	; 0x818 <_Z11showMinTempv>
 850:	08 95       	ret

00000852 <setup>:
 852:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z12fnqueue_initv>
 856:	0e 94 8c 01 	call	0x318	; 0x318 <_Z13teclado_setupv>
 85a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z12sensor_setupv>
 85e:	61 e0       	ldi	r22, 0x01	; 1
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	89 e0       	ldi	r24, 0x09	; 9
 864:	94 e0       	ldi	r25, 0x04	; 4
 866:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_Z15key_up_callbackPFvvEi>
 86a:	61 e0       	ldi	r22, 0x01	; 1
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	80 eb       	ldi	r24, 0xB0	; 176
 870:	93 e0       	ldi	r25, 0x03	; 3
 872:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z17key_down_callbackPFvvEi>
 876:	62 e0       	ldi	r22, 0x02	; 2
 878:	70 e0       	ldi	r23, 0x00	; 0
 87a:	86 e2       	ldi	r24, 0x26	; 38
 87c:	94 e0       	ldi	r25, 0x04	; 4
 87e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_Z15key_up_callbackPFvvEi>
 882:	62 e0       	ldi	r22, 0x02	; 2
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	81 eb       	ldi	r24, 0xB1	; 177
 888:	93 e0       	ldi	r25, 0x03	; 3
 88a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z17key_down_callbackPFvvEi>
 88e:	63 e0       	ldi	r22, 0x03	; 3
 890:	70 e0       	ldi	r23, 0x00	; 0
 892:	8f ec       	ldi	r24, 0xCF	; 207
 894:	93 e0       	ldi	r25, 0x03	; 3
 896:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_Z15key_up_callbackPFvvEi>
 89a:	63 e0       	ldi	r22, 0x03	; 3
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	82 eb       	ldi	r24, 0xB2	; 178
 8a0:	93 e0       	ldi	r25, 0x03	; 3
 8a2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z17key_down_callbackPFvvEi>
 8a6:	60 e0       	ldi	r22, 0x00	; 0
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	8c ee       	ldi	r24, 0xEC	; 236
 8ac:	93 e0       	ldi	r25, 0x03	; 3
 8ae:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_Z15key_up_callbackPFvvEi>
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	70 e0       	ldi	r23, 0x00	; 0
 8b6:	83 eb       	ldi	r24, 0xB3	; 179
 8b8:	93 e0       	ldi	r25, 0x03	; 3
 8ba:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z17key_down_callbackPFvvEi>
 8be:	64 e0       	ldi	r22, 0x04	; 4
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	8f ea       	ldi	r24, 0xAF	; 175
 8c4:	93 e0       	ldi	r25, 0x03	; 3
 8c6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_Z15key_up_callbackPFvvEi>
 8ca:	64 e0       	ldi	r22, 0x04	; 4
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	84 eb       	ldi	r24, 0xB4	; 180
 8d0:	93 e0       	ldi	r25, 0x03	; 3
 8d2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z17key_down_callbackPFvvEi>
 8d6:	84 e6       	ldi	r24, 0x64	; 100
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	01 97       	sbiw	r24, 0x01	; 1
 8dc:	f1 f7       	brne	.-4      	; 0x8da <setup+0x88>
 8de:	08 95       	ret

000008e0 <loop>:
 8e0:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z11fnqueue_runv>
 8e4:	08 95       	ret

000008e6 <_GLOBAL__sub_I_lcd>:
	
}
 8e6:	cf 92       	push	r12
 8e8:	ef 92       	push	r14
 8ea:	0f 93       	push	r16
static uint8_t tempPromedio = 0;

static uint8_t cantTemps = 0;
static uint8_t indiceArreglo = 0;

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
 8ec:	0f 2e       	mov	r0, r31
 8ee:	f7 e0       	ldi	r31, 0x07	; 7
 8f0:	cf 2e       	mov	r12, r31
 8f2:	f0 2d       	mov	r31, r0
 8f4:	0f 2e       	mov	r0, r31
 8f6:	f6 e0       	ldi	r31, 0x06	; 6
 8f8:	ef 2e       	mov	r14, r31
 8fa:	f0 2d       	mov	r31, r0
 8fc:	05 e0       	ldi	r16, 0x05	; 5
 8fe:	24 e0       	ldi	r18, 0x04	; 4
 900:	49 e0       	ldi	r20, 0x09	; 9
 902:	68 e0       	ldi	r22, 0x08	; 8
 904:	8b e8       	ldi	r24, 0x8B	; 139
 906:	91 e0       	ldi	r25, 0x01	; 1
 908:	0e 94 88 03 	call	0x710	; 0x710 <_ZN13LiquidCrystalC1Ehhhhhh>
}

void procesarTimer()
{
	
}
 90c:	0f 91       	pop	r16
 90e:	ef 90       	pop	r14
 910:	cf 90       	pop	r12
 912:	08 95       	ret

00000914 <__vector_16>:
 914:	1f 92       	push	r1
 916:	0f 92       	push	r0
 918:	0f b6       	in	r0, 0x3f	; 63
 91a:	0f 92       	push	r0
 91c:	11 24       	eor	r1, r1
 91e:	2f 93       	push	r18
 920:	3f 93       	push	r19
 922:	8f 93       	push	r24
 924:	9f 93       	push	r25
 926:	af 93       	push	r26
 928:	bf 93       	push	r27
 92a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <timer0_millis>
 92e:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <timer0_millis+0x1>
 932:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <timer0_millis+0x2>
 936:	b0 91 a7 01 	lds	r27, 0x01A7	; 0x8001a7 <timer0_millis+0x3>
 93a:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <timer0_fract>
 93e:	23 e0       	ldi	r18, 0x03	; 3
 940:	23 0f       	add	r18, r19
 942:	2d 37       	cpi	r18, 0x7D	; 125
 944:	20 f4       	brcc	.+8      	; 0x94e <__vector_16+0x3a>
 946:	01 96       	adiw	r24, 0x01	; 1
 948:	a1 1d       	adc	r26, r1
 94a:	b1 1d       	adc	r27, r1
 94c:	05 c0       	rjmp	.+10     	; 0x958 <__vector_16+0x44>
 94e:	26 e8       	ldi	r18, 0x86	; 134
 950:	23 0f       	add	r18, r19
 952:	02 96       	adiw	r24, 0x02	; 2
 954:	a1 1d       	adc	r26, r1
 956:	b1 1d       	adc	r27, r1
 958:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <timer0_fract>
 95c:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <timer0_millis>
 960:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <timer0_millis+0x1>
 964:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <timer0_millis+0x2>
 968:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <timer0_millis+0x3>
 96c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <timer0_overflow_count>
 970:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <timer0_overflow_count+0x1>
 974:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <timer0_overflow_count+0x2>
 978:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <timer0_overflow_count+0x3>
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	a1 1d       	adc	r26, r1
 980:	b1 1d       	adc	r27, r1
 982:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <timer0_overflow_count>
 986:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <timer0_overflow_count+0x1>
 98a:	a0 93 aa 01 	sts	0x01AA, r26	; 0x8001aa <timer0_overflow_count+0x2>
 98e:	b0 93 ab 01 	sts	0x01AB, r27	; 0x8001ab <timer0_overflow_count+0x3>
 992:	bf 91       	pop	r27
 994:	af 91       	pop	r26
 996:	9f 91       	pop	r25
 998:	8f 91       	pop	r24
 99a:	3f 91       	pop	r19
 99c:	2f 91       	pop	r18
 99e:	0f 90       	pop	r0
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	0f 90       	pop	r0
 9a4:	1f 90       	pop	r1
 9a6:	18 95       	reti

000009a8 <delayMicroseconds>:
 9a8:	01 97       	sbiw	r24, 0x01	; 1
 9aa:	39 f0       	breq	.+14     	; 0x9ba <delayMicroseconds+0x12>
 9ac:	88 0f       	add	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	88 0f       	add	r24, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	02 97       	sbiw	r24, 0x02	; 2
 9b6:	01 97       	sbiw	r24, 0x01	; 1
 9b8:	f1 f7       	brne	.-4      	; 0x9b6 <delayMicroseconds+0xe>
 9ba:	08 95       	ret

000009bc <init>:
 9bc:	78 94       	sei
 9be:	84 b5       	in	r24, 0x24	; 36
 9c0:	82 60       	ori	r24, 0x02	; 2
 9c2:	84 bd       	out	0x24, r24	; 36
 9c4:	84 b5       	in	r24, 0x24	; 36
 9c6:	81 60       	ori	r24, 0x01	; 1
 9c8:	84 bd       	out	0x24, r24	; 36
 9ca:	85 b5       	in	r24, 0x25	; 37
 9cc:	82 60       	ori	r24, 0x02	; 2
 9ce:	85 bd       	out	0x25, r24	; 37
 9d0:	85 b5       	in	r24, 0x25	; 37
 9d2:	81 60       	ori	r24, 0x01	; 1
 9d4:	85 bd       	out	0x25, r24	; 37
 9d6:	ee e6       	ldi	r30, 0x6E	; 110
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	80 81       	ld	r24, Z
 9dc:	81 60       	ori	r24, 0x01	; 1
 9de:	80 83       	st	Z, r24
 9e0:	e1 e8       	ldi	r30, 0x81	; 129
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	10 82       	st	Z, r1
 9e6:	80 81       	ld	r24, Z
 9e8:	82 60       	ori	r24, 0x02	; 2
 9ea:	80 83       	st	Z, r24
 9ec:	80 81       	ld	r24, Z
 9ee:	81 60       	ori	r24, 0x01	; 1
 9f0:	80 83       	st	Z, r24
 9f2:	e0 e8       	ldi	r30, 0x80	; 128
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	80 81       	ld	r24, Z
 9f8:	81 60       	ori	r24, 0x01	; 1
 9fa:	80 83       	st	Z, r24
 9fc:	e1 eb       	ldi	r30, 0xB1	; 177
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	80 81       	ld	r24, Z
 a02:	84 60       	ori	r24, 0x04	; 4
 a04:	80 83       	st	Z, r24
 a06:	e0 eb       	ldi	r30, 0xB0	; 176
 a08:	f0 e0       	ldi	r31, 0x00	; 0
 a0a:	80 81       	ld	r24, Z
 a0c:	81 60       	ori	r24, 0x01	; 1
 a0e:	80 83       	st	Z, r24
 a10:	ea e7       	ldi	r30, 0x7A	; 122
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	80 81       	ld	r24, Z
 a16:	84 60       	ori	r24, 0x04	; 4
 a18:	80 83       	st	Z, r24
 a1a:	80 81       	ld	r24, Z
 a1c:	82 60       	ori	r24, 0x02	; 2
 a1e:	80 83       	st	Z, r24
 a20:	80 81       	ld	r24, Z
 a22:	81 60       	ori	r24, 0x01	; 1
 a24:	80 83       	st	Z, r24
 a26:	80 81       	ld	r24, Z
 a28:	80 68       	ori	r24, 0x80	; 128
 a2a:	80 83       	st	Z, r24
 a2c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a30:	08 95       	ret

00000a32 <turnOffPWM>:
 a32:	83 30       	cpi	r24, 0x03	; 3
 a34:	81 f0       	breq	.+32     	; 0xa56 <turnOffPWM+0x24>
 a36:	28 f4       	brcc	.+10     	; 0xa42 <turnOffPWM+0x10>
 a38:	81 30       	cpi	r24, 0x01	; 1
 a3a:	99 f0       	breq	.+38     	; 0xa62 <turnOffPWM+0x30>
 a3c:	82 30       	cpi	r24, 0x02	; 2
 a3e:	a1 f0       	breq	.+40     	; 0xa68 <turnOffPWM+0x36>
 a40:	08 95       	ret
 a42:	87 30       	cpi	r24, 0x07	; 7
 a44:	a9 f0       	breq	.+42     	; 0xa70 <turnOffPWM+0x3e>
 a46:	88 30       	cpi	r24, 0x08	; 8
 a48:	b9 f0       	breq	.+46     	; 0xa78 <turnOffPWM+0x46>
 a4a:	84 30       	cpi	r24, 0x04	; 4
 a4c:	d1 f4       	brne	.+52     	; 0xa82 <turnOffPWM+0x50>
 a4e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a52:	8f 7d       	andi	r24, 0xDF	; 223
 a54:	03 c0       	rjmp	.+6      	; 0xa5c <turnOffPWM+0x2a>
 a56:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a5a:	8f 77       	andi	r24, 0x7F	; 127
 a5c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a60:	08 95       	ret
 a62:	84 b5       	in	r24, 0x24	; 36
 a64:	8f 77       	andi	r24, 0x7F	; 127
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <turnOffPWM+0x3a>
 a68:	84 b5       	in	r24, 0x24	; 36
 a6a:	8f 7d       	andi	r24, 0xDF	; 223
 a6c:	84 bd       	out	0x24, r24	; 36
 a6e:	08 95       	ret
 a70:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a74:	8f 77       	andi	r24, 0x7F	; 127
 a76:	03 c0       	rjmp	.+6      	; 0xa7e <turnOffPWM+0x4c>
 a78:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a7c:	8f 7d       	andi	r24, 0xDF	; 223
 a7e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a82:	08 95       	ret

00000a84 <pinMode>:
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	fc 01       	movw	r30, r24
 a8c:	e4 58       	subi	r30, 0x84	; 132
 a8e:	ff 4f       	sbci	r31, 0xFF	; 255
 a90:	24 91       	lpm	r18, Z
 a92:	fc 01       	movw	r30, r24
 a94:	e0 57       	subi	r30, 0x70	; 112
 a96:	ff 4f       	sbci	r31, 0xFF	; 255
 a98:	84 91       	lpm	r24, Z
 a9a:	88 23       	and	r24, r24
 a9c:	49 f1       	breq	.+82     	; 0xaf0 <pinMode+0x6c>
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	fc 01       	movw	r30, r24
 aa6:	e2 55       	subi	r30, 0x52	; 82
 aa8:	ff 4f       	sbci	r31, 0xFF	; 255
 aaa:	a5 91       	lpm	r26, Z+
 aac:	b4 91       	lpm	r27, Z
 aae:	8c 55       	subi	r24, 0x5C	; 92
 ab0:	9f 4f       	sbci	r25, 0xFF	; 255
 ab2:	fc 01       	movw	r30, r24
 ab4:	c5 91       	lpm	r28, Z+
 ab6:	d4 91       	lpm	r29, Z
 ab8:	9f b7       	in	r25, 0x3f	; 63
 aba:	61 11       	cpse	r22, r1
 abc:	08 c0       	rjmp	.+16     	; 0xace <pinMode+0x4a>
 abe:	f8 94       	cli
 ac0:	8c 91       	ld	r24, X
 ac2:	20 95       	com	r18
 ac4:	82 23       	and	r24, r18
 ac6:	8c 93       	st	X, r24
 ac8:	88 81       	ld	r24, Y
 aca:	82 23       	and	r24, r18
 acc:	0a c0       	rjmp	.+20     	; 0xae2 <pinMode+0x5e>
 ace:	62 30       	cpi	r22, 0x02	; 2
 ad0:	51 f4       	brne	.+20     	; 0xae6 <pinMode+0x62>
 ad2:	f8 94       	cli
 ad4:	8c 91       	ld	r24, X
 ad6:	32 2f       	mov	r19, r18
 ad8:	30 95       	com	r19
 ada:	83 23       	and	r24, r19
 adc:	8c 93       	st	X, r24
 ade:	88 81       	ld	r24, Y
 ae0:	82 2b       	or	r24, r18
 ae2:	88 83       	st	Y, r24
 ae4:	04 c0       	rjmp	.+8      	; 0xaee <pinMode+0x6a>
 ae6:	f8 94       	cli
 ae8:	8c 91       	ld	r24, X
 aea:	82 2b       	or	r24, r18
 aec:	8c 93       	st	X, r24
 aee:	9f bf       	out	0x3f, r25	; 63
 af0:	df 91       	pop	r29
 af2:	cf 91       	pop	r28
 af4:	08 95       	ret

00000af6 <digitalWrite>:
 af6:	0f 93       	push	r16
 af8:	1f 93       	push	r17
 afa:	cf 93       	push	r28
 afc:	df 93       	push	r29
 afe:	1f 92       	push	r1
 b00:	cd b7       	in	r28, 0x3d	; 61
 b02:	de b7       	in	r29, 0x3e	; 62
 b04:	28 2f       	mov	r18, r24
 b06:	30 e0       	ldi	r19, 0x00	; 0
 b08:	f9 01       	movw	r30, r18
 b0a:	e8 59       	subi	r30, 0x98	; 152
 b0c:	ff 4f       	sbci	r31, 0xFF	; 255
 b0e:	84 91       	lpm	r24, Z
 b10:	f9 01       	movw	r30, r18
 b12:	e4 58       	subi	r30, 0x84	; 132
 b14:	ff 4f       	sbci	r31, 0xFF	; 255
 b16:	14 91       	lpm	r17, Z
 b18:	f9 01       	movw	r30, r18
 b1a:	e0 57       	subi	r30, 0x70	; 112
 b1c:	ff 4f       	sbci	r31, 0xFF	; 255
 b1e:	04 91       	lpm	r16, Z
 b20:	00 23       	and	r16, r16
 b22:	c9 f0       	breq	.+50     	; 0xb56 <digitalWrite+0x60>
 b24:	88 23       	and	r24, r24
 b26:	21 f0       	breq	.+8      	; 0xb30 <digitalWrite+0x3a>
 b28:	69 83       	std	Y+1, r22	; 0x01
 b2a:	0e 94 19 05 	call	0xa32	; 0xa32 <turnOffPWM>
 b2e:	69 81       	ldd	r22, Y+1	; 0x01
 b30:	e0 2f       	mov	r30, r16
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	ee 0f       	add	r30, r30
 b36:	ff 1f       	adc	r31, r31
 b38:	ec 55       	subi	r30, 0x5C	; 92
 b3a:	ff 4f       	sbci	r31, 0xFF	; 255
 b3c:	a5 91       	lpm	r26, Z+
 b3e:	b4 91       	lpm	r27, Z
 b40:	9f b7       	in	r25, 0x3f	; 63
 b42:	f8 94       	cli
 b44:	8c 91       	ld	r24, X
 b46:	61 11       	cpse	r22, r1
 b48:	03 c0       	rjmp	.+6      	; 0xb50 <digitalWrite+0x5a>
 b4a:	10 95       	com	r17
 b4c:	81 23       	and	r24, r17
 b4e:	01 c0       	rjmp	.+2      	; 0xb52 <digitalWrite+0x5c>
 b50:	81 2b       	or	r24, r17
 b52:	8c 93       	st	X, r24
 b54:	9f bf       	out	0x3f, r25	; 63
 b56:	0f 90       	pop	r0
 b58:	df 91       	pop	r29
 b5a:	cf 91       	pop	r28
 b5c:	1f 91       	pop	r17
 b5e:	0f 91       	pop	r16
 b60:	08 95       	ret

00000b62 <initVariant>:
 b62:	08 95       	ret

00000b64 <main>:
 b64:	0e 94 de 04 	call	0x9bc	; 0x9bc <init>
 b68:	0e 94 b1 05 	call	0xb62	; 0xb62 <initVariant>
 b6c:	0e 94 29 04 	call	0x852	; 0x852 <setup>
 b70:	c0 e0       	ldi	r28, 0x00	; 0
 b72:	d0 e0       	ldi	r29, 0x00	; 0
 b74:	0e 94 70 04 	call	0x8e0	; 0x8e0 <loop>
 b78:	20 97       	sbiw	r28, 0x00	; 0
 b7a:	e1 f3       	breq	.-8      	; 0xb74 <main+0x10>
 b7c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 b80:	f9 cf       	rjmp	.-14     	; 0xb74 <main+0x10>

00000b82 <_ZN5Print5writeEPKhj>:
 b82:	cf 92       	push	r12
 b84:	df 92       	push	r13
 b86:	ef 92       	push	r14
 b88:	ff 92       	push	r15
 b8a:	0f 93       	push	r16
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	6c 01       	movw	r12, r24
 b94:	7a 01       	movw	r14, r20
 b96:	eb 01       	movw	r28, r22
 b98:	e6 0e       	add	r14, r22
 b9a:	f7 1e       	adc	r15, r23
 b9c:	00 e0       	ldi	r16, 0x00	; 0
 b9e:	10 e0       	ldi	r17, 0x00	; 0
 ba0:	ce 15       	cp	r28, r14
 ba2:	df 05       	cpc	r29, r15
 ba4:	61 f0       	breq	.+24     	; 0xbbe <_ZN5Print5writeEPKhj+0x3c>
 ba6:	69 91       	ld	r22, Y+
 ba8:	d6 01       	movw	r26, r12
 baa:	ed 91       	ld	r30, X+
 bac:	fc 91       	ld	r31, X
 bae:	01 90       	ld	r0, Z+
 bb0:	f0 81       	ld	r31, Z
 bb2:	e0 2d       	mov	r30, r0
 bb4:	c6 01       	movw	r24, r12
 bb6:	09 95       	icall
 bb8:	08 0f       	add	r16, r24
 bba:	19 1f       	adc	r17, r25
 bbc:	f1 cf       	rjmp	.-30     	; 0xba0 <_ZN5Print5writeEPKhj+0x1e>
 bbe:	c8 01       	movw	r24, r16
 bc0:	df 91       	pop	r29
 bc2:	cf 91       	pop	r28
 bc4:	1f 91       	pop	r17
 bc6:	0f 91       	pop	r16
 bc8:	ff 90       	pop	r15
 bca:	ef 90       	pop	r14
 bcc:	df 90       	pop	r13
 bce:	cf 90       	pop	r12
 bd0:	08 95       	ret

00000bd2 <_ZN5Print5writeEPKc>:
 bd2:	61 15       	cp	r22, r1
 bd4:	71 05       	cpc	r23, r1
 bd6:	81 f0       	breq	.+32     	; 0xbf8 <_ZN5Print5writeEPKc+0x26>
 bd8:	db 01       	movw	r26, r22
 bda:	0d 90       	ld	r0, X+
 bdc:	00 20       	and	r0, r0
 bde:	e9 f7       	brne	.-6      	; 0xbda <_ZN5Print5writeEPKc+0x8>
 be0:	ad 01       	movw	r20, r26
 be2:	41 50       	subi	r20, 0x01	; 1
 be4:	51 09       	sbc	r21, r1
 be6:	46 1b       	sub	r20, r22
 be8:	57 0b       	sbc	r21, r23
 bea:	dc 01       	movw	r26, r24
 bec:	ed 91       	ld	r30, X+
 bee:	fc 91       	ld	r31, X
 bf0:	02 80       	ldd	r0, Z+2	; 0x02
 bf2:	f3 81       	ldd	r31, Z+3	; 0x03
 bf4:	e0 2d       	mov	r30, r0
 bf6:	09 94       	ijmp
 bf8:	80 e0       	ldi	r24, 0x00	; 0
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	08 95       	ret

00000bfe <_ZN5Print5printEPKc>:
 bfe:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <_ZN5Print5writeEPKc>

00000c02 <_ZN5Print11printNumberEmh>:
 c02:	8f 92       	push	r8
 c04:	9f 92       	push	r9
 c06:	af 92       	push	r10
 c08:	bf 92       	push	r11
 c0a:	cf 92       	push	r12
 c0c:	df 92       	push	r13
 c0e:	ef 92       	push	r14
 c10:	ff 92       	push	r15
 c12:	0f 93       	push	r16
 c14:	1f 93       	push	r17
 c16:	cf 93       	push	r28
 c18:	df 93       	push	r29
 c1a:	cd b7       	in	r28, 0x3d	; 61
 c1c:	de b7       	in	r29, 0x3e	; 62
 c1e:	a1 97       	sbiw	r28, 0x21	; 33
 c20:	0f b6       	in	r0, 0x3f	; 63
 c22:	f8 94       	cli
 c24:	de bf       	out	0x3e, r29	; 62
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	cd bf       	out	0x3d, r28	; 61
 c2a:	7c 01       	movw	r14, r24
 c2c:	c4 2e       	mov	r12, r20
 c2e:	e5 2f       	mov	r30, r21
 c30:	cb 01       	movw	r24, r22
 c32:	d2 2e       	mov	r13, r18
 c34:	19 a2       	std	Y+33, r1	; 0x21
 c36:	21 e0       	ldi	r18, 0x01	; 1
 c38:	2d 15       	cp	r18, r13
 c3a:	10 f0       	brcs	.+4      	; 0xc40 <_ZN5Print11printNumberEmh+0x3e>
 c3c:	2a e0       	ldi	r18, 0x0A	; 10
 c3e:	d2 2e       	mov	r13, r18
 c40:	8e 01       	movw	r16, r28
 c42:	0f 5d       	subi	r16, 0xDF	; 223
 c44:	1f 4f       	sbci	r17, 0xFF	; 255
 c46:	8d 2c       	mov	r8, r13
 c48:	91 2c       	mov	r9, r1
 c4a:	a1 2c       	mov	r10, r1
 c4c:	b1 2c       	mov	r11, r1
 c4e:	6c 2d       	mov	r22, r12
 c50:	7e 2f       	mov	r23, r30
 c52:	a5 01       	movw	r20, r10
 c54:	94 01       	movw	r18, r8
 c56:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__udivmodsi4>
 c5a:	8c 2d       	mov	r24, r12
 c5c:	d2 9e       	mul	r13, r18
 c5e:	80 19       	sub	r24, r0
 c60:	11 24       	eor	r1, r1
 c62:	01 50       	subi	r16, 0x01	; 1
 c64:	11 09       	sbc	r17, r1
 c66:	8a 30       	cpi	r24, 0x0A	; 10
 c68:	14 f4       	brge	.+4      	; 0xc6e <_ZN5Print11printNumberEmh+0x6c>
 c6a:	80 5d       	subi	r24, 0xD0	; 208
 c6c:	01 c0       	rjmp	.+2      	; 0xc70 <_ZN5Print11printNumberEmh+0x6e>
 c6e:	89 5c       	subi	r24, 0xC9	; 201
 c70:	f8 01       	movw	r30, r16
 c72:	80 83       	st	Z, r24
 c74:	21 15       	cp	r18, r1
 c76:	31 05       	cpc	r19, r1
 c78:	41 05       	cpc	r20, r1
 c7a:	51 05       	cpc	r21, r1
 c7c:	21 f0       	breq	.+8      	; 0xc86 <_ZN5Print11printNumberEmh+0x84>
 c7e:	c2 2e       	mov	r12, r18
 c80:	e3 2f       	mov	r30, r19
 c82:	ca 01       	movw	r24, r20
 c84:	e4 cf       	rjmp	.-56     	; 0xc4e <_ZN5Print11printNumberEmh+0x4c>
 c86:	b8 01       	movw	r22, r16
 c88:	c7 01       	movw	r24, r14
 c8a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <_ZN5Print5writeEPKc>
 c8e:	a1 96       	adiw	r28, 0x21	; 33
 c90:	0f b6       	in	r0, 0x3f	; 63
 c92:	f8 94       	cli
 c94:	de bf       	out	0x3e, r29	; 62
 c96:	0f be       	out	0x3f, r0	; 63
 c98:	cd bf       	out	0x3d, r28	; 61
 c9a:	df 91       	pop	r29
 c9c:	cf 91       	pop	r28
 c9e:	1f 91       	pop	r17
 ca0:	0f 91       	pop	r16
 ca2:	ff 90       	pop	r15
 ca4:	ef 90       	pop	r14
 ca6:	df 90       	pop	r13
 ca8:	cf 90       	pop	r12
 caa:	bf 90       	pop	r11
 cac:	af 90       	pop	r10
 cae:	9f 90       	pop	r9
 cb0:	8f 90       	pop	r8
 cb2:	08 95       	ret

00000cb4 <_ZN5Print5printEmi>:
 cb4:	21 15       	cp	r18, r1
 cb6:	31 05       	cpc	r19, r1
 cb8:	41 f4       	brne	.+16     	; 0xcca <_ZN5Print5printEmi+0x16>
 cba:	dc 01       	movw	r26, r24
 cbc:	ed 91       	ld	r30, X+
 cbe:	fc 91       	ld	r31, X
 cc0:	01 90       	ld	r0, Z+
 cc2:	f0 81       	ld	r31, Z
 cc4:	e0 2d       	mov	r30, r0
 cc6:	64 2f       	mov	r22, r20
 cc8:	09 94       	ijmp
 cca:	0c 94 01 06 	jmp	0xc02	; 0xc02 <_ZN5Print11printNumberEmh>

00000cce <_ZN5Print5printEhi>:
 cce:	9a 01       	movw	r18, r20
 cd0:	46 2f       	mov	r20, r22
 cd2:	50 e0       	ldi	r21, 0x00	; 0
 cd4:	60 e0       	ldi	r22, 0x00	; 0
 cd6:	70 e0       	ldi	r23, 0x00	; 0
 cd8:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <_ZN5Print5printEmi>

00000cdc <__udivmodsi4>:
 cdc:	a1 e2       	ldi	r26, 0x21	; 33
 cde:	1a 2e       	mov	r1, r26
 ce0:	aa 1b       	sub	r26, r26
 ce2:	bb 1b       	sub	r27, r27
 ce4:	fd 01       	movw	r30, r26
 ce6:	0d c0       	rjmp	.+26     	; 0xd02 <__udivmodsi4_ep>

00000ce8 <__udivmodsi4_loop>:
 ce8:	aa 1f       	adc	r26, r26
 cea:	bb 1f       	adc	r27, r27
 cec:	ee 1f       	adc	r30, r30
 cee:	ff 1f       	adc	r31, r31
 cf0:	a2 17       	cp	r26, r18
 cf2:	b3 07       	cpc	r27, r19
 cf4:	e4 07       	cpc	r30, r20
 cf6:	f5 07       	cpc	r31, r21
 cf8:	20 f0       	brcs	.+8      	; 0xd02 <__udivmodsi4_ep>
 cfa:	a2 1b       	sub	r26, r18
 cfc:	b3 0b       	sbc	r27, r19
 cfe:	e4 0b       	sbc	r30, r20
 d00:	f5 0b       	sbc	r31, r21

00000d02 <__udivmodsi4_ep>:
 d02:	66 1f       	adc	r22, r22
 d04:	77 1f       	adc	r23, r23
 d06:	88 1f       	adc	r24, r24
 d08:	99 1f       	adc	r25, r25
 d0a:	1a 94       	dec	r1
 d0c:	69 f7       	brne	.-38     	; 0xce8 <__udivmodsi4_loop>
 d0e:	60 95       	com	r22
 d10:	70 95       	com	r23
 d12:	80 95       	com	r24
 d14:	90 95       	com	r25
 d16:	9b 01       	movw	r18, r22
 d18:	ac 01       	movw	r20, r24
 d1a:	bd 01       	movw	r22, r26
 d1c:	cf 01       	movw	r24, r30
 d1e:	08 95       	ret

00000d20 <__tablejump2__>:
 d20:	ee 0f       	add	r30, r30
 d22:	ff 1f       	adc	r31, r31
 d24:	05 90       	lpm	r0, Z+
 d26:	f4 91       	lpm	r31, Z
 d28:	e0 2d       	mov	r30, r0
 d2a:	09 94       	ijmp

00000d2c <_exit>:
 d2c:	f8 94       	cli

00000d2e <__stop_program>:
 d2e:	ff cf       	rjmp	.-2      	; 0xd2e <__stop_program>
