
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  000012f4  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  00800184  00800184  0000140c  2**0
                  ALLOC
  3 .comment      00000041  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006a2c  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001799  00000000  00000000  0000831c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002171  00000000  00000000  00009ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c4c  00000000  00000000  0000bc28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020c5  00000000  00000000  0000c874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000049fc  00000000  00000000  0000e939  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  00013335  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__vector_9>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      54:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_21>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	a2 06       	cpc	r10, r18

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e4 ef       	ldi	r30, 0xF4	; 244
      ce:	f2 e1       	ldi	r31, 0x12	; 18
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a4 38       	cpi	r26, 0x84	; 132
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	22 e0       	ldi	r18, 0x02	; 2
      de:	a4 e8       	ldi	r26, 0x84	; 132
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a7 30       	cpi	r26, 0x07	; 7
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
      ec:	10 e0       	ldi	r17, 0x00	; 0
      ee:	cd e5       	ldi	r28, 0x5D	; 93
      f0:	d0 e0       	ldi	r29, 0x00	; 0
      f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
      f4:	21 97       	sbiw	r28, 0x01	; 1
      f6:	fe 01       	movw	r30, r28
      f8:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__tablejump2__>
      fc:	cc 35       	cpi	r28, 0x5C	; 92
      fe:	d1 07       	cpc	r29, r17
     100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
     102:	0e 94 40 08 	call	0x1080	; 0x1080 <main>
     106:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <_Z14critical_beginv>:
    // módulo de región crítica. Esto puede suceder cuando se está ejecutando
    // una rutina de interrupción. En este caso, no deshabilitar las
    // interrupciones

    // Lectura atómica del registro
    uint8_t status_register = SREG;
     10e:	2f b7       	in	r18, 0x3f	; 63
    cli();
     110:	f8 94       	cli

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
     112:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     116:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     11a:	89 2b       	or	r24, r25
     11c:	19 f4       	brne	.+6      	; 0x124 <_Z14critical_beginv+0x16>

    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
     11e:	22 23       	and	r18, r18
     120:	9c f4       	brge	.+38     	; 0x148 <_Z14critical_beginv+0x3a>
     122:	08 c0       	rjmp	.+16     	; 0x134 <_Z14critical_beginv+0x26>
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     124:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     128:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     12c:	89 2b       	or	r24, r25
     12e:	91 f0       	breq	.+36     	; 0x154 <_Z14critical_beginv+0x46>
     130:	22 23       	and	r18, r18
     132:	84 f0       	brlt	.+32     	; 0x154 <_Z14critical_beginv+0x46>
    {
        anidamiento++;
     134:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     138:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     13c:	01 96       	adiw	r24, 0x01	; 1
     13e:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__data_end+0x1>
     142:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
     146:	08 95       	ret
    // Si las interrupciones estaban habilitadas, y aún no fueron
    // deshabilitadas por el módulo de región crítica
    // o están deshabilitadas pero por el módulo de región crítica
    //       incrementar el anidamiento.
    if ((anidamiento == 0) && ((status_register & (0x80)) != 0)
            || (anidamiento != 0) && ((status_register & (0x80)) == 0))
     148:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     14c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     150:	89 2b       	or	r24, r25
     152:	81 f7       	brne	.-32     	; 0x134 <_Z14critical_beginv+0x26>
     154:	08 95       	ret

00000156 <_Z12critical_endv>:
    // crítica, no hacer nada.
}

void critical_end(void)
{
    uint8_t status_register = SREG;
     156:	2f b7       	in	r18, 0x3f	; 63
    cli();
     158:	f8 94       	cli

    if (anidamiento > 0) {
     15a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     15e:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     162:	18 16       	cp	r1, r24
     164:	19 06       	cpc	r1, r25
     166:	8c f4       	brge	.+34     	; 0x18a <_Z12critical_endv+0x34>
        anidamiento--;
     168:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     16c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     170:	01 97       	sbiw	r24, 0x01	; 1
     172:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__data_end+0x1>
     176:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
        if (anidamiento == 0)
     17a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     17e:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     182:	89 2b       	or	r24, r25
     184:	29 f4       	brne	.+10     	; 0x190 <_Z12critical_endv+0x3a>
            sei();
     186:	78 94       	sei
     188:	08 95       	ret
    }
    else if ((status_register & 0x80) != 0)
     18a:	22 23       	and	r18, r18
     18c:	0c f4       	brge	.+2      	; 0x190 <_Z12critical_endv+0x3a>
        sei();
     18e:	78 94       	sei
     190:	08 95       	ret

00000192 <_Z12procesar_adcv>:
	if(tecla>=0 && tecla<5)
		teclasCallback[tecla].callbackDown=handler;
}
	
void procesar_adc()
{
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
	int16_t k;
	for (k = 0; k < NUM_KEYS; k++)
		if (analogVal < adc_key_val[k])
     196:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <_ZL9analogVal>
     19a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <_ZL9analogVal+0x1>
     19e:	c2 97       	sbiw	r24, 0x32	; 50
     1a0:	00 f1       	brcs	.+64     	; 0x1e2 <_Z12procesar_adcv+0x50>
     1a2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <_ZL9analogVal>
     1a6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <_ZL9analogVal+0x1>
     1aa:	86 3e       	cpi	r24, 0xE6	; 230
     1ac:	91 05       	cpc	r25, r1
     1ae:	08 f4       	brcc	.+2      	; 0x1b2 <_Z12procesar_adcv+0x20>
     1b0:	4c c0       	rjmp	.+152    	; 0x24a <_Z12procesar_adcv+0xb8>
     1b2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <_ZL9analogVal>
     1b6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <_ZL9analogVal+0x1>
     1ba:	88 36       	cpi	r24, 0x68	; 104
     1bc:	91 40       	sbci	r25, 0x01	; 1
     1be:	08 f4       	brcc	.+2      	; 0x1c2 <_Z12procesar_adcv+0x30>
     1c0:	47 c0       	rjmp	.+142    	; 0x250 <_Z12procesar_adcv+0xbe>
     1c2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <_ZL9analogVal>
     1c6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <_ZL9analogVal+0x1>
     1ca:	87 31       	cpi	r24, 0x17	; 23
     1cc:	92 40       	sbci	r25, 0x02	; 2
     1ce:	08 f4       	brcc	.+2      	; 0x1d2 <_Z12procesar_adcv+0x40>
     1d0:	42 c0       	rjmp	.+132    	; 0x256 <_Z12procesar_adcv+0xc4>
     1d2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <_ZL9analogVal>
     1d6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <_ZL9analogVal+0x1>
     1da:	88 3f       	cpi	r24, 0xF8	; 248
     1dc:	92 40       	sbci	r25, 0x02	; 2
     1de:	d8 f4       	brcc	.+54     	; 0x216 <_Z12procesar_adcv+0x84>
     1e0:	3d c0       	rjmp	.+122    	; 0x25c <_Z12procesar_adcv+0xca>
		{
			if(oldkey!=k)
     1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     1e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     1ea:	89 2b       	or	r24, r25
     1ec:	09 f4       	brne	.+2      	; 0x1f0 <_Z12procesar_adcv+0x5e>
     1ee:	3f c0       	rjmp	.+126    	; 0x26e <_Z12procesar_adcv+0xdc>
}
	
void procesar_adc()
{
	int16_t k;
	for (k = 0; k < NUM_KEYS; k++)
     1f0:	c0 e0       	ldi	r28, 0x00	; 0
     1f2:	d0 e0       	ldi	r29, 0x00	; 0
		if (analogVal < adc_key_val[k])
		{
			if(oldkey!=k)
			{	
				oldkey=k;
     1f4:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
     1f8:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
				teclasCallback[k].callbackDown();
     1fc:	fe 01       	movw	r30, r28
     1fe:	ee 0f       	add	r30, r30
     200:	ff 1f       	adc	r31, r31
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ea 57       	subi	r30, 0x7A	; 122
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	02 80       	ldd	r0, Z+2	; 0x02
     20c:	f3 81       	ldd	r31, Z+3	; 0x03
     20e:	e0 2d       	mov	r30, r0
     210:	09 95       	icall
			}
			break;
		}
	if (k >= NUM_KEYS)		//solto el boton
     212:	25 97       	sbiw	r28, 0x05	; 5
     214:	64 f1       	brlt	.+88     	; 0x26e <_Z12procesar_adcv+0xdc>
		if(oldkey!= -1)
     216:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     21a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     21e:	8f 3f       	cpi	r24, 0xFF	; 255
     220:	2f ef       	ldi	r18, 0xFF	; 255
     222:	92 07       	cpc	r25, r18
     224:	21 f1       	breq	.+72     	; 0x26e <_Z12procesar_adcv+0xdc>
		{
			teclasCallback[oldkey].callbackUp();
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	fc 01       	movw	r30, r24
     230:	ea 57       	subi	r30, 0x7A	; 122
     232:	fe 4f       	sbci	r31, 0xFE	; 254
     234:	01 90       	ld	r0, Z+
     236:	f0 81       	ld	r31, Z
     238:	e0 2d       	mov	r30, r0
     23a:	09 95       	icall
			oldkey = -1;     // Solto el boton y cambio el valor de oldkey 
     23c:	8f ef       	ldi	r24, 0xFF	; 255
     23e:	9f ef       	ldi	r25, 0xFF	; 255
     240:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     244:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
	;
}
     248:	12 c0       	rjmp	.+36     	; 0x26e <_Z12procesar_adcv+0xdc>
}
	
void procesar_adc()
{
	int16_t k;
	for (k = 0; k < NUM_KEYS; k++)
     24a:	c1 e0       	ldi	r28, 0x01	; 1
     24c:	d0 e0       	ldi	r29, 0x00	; 0
     24e:	08 c0       	rjmp	.+16     	; 0x260 <_Z12procesar_adcv+0xce>
     250:	c2 e0       	ldi	r28, 0x02	; 2
     252:	d0 e0       	ldi	r29, 0x00	; 0
     254:	05 c0       	rjmp	.+10     	; 0x260 <_Z12procesar_adcv+0xce>
     256:	c3 e0       	ldi	r28, 0x03	; 3
     258:	d0 e0       	ldi	r29, 0x00	; 0
     25a:	02 c0       	rjmp	.+4      	; 0x260 <_Z12procesar_adcv+0xce>
     25c:	c4 e0       	ldi	r28, 0x04	; 4
     25e:	d0 e0       	ldi	r29, 0x00	; 0
		if (analogVal < adc_key_val[k])
		{
			if(oldkey!=k)
     260:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     264:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     268:	c8 17       	cp	r28, r24
     26a:	d9 07       	cpc	r29, r25
     26c:	19 f6       	brne	.-122    	; 0x1f4 <_Z12procesar_adcv+0x62>
		{
			teclasCallback[oldkey].callbackUp();
			oldkey = -1;     // Solto el boton y cambio el valor de oldkey 
		}
	;
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <_Z15key_up_callbackPFvvEi>:


struct callbackSTR teclasCallback[5];

void key_up_callback(void (*handler)(),int tecla){
	if(tecla>=0 && tecla<5)
     274:	65 30       	cpi	r22, 0x05	; 5
     276:	71 05       	cpc	r23, r1
     278:	48 f4       	brcc	.+18     	; 0x28c <_Z15key_up_callbackPFvvEi+0x18>
		teclasCallback[tecla].callbackUp=handler;
     27a:	66 0f       	add	r22, r22
     27c:	77 1f       	adc	r23, r23
     27e:	66 0f       	add	r22, r22
     280:	77 1f       	adc	r23, r23
     282:	fb 01       	movw	r30, r22
     284:	ea 57       	subi	r30, 0x7A	; 122
     286:	fe 4f       	sbci	r31, 0xFE	; 254
     288:	91 83       	std	Z+1, r25	; 0x01
     28a:	80 83       	st	Z, r24
     28c:	08 95       	ret

0000028e <_Z17key_down_callbackPFvvEi>:
}
	
void key_down_callback(void (*handler)(),int tecla){
	if(tecla>=0 && tecla<5)
     28e:	65 30       	cpi	r22, 0x05	; 5
     290:	71 05       	cpc	r23, r1
     292:	48 f4       	brcc	.+18     	; 0x2a6 <_Z17key_down_callbackPFvvEi+0x18>
		teclasCallback[tecla].callbackDown=handler;
     294:	66 0f       	add	r22, r22
     296:	77 1f       	adc	r23, r23
     298:	66 0f       	add	r22, r22
     29a:	77 1f       	adc	r23, r23
     29c:	fb 01       	movw	r30, r22
     29e:	ea 57       	subi	r30, 0x7A	; 122
     2a0:	fe 4f       	sbci	r31, 0xFE	; 254
     2a2:	93 83       	std	Z+3, r25	; 0x03
     2a4:	82 83       	std	Z+2, r24	; 0x02
     2a6:	08 95       	ret

000002a8 <__vector_21>:
	;
}

	
ISR (ADC_vect)
	{
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
		contador++;
     2ca:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_ZL8contador>
     2ce:	8f 5f       	subi	r24, 0xFF	; 255
     2d0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_ZL8contador>
		if(contador > 50)
     2d4:	83 33       	cpi	r24, 0x33	; 51
     2d6:	80 f0       	brcs	.+32     	; 0x2f8 <__vector_21+0x50>
		{ 
			analogVal= ADCL | (ADCH << 8);
     2d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2dc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	92 2b       	or	r25, r18
     2e4:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <_ZL9analogVal+0x1>
     2e8:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <_ZL9analogVal>
		
			fnqueue_add(procesar_adc);
     2ec:	89 ec       	ldi	r24, 0xC9	; 201
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z11fnqueue_addPFvvE>
			contador=0;
     2f4:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <_ZL8contador>
		}
		
	}
     2f8:	ff 91       	pop	r31
     2fa:	ef 91       	pop	r30
     2fc:	bf 91       	pop	r27
     2fe:	af 91       	pop	r26
     300:	9f 91       	pop	r25
     302:	8f 91       	pop	r24
     304:	7f 91       	pop	r23
     306:	6f 91       	pop	r22
     308:	5f 91       	pop	r21
     30a:	4f 91       	pop	r20
     30c:	3f 91       	pop	r19
     30e:	2f 91       	pop	r18
     310:	0f 90       	pop	r0
     312:	0f be       	out	0x3f, r0	; 63
     314:	0f 90       	pop	r0
     316:	1f 90       	pop	r1
     318:	18 95       	reti

0000031a <_Z13teclado_setupv>:
void teclado_setup()
{
	
	// clear ADLAR in ADMUX (0x7C) to right-adjust the result
	// ADCL will contain lower 8 bits, ADCH upper 2 (in last two bits)
	ADMUX &= ~(1<<ADLAR);
     31a:	ec e7       	ldi	r30, 0x7C	; 124
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	8f 7d       	andi	r24, 0xDF	; 223
     322:	80 83       	st	Z, r24
	
	// Set REFS1..0 in ADMUX (0x7C) to change reference voltage to the
	// proper source (01)
	ADMUX |= (1<<REFS0);
     324:	80 81       	ld	r24, Z
     326:	80 64       	ori	r24, 0x40	; 64
     328:	80 83       	st	Z, r24
	
	// Clear MUX3..0 in ADMUX (0x7C) in preparation for setting the analog
	// input
	ADMUX &= ~(1<<MUX3 | 1<<MUX2 | 1<<MUX1 | 1<<MUX0);
     32a:	80 81       	ld	r24, Z
     32c:	80 7f       	andi	r24, 0xF0	; 240
     32e:	80 83       	st	Z, r24
	//	ADMUX |= 8;
	// ADMUX |= B00001000; // Binary equivalent
	
	// Set ADEN in ADCSRA (0x7A) to enable the ADC.
	// Note, this instruction takes 12 ADC clocks to execute
	ADCSRA |= 1<<ADEN;
     330:	ea e7       	ldi	r30, 0x7A	; 122
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	80 68       	ori	r24, 0x80	; 128
     338:	80 83       	st	Z, r24
	
	// Set ADATE in ADCSRA (0x7A) to enable auto-triggering.
	ADCSRA |= 1<<ADATE;
     33a:	80 81       	ld	r24, Z
     33c:	80 62       	ori	r24, 0x20	; 32
     33e:	80 83       	st	Z, r24
	
	// Clear ADTS2..0 in ADCSRB (0x7B) to set trigger mode to free running.
	// This means that as soon as an ADC has finished, the next will be
	// immediately started.
	ADCSRB &= ~(1<<ADTS2 | 1<<ADTS1 | 1<<ADTS0);
     340:	ab e7       	ldi	r26, 0x7B	; 123
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	8c 91       	ld	r24, X
     346:	88 7f       	andi	r24, 0xF8	; 248
     348:	8c 93       	st	X, r24
	
	// Set the Prescaler to 128 (16000KHz/128 = 125KHz)
	// Above 200KHz 10-bit results are not reliable.
	ADCSRA |= (1<<ADPS2 | 1<<ADPS1 | 1<<ADPS2);
     34a:	80 81       	ld	r24, Z
     34c:	86 60       	ori	r24, 0x06	; 6
     34e:	80 83       	st	Z, r24
	
	// Set ADIE in ADCSRA (0x7A) to enable the ADC interrupt.
	// Without this, the internal interrupt will not trigger.
	ADCSRA |= 1<<ADIE;
     350:	80 81       	ld	r24, Z
     352:	88 60       	ori	r24, 0x08	; 8
     354:	80 83       	st	Z, r24
	
	// Enable global interrupts
	// AVR macro included in <avr/interrupts.h>, which the Arduino IDE
	// supplies by default.
	sei();
     356:	78 94       	sei
	
	// Kick off the first ADC
	
	// Set ADSC in ADCSRA (0x7A) to start the ADC conversion
	ADCSRA |= 1<<ADSC;
     358:	80 81       	ld	r24, Z
     35a:	80 64       	ori	r24, 0x40	; 64
     35c:	80 83       	st	Z, r24
     35e:	08 95       	ret

00000360 <_Z12fnqueue_initv>:
	fnqueue_tail,
	fnqueue_count;

bool fnqueue_init(void)
{
	fnqueue_head = 0;
     360:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <_ZL12fnqueue_head>
	fnqueue_tail = 0;
     364:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_ZL12fnqueue_tail>
	fnqueue_count = 0;
     368:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <_ZL13fnqueue_count>
    
    return true;
}
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	08 95       	ret

00000370 <_Z11fnqueue_runv>:

bool fnqueue_run(void)
{
    critical_begin();
     370:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14critical_beginv>
    if (fnqueue_count > 0)
     374:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_ZL13fnqueue_count>
     378:	88 23       	and	r24, r24
     37a:	11 f1       	breq	.+68     	; 0x3c0 <_Z11fnqueue_runv+0x50>
    {
        critical_end();
     37c:	0e 94 ab 00 	call	0x156	; 0x156 <_Z12critical_endv>

        fnqueue_functions[fnqueue_head]();
     380:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <_ZL12fnqueue_head>
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	e0 56       	subi	r30, 0x60	; 96
     38c:	fe 4f       	sbci	r31, 0xFE	; 254
     38e:	01 90       	ld	r0, Z+
     390:	f0 81       	ld	r31, Z
     392:	e0 2d       	mov	r30, r0
     394:	09 95       	icall
        critical_begin();
     396:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14critical_beginv>
        fnqueue_head = (fnqueue_head + 1) % FNQUEUE_LENGTH;
     39a:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_ZL12fnqueue_head>
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	8f 70       	andi	r24, 0x0F	; 15
     3a4:	90 78       	andi	r25, 0x80	; 128
     3a6:	99 23       	and	r25, r25
     3a8:	24 f4       	brge	.+8      	; 0x3b2 <_Z11fnqueue_runv+0x42>
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	80 6f       	ori	r24, 0xF0	; 240
     3ae:	9f 6f       	ori	r25, 0xFF	; 255
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <_ZL12fnqueue_head>
        fnqueue_count--;
     3b6:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_ZL13fnqueue_count>
     3ba:	81 50       	subi	r24, 0x01	; 1
     3bc:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <_ZL13fnqueue_count>
    }
    critical_end();
     3c0:	0e 94 ab 00 	call	0x156	; 0x156 <_Z12critical_endv>

	return 1;
}
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	08 95       	ret

000003c8 <_Z11fnqueue_addPFvvE>:

bool fnqueue_add(void (*function)(void))
{
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
	bool result = false;
	
    critical_begin();
     3ce:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14critical_beginv>
    if (fnqueue_count < FNQUEUE_LENGTH)
     3d2:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <_ZL13fnqueue_count>
     3d6:	20 31       	cpi	r18, 0x10	; 16
     3d8:	d0 f4       	brcc	.+52     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
    {
        fnqueue_functions[fnqueue_tail] = function;
     3da:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_ZL12fnqueue_tail>
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	fc 01       	movw	r30, r24
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	e0 56       	subi	r30, 0x60	; 96
     3e8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ea:	d1 83       	std	Z+1, r29	; 0x01
     3ec:	c0 83       	st	Z, r28
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	8f 70       	andi	r24, 0x0F	; 15
     3f2:	90 78       	andi	r25, 0x80	; 128
     3f4:	99 23       	and	r25, r25
     3f6:	24 f4       	brge	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	80 6f       	ori	r24, 0xF0	; 240
     3fc:	9f 6f       	ori	r25, 0xFF	; 255
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <_ZL12fnqueue_tail>
        fnqueue_count++;
     404:	2f 5f       	subi	r18, 0xFF	; 255
     406:	20 93 9d 01 	sts	0x019D, r18	; 0x80019d <_ZL13fnqueue_count>
        result = true;
     40a:	c1 e0       	ldi	r28, 0x01	; 1
     40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	return 1;
}

bool fnqueue_add(void (*function)(void))
{
	bool result = false;
     40e:	c0 e0       	ldi	r28, 0x00	; 0
        fnqueue_functions[fnqueue_tail] = function;
        fnqueue_tail = (fnqueue_tail + 1) % FNQUEUE_LENGTH;
        fnqueue_count++;
        result = true;
    }
    critical_end();
     410:	0e 94 ab 00 	call	0x156	; 0x156 <_Z12critical_endv>
    return result;
     414:	8c 2f       	mov	r24, r28
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <_ZN5Print17availableForWriteEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	08 95       	ret

00000422 <_ZN5Print5flushEv>:
     422:	08 95       	ret

00000424 <_ZN13LiquidCrystal11pulseEnableEv>:
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	ec 01       	movw	r28, r24
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	8e 81       	ldd	r24, Y+6	; 0x06
     42e:	0e 94 09 08 	call	0x1012	; 0x1012 <digitalWrite>
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	8e 81       	ldd	r24, Y+6	; 0x06
     43e:	0e 94 09 08 	call	0x1012	; 0x1012 <digitalWrite>
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	8e 81       	ldd	r24, Y+6	; 0x06
     44e:	0e 94 09 08 	call	0x1012	; 0x1012 <digitalWrite>
     452:	84 e6       	ldi	r24, 0x64	; 100
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <_ZN13LiquidCrystal10write4bitsEh>:
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	6c 01       	movw	r12, r24
     472:	8c 01       	movw	r16, r24
     474:	09 5f       	subi	r16, 0xF9	; 249
     476:	1f 4f       	sbci	r17, 0xFF	; 255
     478:	c0 e0       	ldi	r28, 0x00	; 0
     47a:	d0 e0       	ldi	r29, 0x00	; 0
     47c:	e6 2e       	mov	r14, r22
     47e:	f1 2c       	mov	r15, r1
     480:	b7 01       	movw	r22, r14
     482:	0c 2e       	mov	r0, r28
     484:	02 c0       	rjmp	.+4      	; 0x48a <_ZN13LiquidCrystal10write4bitsEh+0x2a>
     486:	75 95       	asr	r23
     488:	67 95       	ror	r22
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <_ZN13LiquidCrystal10write4bitsEh+0x26>
     48e:	61 70       	andi	r22, 0x01	; 1
     490:	f8 01       	movw	r30, r16
     492:	81 91       	ld	r24, Z+
     494:	8f 01       	movw	r16, r30
     496:	0e 94 09 08 	call	0x1012	; 0x1012 <digitalWrite>
     49a:	21 96       	adiw	r28, 0x01	; 1
     49c:	c4 30       	cpi	r28, 0x04	; 4
     49e:	d1 05       	cpc	r29, r1
     4a0:	79 f7       	brne	.-34     	; 0x480 <_ZN13LiquidCrystal10write4bitsEh+0x20>
     4a2:	c6 01       	movw	r24, r12
     4a4:	0e 94 12 02 	call	0x424	; 0x424 <_ZN13LiquidCrystal11pulseEnableEv>
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	ef 90       	pop	r14
     4b4:	df 90       	pop	r13
     4b6:	cf 90       	pop	r12
     4b8:	08 95       	ret

000004ba <_ZN13LiquidCrystal10write8bitsEh>:
     4ba:	cf 92       	push	r12
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	6c 01       	movw	r12, r24
     4cc:	8c 01       	movw	r16, r24
     4ce:	09 5f       	subi	r16, 0xF9	; 249
     4d0:	1f 4f       	sbci	r17, 0xFF	; 255
     4d2:	c0 e0       	ldi	r28, 0x00	; 0
     4d4:	d0 e0       	ldi	r29, 0x00	; 0
     4d6:	e6 2e       	mov	r14, r22
     4d8:	f1 2c       	mov	r15, r1
     4da:	b7 01       	movw	r22, r14
     4dc:	0c 2e       	mov	r0, r28
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <_ZN13LiquidCrystal10write8bitsEh+0x2a>
     4e0:	75 95       	asr	r23
     4e2:	67 95       	ror	r22
     4e4:	0a 94       	dec	r0
     4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <_ZN13LiquidCrystal10write8bitsEh+0x26>
     4e8:	61 70       	andi	r22, 0x01	; 1
     4ea:	f8 01       	movw	r30, r16
     4ec:	81 91       	ld	r24, Z+
     4ee:	8f 01       	movw	r16, r30
     4f0:	0e 94 09 08 	call	0x1012	; 0x1012 <digitalWrite>
     4f4:	21 96       	adiw	r28, 0x01	; 1
     4f6:	c8 30       	cpi	r28, 0x08	; 8
     4f8:	d1 05       	cpc	r29, r1
     4fa:	79 f7       	brne	.-34     	; 0x4da <_ZN13LiquidCrystal10write8bitsEh+0x20>
     4fc:	c6 01       	movw	r24, r12
     4fe:	0e 94 12 02 	call	0x424	; 0x424 <_ZN13LiquidCrystal11pulseEnableEv>
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	08 95       	ret

00000514 <_ZN13LiquidCrystal4sendEhh>:
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	ec 01       	movw	r28, r24
     51c:	16 2f       	mov	r17, r22
     51e:	64 2f       	mov	r22, r20
     520:	8c 81       	ldd	r24, Y+4	; 0x04
     522:	0e 94 09 08 	call	0x1012	; 0x1012 <digitalWrite>
     526:	8d 81       	ldd	r24, Y+5	; 0x05
     528:	8f 3f       	cpi	r24, 0xFF	; 255
     52a:	19 f0       	breq	.+6      	; 0x532 <_ZN13LiquidCrystal4sendEhh+0x1e>
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	0e 94 09 08 	call	0x1012	; 0x1012 <digitalWrite>
     532:	8f 85       	ldd	r24, Y+15	; 0x0f
     534:	84 ff       	sbrs	r24, 4
     536:	05 c0       	rjmp	.+10     	; 0x542 <_ZN13LiquidCrystal4sendEhh+0x2e>
     538:	61 2f       	mov	r22, r17
     53a:	ce 01       	movw	r24, r28
     53c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN13LiquidCrystal10write8bitsEh>
     540:	11 c0       	rjmp	.+34     	; 0x564 <_ZN13LiquidCrystal4sendEhh+0x50>
     542:	61 2f       	mov	r22, r17
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	75 95       	asr	r23
     548:	67 95       	ror	r22
     54a:	75 95       	asr	r23
     54c:	67 95       	ror	r22
     54e:	75 95       	asr	r23
     550:	67 95       	ror	r22
     552:	75 95       	asr	r23
     554:	67 95       	ror	r22
     556:	ce 01       	movw	r24, r28
     558:	0e 94 30 02 	call	0x460	; 0x460 <_ZN13LiquidCrystal10write4bitsEh>
     55c:	61 2f       	mov	r22, r17
     55e:	ce 01       	movw	r24, r28
     560:	0e 94 30 02 	call	0x460	; 0x460 <_ZN13LiquidCrystal10write4bitsEh>
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	08 95       	ret

0000056c <_ZN13LiquidCrystal5clearEv>:
     56c:	40 e0       	ldi	r20, 0x00	; 0
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN13LiquidCrystal4sendEhh>
     574:	80 ed       	ldi	r24, 0xD0	; 208
     576:	97 e0       	ldi	r25, 0x07	; 7
     578:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
     57c:	08 95       	ret

0000057e <_ZN13LiquidCrystal9setCursorEhh>:
     57e:	fc 01       	movw	r30, r24
     580:	44 30       	cpi	r20, 0x04	; 4
     582:	08 f0       	brcs	.+2      	; 0x586 <_ZN13LiquidCrystal9setCursorEhh+0x8>
     584:	43 e0       	ldi	r20, 0x03	; 3
     586:	83 89       	ldd	r24, Z+19	; 0x13
     588:	48 17       	cp	r20, r24
     58a:	10 f0       	brcs	.+4      	; 0x590 <_ZN13LiquidCrystal9setCursorEhh+0x12>
     58c:	4f ef       	ldi	r20, 0xFF	; 255
     58e:	48 0f       	add	r20, r24
     590:	df 01       	movw	r26, r30
     592:	a4 0f       	add	r26, r20
     594:	b1 1d       	adc	r27, r1
     596:	54 96       	adiw	r26, 0x14	; 20
     598:	9c 91       	ld	r25, X
     59a:	69 0f       	add	r22, r25
     59c:	60 68       	ori	r22, 0x80	; 128
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	cf 01       	movw	r24, r30
     5a2:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN13LiquidCrystal4sendEhh>
     5a6:	08 95       	ret

000005a8 <_ZN13LiquidCrystal7displayEv>:
     5a8:	fc 01       	movw	r30, r24
     5aa:	60 89       	ldd	r22, Z+16	; 0x10
     5ac:	26 2f       	mov	r18, r22
     5ae:	24 60       	ori	r18, 0x04	; 4
     5b0:	20 8b       	std	Z+16, r18	; 0x10
     5b2:	6c 60       	ori	r22, 0x0C	; 12
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN13LiquidCrystal4sendEhh>
     5ba:	08 95       	ret

000005bc <_ZN13LiquidCrystal5beginEhhh>:
     5bc:	af 92       	push	r10
     5be:	bf 92       	push	r11
     5c0:	cf 92       	push	r12
     5c2:	df 92       	push	r13
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
     5d2:	42 30       	cpi	r20, 0x02	; 2
     5d4:	18 f0       	brcs	.+6      	; 0x5dc <_ZN13LiquidCrystal5beginEhhh+0x20>
     5d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     5d8:	88 60       	ori	r24, 0x08	; 8
     5da:	8f 87       	std	Y+15, r24	; 0x0f
     5dc:	4b 8b       	std	Y+19, r20	; 0x13
     5de:	1c 8a       	std	Y+20, r1	; 0x14
     5e0:	80 e4       	ldi	r24, 0x40	; 64
     5e2:	8d 8b       	std	Y+21, r24	; 0x15
     5e4:	6e 8b       	std	Y+22, r22	; 0x16
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	60 5c       	subi	r22, 0xC0	; 192
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	6f 8b       	std	Y+23, r22	; 0x17
     5ee:	22 23       	and	r18, r18
     5f0:	29 f0       	breq	.+10     	; 0x5fc <_ZN13LiquidCrystal5beginEhhh+0x40>
     5f2:	41 30       	cpi	r20, 0x01	; 1
     5f4:	19 f4       	brne	.+6      	; 0x5fc <_ZN13LiquidCrystal5beginEhhh+0x40>
     5f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     5f8:	84 60       	ori	r24, 0x04	; 4
     5fa:	8f 87       	std	Y+15, r24	; 0x0f
     5fc:	61 e0       	ldi	r22, 0x01	; 1
     5fe:	8c 81       	ldd	r24, Y+4	; 0x04
     600:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <pinMode>
     604:	8d 81       	ldd	r24, Y+5	; 0x05
     606:	8f 3f       	cpi	r24, 0xFF	; 255
     608:	19 f0       	breq	.+6      	; 0x610 <_ZN13LiquidCrystal5beginEhhh+0x54>
     60a:	61 e0       	ldi	r22, 0x01	; 1
     60c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <pinMode>
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	8e 81       	ldd	r24, Y+6	; 0x06
     614:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <pinMode>
     618:	7e 01       	movw	r14, r28
     61a:	87 e0       	ldi	r24, 0x07	; 7
     61c:	e8 0e       	add	r14, r24
     61e:	f1 1c       	adc	r15, r1
     620:	00 e0       	ldi	r16, 0x00	; 0
     622:	10 e0       	ldi	r17, 0x00	; 0
     624:	68 94       	set
     626:	aa 24       	eor	r10, r10
     628:	a3 f8       	bld	r10, 3
     62a:	b1 2c       	mov	r11, r1
     62c:	68 94       	set
     62e:	cc 24       	eor	r12, r12
     630:	c2 f8       	bld	r12, 2
     632:	d1 2c       	mov	r13, r1
     634:	8f 85       	ldd	r24, Y+15	; 0x0f
     636:	84 fd       	sbrc	r24, 4
     638:	03 c0       	rjmp	.+6      	; 0x640 <_ZN13LiquidCrystal5beginEhhh+0x84>
     63a:	8c 2d       	mov	r24, r12
     63c:	9d 2d       	mov	r25, r13
     63e:	02 c0       	rjmp	.+4      	; 0x644 <_ZN13LiquidCrystal5beginEhhh+0x88>
     640:	8a 2d       	mov	r24, r10
     642:	9b 2d       	mov	r25, r11
     644:	08 17       	cp	r16, r24
     646:	19 07       	cpc	r17, r25
     648:	4c f4       	brge	.+18     	; 0x65c <_ZN13LiquidCrystal5beginEhhh+0xa0>
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	f7 01       	movw	r30, r14
     64e:	81 91       	ld	r24, Z+
     650:	7f 01       	movw	r14, r30
     652:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <pinMode>
     656:	0f 5f       	subi	r16, 0xFF	; 255
     658:	1f 4f       	sbci	r17, 0xFF	; 255
     65a:	ec cf       	rjmp	.-40     	; 0x634 <_ZN13LiquidCrystal5beginEhhh+0x78>
     65c:	80 e5       	ldi	r24, 0x50	; 80
     65e:	93 ec       	ldi	r25, 0xC3	; 195
     660:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	8c 81       	ldd	r24, Y+4	; 0x04
     668:	0e 94 09 08 	call	0x1012	; 0x1012 <digitalWrite>
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	8e 81       	ldd	r24, Y+6	; 0x06
     670:	0e 94 09 08 	call	0x1012	; 0x1012 <digitalWrite>
     674:	8d 81       	ldd	r24, Y+5	; 0x05
     676:	8f 3f       	cpi	r24, 0xFF	; 255
     678:	19 f0       	breq	.+6      	; 0x680 <_ZN13LiquidCrystal5beginEhhh+0xc4>
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	0e 94 09 08 	call	0x1012	; 0x1012 <digitalWrite>
     680:	6f 85       	ldd	r22, Y+15	; 0x0f
     682:	64 fd       	sbrc	r22, 4
     684:	1d c0       	rjmp	.+58     	; 0x6c0 <_ZN13LiquidCrystal5beginEhhh+0x104>
     686:	63 e0       	ldi	r22, 0x03	; 3
     688:	ce 01       	movw	r24, r28
     68a:	0e 94 30 02 	call	0x460	; 0x460 <_ZN13LiquidCrystal10write4bitsEh>
     68e:	84 e9       	ldi	r24, 0x94	; 148
     690:	91 e1       	ldi	r25, 0x11	; 17
     692:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
     696:	63 e0       	ldi	r22, 0x03	; 3
     698:	ce 01       	movw	r24, r28
     69a:	0e 94 30 02 	call	0x460	; 0x460 <_ZN13LiquidCrystal10write4bitsEh>
     69e:	84 e9       	ldi	r24, 0x94	; 148
     6a0:	91 e1       	ldi	r25, 0x11	; 17
     6a2:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
     6a6:	63 e0       	ldi	r22, 0x03	; 3
     6a8:	ce 01       	movw	r24, r28
     6aa:	0e 94 30 02 	call	0x460	; 0x460 <_ZN13LiquidCrystal10write4bitsEh>
     6ae:	86 e9       	ldi	r24, 0x96	; 150
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
     6b6:	62 e0       	ldi	r22, 0x02	; 2
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 30 02 	call	0x460	; 0x460 <_ZN13LiquidCrystal10write4bitsEh>
     6be:	19 c0       	rjmp	.+50     	; 0x6f2 <_ZN13LiquidCrystal5beginEhhh+0x136>
     6c0:	60 62       	ori	r22, 0x20	; 32
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	ce 01       	movw	r24, r28
     6c6:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN13LiquidCrystal4sendEhh>
     6ca:	84 e9       	ldi	r24, 0x94	; 148
     6cc:	91 e1       	ldi	r25, 0x11	; 17
     6ce:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
     6d2:	6f 85       	ldd	r22, Y+15	; 0x0f
     6d4:	60 62       	ori	r22, 0x20	; 32
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	ce 01       	movw	r24, r28
     6da:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN13LiquidCrystal4sendEhh>
     6de:	86 e9       	ldi	r24, 0x96	; 150
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 03 07 	call	0xe06	; 0xe06 <delayMicroseconds>
     6e6:	6f 85       	ldd	r22, Y+15	; 0x0f
     6e8:	60 62       	ori	r22, 0x20	; 32
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	ce 01       	movw	r24, r28
     6ee:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN13LiquidCrystal4sendEhh>
     6f2:	6f 85       	ldd	r22, Y+15	; 0x0f
     6f4:	60 62       	ori	r22, 0x20	; 32
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	ce 01       	movw	r24, r28
     6fa:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN13LiquidCrystal4sendEhh>
     6fe:	84 e0       	ldi	r24, 0x04	; 4
     700:	88 8b       	std	Y+16, r24	; 0x10
     702:	ce 01       	movw	r24, r28
     704:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <_ZN13LiquidCrystal7displayEv>
     708:	ce 01       	movw	r24, r28
     70a:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN13LiquidCrystal5clearEv>
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	89 8b       	std	Y+17, r24	; 0x11
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	66 e0       	ldi	r22, 0x06	; 6
     716:	ce 01       	movw	r24, r28
     718:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN13LiquidCrystal4sendEhh>
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	df 90       	pop	r13
     72a:	cf 90       	pop	r12
     72c:	bf 90       	pop	r11
     72e:	af 90       	pop	r10
     730:	08 95       	ret

00000732 <_ZN13LiquidCrystalC1Ehhhhhh>:
     732:	cf 92       	push	r12
     734:	ef 92       	push	r14
     736:	0f 93       	push	r16
     738:	fc 01       	movw	r30, r24
     73a:	13 82       	std	Z+3, r1	; 0x03
     73c:	12 82       	std	Z+2, r1	; 0x02
     73e:	88 e0       	ldi	r24, 0x08	; 8
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	91 83       	std	Z+1, r25	; 0x01
     744:	80 83       	st	Z, r24
     746:	64 83       	std	Z+4, r22	; 0x04
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	85 83       	std	Z+5, r24	; 0x05
     74c:	46 83       	std	Z+6, r20	; 0x06
     74e:	27 83       	std	Z+7, r18	; 0x07
     750:	00 87       	std	Z+8, r16	; 0x08
     752:	e1 86       	std	Z+9, r14	; 0x09
     754:	c2 86       	std	Z+10, r12	; 0x0a
     756:	13 86       	std	Z+11, r1	; 0x0b
     758:	14 86       	std	Z+12, r1	; 0x0c
     75a:	15 86       	std	Z+13, r1	; 0x0d
     75c:	16 86       	std	Z+14, r1	; 0x0e
     75e:	17 86       	std	Z+15, r1	; 0x0f
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	41 e0       	ldi	r20, 0x01	; 1
     764:	60 e1       	ldi	r22, 0x10	; 16
     766:	cf 01       	movw	r24, r30
     768:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN13LiquidCrystal5beginEhhh>
     76c:	0f 91       	pop	r16
     76e:	ef 90       	pop	r14
     770:	cf 90       	pop	r12
     772:	08 95       	ret

00000774 <_ZN13LiquidCrystal17scrollDisplayLeftEv>:
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	68 e1       	ldi	r22, 0x18	; 24
     778:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN13LiquidCrystal4sendEhh>
     77c:	08 95       	ret

0000077e <_ZN13LiquidCrystal18scrollDisplayRightEv>:
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	6c e1       	ldi	r22, 0x1C	; 28
     782:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN13LiquidCrystal4sendEhh>
     786:	08 95       	ret

00000788 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	08 95       	ret

00000794 <_Z10down_keyUpv>:

/************************************************************************/
/*                           CALLBACKS                                  */
/************************************************************************/
void down_keyUp()
{
     794:	08 95       	ret

00000796 <_Z12down_keyDownv>:
	
}

void down_keyDown()
{
     796:	08 95       	ret

00000798 <_Z10up_keyLeftv>:
	
}

void up_keyLeft()
{
     798:	08 95       	ret

0000079a <_Z12down_keyLeftv>:
	
}

void down_keyLeft()
{
     79a:	08 95       	ret

0000079c <_Z11up_keyRightv>:
	
}

void up_keyRight()
{
     79c:	08 95       	ret

0000079e <_Z13down_keyRightv>:
	
}

void down_keyRight()
{
     79e:	08 95       	ret

000007a0 <_Z15iniciarTimerMADv>:
/************************************************************************/
/*                          AUXILIARES                                  */
/************************************************************************/
void iniciarTimerMAD()
{
	contadorMAD3seg1=contador;
     7a0:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <_ZL8contador>
     7a4:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <_ZL8contador+0x1>
     7a8:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_ZL16contadorMAD3seg1>
     7ac:	08 95       	ret

000007ae <_Z14down_keySelectv>:
	
}

void down_keySelect()
{
	if (modo==MP)
     7ae:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <_ZL4modo>
     7b2:	82 30       	cpi	r24, 0x02	; 2
     7b4:	11 f4       	brne	.+4      	; 0x7ba <_Z14down_keySelectv+0xc>
	iniciarTimerMAD();
     7b6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_Z15iniciarTimerMADv>
     7ba:	08 95       	ret

000007bc <_Z16iniciarTimerMAD2v>:
	contadorMAD3seg1=contador;
}

void iniciarTimerMAD2()
{
	contadorMAD3seg2=contador;
     7bc:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <_ZL8contador>
     7c0:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <_ZL8contador+0x1>
     7c4:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <_ZL16contadorMAD3seg2>
     7c8:	08 95       	ret

000007ca <_Z16iniciarTimerMAD5v>:
}

void iniciarTimerMAD5()
{
	contador5seg=contador;
     7ca:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <_ZL8contador>
     7ce:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <_ZL8contador+0x1>
     7d2:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <_ZL12contador5seg>
     7d6:	08 95       	ret

000007d8 <_Z12up_keySelectv>:
	}
}

void up_keySelect()
{
	switch (modo)
     7d8:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <_ZL4modo>
     7dc:	82 30       	cpi	r24, 0x02	; 2
     7de:	69 f0       	breq	.+26     	; 0x7fa <_Z12up_keySelectv+0x22>
     7e0:	1c f4       	brge	.+6      	; 0x7e8 <_Z12up_keySelectv+0x10>
     7e2:	88 23       	and	r24, r24
     7e4:	31 f0       	breq	.+12     	; 0x7f2 <_Z12up_keySelectv+0x1a>
     7e6:	08 95       	ret
     7e8:	83 30       	cpi	r24, 0x03	; 3
     7ea:	01 f1       	breq	.+64     	; 0x82c <_Z12up_keySelectv+0x54>
     7ec:	84 30       	cpi	r24, 0x04	; 4
     7ee:	11 f1       	breq	.+68     	; 0x834 <_Z12up_keySelectv+0x5c>
     7f0:	08 95       	ret
	{
		case START:
		{
			modo = MP;
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZL4modo>
		}break;
     7f8:	08 95       	ret
		case MP:
		{
			iniciarTimerMAD2();
     7fa:	0e 94 de 03 	call	0x7bc	; 0x7bc <_Z16iniciarTimerMAD2v>
			// Si la cantidad de segundos que pasaron es menor a 3
			//  -> me voy a MVT
			//  sino me voy a MAD
			if((contadorMAD3seg2-contadorMAD3seg1) < 3)
     7fe:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <_ZL16contadorMAD3seg2>
     802:	08 2e       	mov	r0, r24
     804:	00 0c       	add	r0, r0
     806:	99 0b       	sbc	r25, r25
     808:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <_ZL16contadorMAD3seg1>
     80c:	82 1b       	sub	r24, r18
     80e:	91 09       	sbc	r25, r1
     810:	27 fd       	sbrc	r18, 7
     812:	93 95       	inc	r25
     814:	03 97       	sbiw	r24, 0x03	; 3
     816:	24 f4       	brge	.+8      	; 0x820 <_Z12up_keySelectv+0x48>
			{
				modo = MVT;
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZL4modo>
     81e:	08 95       	ret
			}
			else
			{
				modo = MAD;
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZL4modo>
				iniciarTimerMAD5();
     826:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z16iniciarTimerMAD5v>
     82a:	08 95       	ret
			}
		}break;
		case MVT:
		{
			modo = MP;
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZL4modo>
		}break;
     832:	08 95       	ret
		case MAD:
		{
			modo = MP;
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZL4modo>
     83a:	08 95       	ret

0000083c <_Z9saveSplitv>:
	contador5seg=contador;
}

void saveSplit()
{
	if(tiempoActual == 9)
     83c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <_ZL12tiempoActual>
     840:	89 30       	cpi	r24, 0x09	; 9
     842:	19 f4       	brne	.+6      	; 0x84a <_Z9saveSplitv+0xe>
	tiempoActual=-1;
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <_ZL12tiempoActual>

	tiempoActual++;
     84a:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <_ZL12tiempoActual>
     84e:	ef 5f       	subi	r30, 0xFF	; 255
     850:	e0 93 e4 01 	sts	0x01E4, r30	; 0x8001e4 <_ZL12tiempoActual>
	tiempos[tiempoActual]=contadorPosta;
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	ee 0f       	add	r30, r30
     858:	ff 1f       	adc	r31, r31
     85a:	eb 51       	subi	r30, 0x1B	; 27
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <_ZL13contadorPosta>
     862:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <_ZL13contadorPosta+0x1>
     866:	91 83       	std	Z+1, r25	; 0x01
     868:	80 83       	st	Z, r24
     86a:	08 95       	ret

0000086c <_Z12brightnessUpv>:
}

void brightnessUp()
{
	if(brilloActual<5)
     86c:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <_ZL12brilloActual>
     870:	65 30       	cpi	r22, 0x05	; 5
     872:	50 f4       	brcc	.+20     	; 0x888 <_Z12brightnessUpv+0x1c>
	{
		brilloActual++;
     874:	6f 5f       	subi	r22, 0xFF	; 255
     876:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <_ZL12brilloActual>
		analogWrite(10,brilloActual*COEFBRILLO);
     87a:	83 e3       	ldi	r24, 0x33	; 51
     87c:	68 9f       	mul	r22, r24
     87e:	b0 01       	movw	r22, r0
     880:	11 24       	eor	r1, r1
     882:	8a e0       	ldi	r24, 0x0A	; 10
     884:	0e 94 48 07 	call	0xe90	; 0xe90 <analogWrite>
     888:	08 95       	ret

0000088a <_Z14brightnessDownv>:
	}
}
void brightnessDown()
{
	if(brilloActual>1)
     88a:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <_ZL12brilloActual>
     88e:	62 30       	cpi	r22, 0x02	; 2
     890:	50 f0       	brcs	.+20     	; 0x8a6 <_Z14brightnessDownv+0x1c>
	{
		brilloActual--;
     892:	61 50       	subi	r22, 0x01	; 1
     894:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <_ZL12brilloActual>
		analogWrite(10,brilloActual*COEFBRILLO);
     898:	83 e3       	ldi	r24, 0x33	; 51
     89a:	68 9f       	mul	r22, r24
     89c:	b0 01       	movw	r22, r0
     89e:	11 24       	eor	r1, r1
     8a0:	8a e0       	ldi	r24, 0x0A	; 10
     8a2:	0e 94 48 07 	call	0xe90	; 0xe90 <analogWrite>
     8a6:	08 95       	ret

000008a8 <_Z12showNextTimev>:
	}
}

int showNextTime()
{
	if(posEnTiempos>8)
     8a8:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <_ZL12posEnTiempos>
     8ac:	89 30       	cpi	r24, 0x09	; 9
     8ae:	1c f0       	brlt	.+6      	; 0x8b6 <_Z12showNextTimev+0xe>
	posEnTiempos=-1;
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <_ZL12posEnTiempos>

	posEnTiempos++;
     8b6:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <_ZL12posEnTiempos>
     8ba:	ef 5f       	subi	r30, 0xFF	; 255
     8bc:	e0 93 e3 01 	sts	0x01E3, r30	; 0x8001e3 <_ZL12posEnTiempos>
	return tiempos[posEnTiempos];
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 0b       	sbc	r31, r31
     8c4:	eb 51       	subi	r30, 0x1B	; 27
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
}
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	08 95       	ret

000008ce <_Z12showPrevTimev>:

int showPrevTime()
{
	if(posEnTiempos<1)
     8ce:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <_ZL12posEnTiempos>
     8d2:	18 16       	cp	r1, r24
     8d4:	1c f0       	brlt	.+6      	; 0x8dc <_Z12showPrevTimev+0xe>
	posEnTiempos=10;
     8d6:	8a e0       	ldi	r24, 0x0A	; 10
     8d8:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <_ZL12posEnTiempos>

	posEnTiempos--;
     8dc:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <_ZL12posEnTiempos>
     8e0:	e1 50       	subi	r30, 0x01	; 1
     8e2:	e0 93 e3 01 	sts	0x01E3, r30	; 0x8001e3 <_ZL12posEnTiempos>
	return tiempos[posEnTiempos];
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 0b       	sbc	r31, r31
     8ea:	eb 51       	subi	r30, 0x1B	; 27
     8ec:	fe 4f       	sbci	r31, 0xFE	; 254
}
     8ee:	80 81       	ld	r24, Z
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	08 95       	ret

000008f4 <_Z10resetTimerv>:

void resetTimer()
{
	contadorPosta=0;
     8f4:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <_ZL13contadorPosta+0x1>
     8f8:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <_ZL13contadorPosta>
	contadorPausado=0;
     8fc:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <_ZL15contadorPausado+0x1>
     900:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <_ZL15contadorPausado>
	contador=0;
     904:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <_ZL8contador+0x1>
     908:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <_ZL8contador>
     90c:	08 95       	ret

0000090e <_Z10up_keyDownv>:
	}
}

void up_keyDown()
{
	switch (modo)
     90e:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <_ZL4modo>
     912:	82 30       	cpi	r24, 0x02	; 2
     914:	91 f0       	breq	.+36     	; 0x93a <_Z10up_keyDownv+0x2c>
     916:	2c f4       	brge	.+10     	; 0x922 <_Z10up_keyDownv+0x14>
     918:	88 23       	and	r24, r24
     91a:	41 f0       	breq	.+16     	; 0x92c <_Z10up_keyDownv+0x1e>
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	51 f0       	breq	.+20     	; 0x934 <_Z10up_keyDownv+0x26>
     920:	08 95       	ret
     922:	83 30       	cpi	r24, 0x03	; 3
     924:	79 f0       	breq	.+30     	; 0x944 <_Z10up_keyDownv+0x36>
     926:	84 30       	cpi	r24, 0x04	; 4
     928:	a1 f0       	breq	.+40     	; 0x952 <_Z10up_keyDownv+0x44>
     92a:	08 95       	ret
	{
		case START:
		{
			modo = MP;
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZL4modo>
		}break;
     932:	08 95       	ret
		case MCA:
		{
			saveSplit();
     934:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z9saveSplitv>
		}break;
     938:	08 95       	ret
		case MP:
		{
			saveSplit();
     93a:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z9saveSplitv>
			resetTimer();
     93e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_Z10resetTimerv>
		}break;
     942:	08 95       	ret
		case MVT:
		{
			contadorPosta = showPrevTime();
     944:	0e 94 67 04 	call	0x8ce	; 0x8ce <_Z12showPrevTimev>
     948:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZL13contadorPosta+0x1>
     94c:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZL13contadorPosta>
		}break;
     950:	08 95       	ret
		case MAD:
		{
			iniciarTimerMAD5();
     952:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z16iniciarTimerMAD5v>
			brightnessDown();
     956:	0e 94 45 04 	call	0x88a	; 0x88a <_Z14brightnessDownv>
     95a:	08 95       	ret

0000095c <_Z10pauseTimerv>:
	contador=0;
}

void pauseTimer()
{
	contadorPausado=contador;
     95c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <_ZL8contador>
     960:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <_ZL8contador+0x1>
     964:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <_ZL15contadorPausado+0x1>
     968:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <_ZL15contadorPausado>
	contadorPosta=contadorPausado;
     96c:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZL13contadorPosta+0x1>
     970:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZL13contadorPosta>
     974:	08 95       	ret

00000976 <_Z13continueTimerv>:
}

void continueTimer()
{
	contador=contadorPausado;
     976:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <_ZL15contadorPausado>
     97a:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <_ZL15contadorPausado+0x1>
     97e:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <_ZL8contador+0x1>
     982:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <_ZL8contador>
     986:	08 95       	ret

00000988 <_Z8up_keyUpv>:
	iniciarTimerMAD();
}

void up_keyUp()
{
	switch (modo)
     988:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <_ZL4modo>
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	a9 f0       	breq	.+42     	; 0x9ba <_Z8up_keyUpv+0x32>
     990:	2c f4       	brge	.+10     	; 0x99c <_Z8up_keyUpv+0x14>
     992:	88 23       	and	r24, r24
     994:	41 f0       	breq	.+16     	; 0x9a6 <_Z8up_keyUpv+0x1e>
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	51 f0       	breq	.+20     	; 0x9ae <_Z8up_keyUpv+0x26>
     99a:	08 95       	ret
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	99 f0       	breq	.+38     	; 0x9c6 <_Z8up_keyUpv+0x3e>
     9a0:	84 30       	cpi	r24, 0x04	; 4
     9a2:	c1 f0       	breq	.+48     	; 0x9d4 <_Z8up_keyUpv+0x4c>
     9a4:	08 95       	ret
	{
		case START:
		{
			modo = MP;
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZL4modo>
		}break;
     9ac:	08 95       	ret
		case MCA:
		{
			pauseTimer();
     9ae:	0e 94 ae 04 	call	0x95c	; 0x95c <_Z10pauseTimerv>
			modo = MP;
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZL4modo>
		}break;
     9b8:	08 95       	ret
		case MP:
		{
			continueTimer();
     9ba:	0e 94 bb 04 	call	0x976	; 0x976 <_Z13continueTimerv>
			modo = MCA;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZL4modo>
		}break;
     9c4:	08 95       	ret
		case MVT:
		{
			contadorPosta = showNextTime();
     9c6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z12showNextTimev>
     9ca:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZL13contadorPosta+0x1>
     9ce:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZL13contadorPosta>
		}break;
     9d2:	08 95       	ret
		case MAD:
		{
			iniciarTimerMAD5();
     9d4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z16iniciarTimerMAD5v>
			if(contadorAux != contadorPausado)
     9d8:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <_ZL15contadorPausado>
     9dc:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <_ZL15contadorPausado+0x1>
     9e0:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <_ZL11contadorAux>
     9e4:	30 91 e0 01 	lds	r19, 0x01E0	; 0x8001e0 <_ZL11contadorAux+0x1>
     9e8:	28 17       	cp	r18, r24
     9ea:	39 07       	cpc	r19, r25
     9ec:	21 f0       	breq	.+8      	; 0x9f6 <_Z8up_keyUpv+0x6e>
			contadorAux = contadorPausado;
     9ee:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <_ZL11contadorAux+0x1>
     9f2:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <_ZL11contadorAux>
			brightnessUp();
     9f6:	0e 94 36 04 	call	0x86c	; 0x86c <_Z12brightnessUpv>
     9fa:	08 95       	ret

000009fc <_Z12imprimirModoa>:
{
	contador=contadorPausado;
}

void imprimirModo(int8_t m)
{
     9fc:	cf 93       	push	r28
     9fe:	c8 2f       	mov	r28, r24
	lcd.setCursor(13,0);
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	6d e0       	ldi	r22, 0x0D	; 13
     a04:	80 ec       	ldi	r24, 0xC0	; 192
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN13LiquidCrystal9setCursorEhh>
	switch (m)
     a0c:	c2 30       	cpi	r28, 0x02	; 2
     a0e:	81 f0       	breq	.+32     	; 0xa30 <_Z12imprimirModoa+0x34>
     a10:	1c f4       	brge	.+6      	; 0xa18 <_Z12imprimirModoa+0x1c>
     a12:	c1 30       	cpi	r28, 0x01	; 1
     a14:	31 f0       	breq	.+12     	; 0xa22 <_Z12imprimirModoa+0x26>
     a16:	20 c0       	rjmp	.+64     	; 0xa58 <_Z12imprimirModoa+0x5c>
     a18:	c3 30       	cpi	r28, 0x03	; 3
     a1a:	89 f0       	breq	.+34     	; 0xa3e <_Z12imprimirModoa+0x42>
     a1c:	c4 30       	cpi	r28, 0x04	; 4
     a1e:	b1 f0       	breq	.+44     	; 0xa4c <_Z12imprimirModoa+0x50>
     a20:	1b c0       	rjmp	.+54     	; 0xa58 <_Z12imprimirModoa+0x5c>
	{
		case MCA:
		{
			lcd.print("MCA");
     a22:	60 e1       	ldi	r22, 0x10	; 16
     a24:	71 e0       	ldi	r23, 0x01	; 1
     a26:	80 ec       	ldi	r24, 0xC0	; 192
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 8d 08 	call	0x111a	; 0x111a <_ZN5Print5printEPKc>
		}
		break;
     a2e:	14 c0       	rjmp	.+40     	; 0xa58 <_Z12imprimirModoa+0x5c>
		case MP:
		{
			lcd.print("MP ");
     a30:	64 e1       	ldi	r22, 0x14	; 20
     a32:	71 e0       	ldi	r23, 0x01	; 1
     a34:	80 ec       	ldi	r24, 0xC0	; 192
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 8d 08 	call	0x111a	; 0x111a <_ZN5Print5printEPKc>
		}
		break;
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <_Z12imprimirModoa+0x5c>
		case MVT:
		{
			lcd.print("MVT");
     a3e:	68 e1       	ldi	r22, 0x18	; 24
     a40:	71 e0       	ldi	r23, 0x01	; 1
     a42:	80 ec       	ldi	r24, 0xC0	; 192
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 8d 08 	call	0x111a	; 0x111a <_ZN5Print5printEPKc>
		}
		break;
     a4a:	06 c0       	rjmp	.+12     	; 0xa58 <_Z12imprimirModoa+0x5c>
		case MAD:
		{
			lcd.print("MAD");
     a4c:	6c e1       	ldi	r22, 0x1C	; 28
     a4e:	71 e0       	ldi	r23, 0x01	; 1
     a50:	80 ec       	ldi	r24, 0xC0	; 192
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	0e 94 8d 08 	call	0x111a	; 0x111a <_ZN5Print5printEPKc>
		}
		break;
	}
}
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <_Z13procesarTimerv>:
	fnqueue_run();
}

void procesarTimer()
{
	if (modo==START)
     a5c:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <_ZL4modo>
     a60:	81 11       	cpse	r24, r1
     a62:	48 c0       	rjmp	.+144    	; 0xaf4 <_Z13procesarTimerv+0x98>
	{
		if (contScroll==0)
     a64:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <contScroll>
     a68:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <contScroll+0x1>
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	c9 f4       	brne	.+50     	; 0xaa2 <_Z13procesarTimerv+0x46>
		{
			lcd.setCursor(0,0);
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	80 ec       	ldi	r24, 0xC0	; 192
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN13LiquidCrystal9setCursorEhh>
			lcd.print("Sistemas Embebidos 2019");
     a7c:	60 e2       	ldi	r22, 0x20	; 32
     a7e:	71 e0       	ldi	r23, 0x01	; 1
     a80:	80 ec       	ldi	r24, 0xC0	; 192
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 8d 08 	call	0x111a	; 0x111a <_ZN5Print5printEPKc>
			lcd.setCursor(0,1);
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	80 ec       	ldi	r24, 0xC0	; 192
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN13LiquidCrystal9setCursorEhh>
			lcd.print("2do Lab 2 Cuat. Arce-Rey");
     a94:	68 e3       	ldi	r22, 0x38	; 56
     a96:	71 e0       	ldi	r23, 0x01	; 1
     a98:	80 ec       	ldi	r24, 0xC0	; 192
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 8d 08 	call	0x111a	; 0x111a <_ZN5Print5printEPKc>
     aa0:	0f c0       	rjmp	.+30     	; 0xac0 <_Z13procesarTimerv+0x64>
		}
		else if ((contScroll%2)==0)
     aa2:	80 fd       	sbrc	r24, 0
     aa4:	0d c0       	rjmp	.+26     	; 0xac0 <_Z13procesarTimerv+0x64>
		{
			if(sentido)
     aa6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <sentido>
     aaa:	88 23       	and	r24, r24
     aac:	29 f0       	breq	.+10     	; 0xab8 <_Z13procesarTimerv+0x5c>
			{
				lcd.scrollDisplayLeft();
     aae:	80 ec       	ldi	r24, 0xC0	; 192
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	0e 94 ba 03 	call	0x774	; 0x774 <_ZN13LiquidCrystal17scrollDisplayLeftEv>
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <_Z13procesarTimerv+0x64>
			}
			else
			{
				lcd.scrollDisplayRight();
     ab8:	80 ec       	ldi	r24, 0xC0	; 192
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 bf 03 	call	0x77e	; 0x77e <_ZN13LiquidCrystal18scrollDisplayRightEv>
			}
			
		}
		if(contScroll>=16)
     ac0:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <contScroll>
     ac4:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <contScroll+0x1>
     ac8:	40 97       	sbiw	r24, 0x10	; 16
     aca:	54 f0       	brlt	.+20     	; 0xae0 <_Z13procesarTimerv+0x84>
		{
			sentido=!sentido;
     acc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <sentido>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	89 27       	eor	r24, r25
     ad4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <sentido>
			contScroll=0;
     ad8:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <contScroll+0x1>
     adc:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <contScroll>
		}
		contScroll++;
     ae0:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <contScroll>
     ae4:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <contScroll+0x1>
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <contScroll+0x1>
     aee:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <contScroll>
     af2:	08 95       	ret
	}
	else
	{
		lcd.clear();
     af4:	80 ec       	ldi	r24, 0xC0	; 192
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN13LiquidCrystal5clearEv>
		if(modo==MCA)
     afc:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <_ZL4modo>
     b00:	81 30       	cpi	r24, 0x01	; 1
     b02:	41 f4       	brne	.+16     	; 0xb14 <_Z13procesarTimerv+0xb8>
		{
			contadorPosta = contador;
     b04:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <_ZL8contador>
     b08:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <_ZL8contador+0x1>
     b0c:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <_ZL13contadorPosta+0x1>
     b10:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZL13contadorPosta>
		}
		// Vuelve a MP si pasaron 5 segundos y no se apreto nada en MAD
		if ((modo==MAD) && ((contador-contador5seg)>5))
     b14:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <_ZL4modo>
     b18:	84 30       	cpi	r24, 0x04	; 4
     b1a:	61 f4       	brne	.+24     	; 0xb34 <_Z13procesarTimerv+0xd8>
     b1c:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <_ZL8contador>
     b20:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <_ZL8contador+0x1>
     b24:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <_ZL12contador5seg>
     b28:	82 1b       	sub	r24, r18
     b2a:	91 09       	sbc	r25, r1
     b2c:	27 fd       	sbrc	r18, 7
     b2e:	93 95       	inc	r25
     b30:	06 97       	sbiw	r24, 0x06	; 6
     b32:	08 f5       	brcc	.+66     	; 0xb76 <_Z13procesarTimerv+0x11a>
		{
			modo = MP;
		}
		
		lcd.setCursor(0,0);
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	80 ec       	ldi	r24, 0xC0	; 192
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("                "); // Blanqueo la Linea para no imprimir basura
     b40:	61 e5       	ldi	r22, 0x51	; 81
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	80 ec       	ldi	r24, 0xC0	; 192
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 8d 08 	call	0x111a	; 0x111a <_ZN5Print5printEPKc>
		imprimirModo(modo);
     b4c:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <_ZL4modo>
     b50:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_Z12imprimirModoa>
		lcd.setCursor(0,0);
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	80 ec       	ldi	r24, 0xC0	; 192
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print(contadorPosta);
     b60:	60 91 dd 01 	lds	r22, 0x01DD	; 0x8001dd <_ZL13contadorPosta>
     b64:	70 91 de 01 	lds	r23, 0x01DE	; 0x8001de <_ZL13contadorPosta+0x1>
     b68:	4a e0       	ldi	r20, 0x0A	; 10
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	80 ec       	ldi	r24, 0xC0	; 192
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZN5Print5printEii>
	}
}
     b74:	08 95       	ret
			contadorPosta = contador;
		}
		// Vuelve a MP si pasaron 5 segundos y no se apreto nada en MAD
		if ((modo==MAD) && ((contador-contador5seg)>5))
		{
			modo = MP;
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZL4modo>
     b7c:	db cf       	rjmp	.-74     	; 0xb34 <_Z13procesarTimerv+0xd8>

00000b7e <setup>:



void setup()
{
	teclado_setup();
     b7e:	0e 94 8d 01 	call	0x31a	; 0x31a <_Z13teclado_setupv>
	fnqueue_init();
     b82:	0e 94 b0 01 	call	0x360	; 0x360 <_Z12fnqueue_initv>
	
	// Define los callbacks de cada Tecla
	key_up_callback( up_keyUp, TECLA0);
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	84 ec       	ldi	r24, 0xC4	; 196
     b8c:	94 e0       	ldi	r25, 0x04	; 4
     b8e:	0e 94 3a 01 	call	0x274	; 0x274 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyUp, TECLA0);
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	8a ec       	ldi	r24, 0xCA	; 202
     b98:	93 e0       	ldi	r25, 0x03	; 3
     b9a:	0e 94 47 01 	call	0x28e	; 0x28e <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keyDown, TECLA1);
     b9e:	62 e0       	ldi	r22, 0x02	; 2
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	87 e8       	ldi	r24, 0x87	; 135
     ba4:	94 e0       	ldi	r25, 0x04	; 4
     ba6:	0e 94 3a 01 	call	0x274	; 0x274 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyDown, TECLA1);
     baa:	62 e0       	ldi	r22, 0x02	; 2
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	8b ec       	ldi	r24, 0xCB	; 203
     bb0:	93 e0       	ldi	r25, 0x03	; 3
     bb2:	0e 94 47 01 	call	0x28e	; 0x28e <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keyLeft, TECLA2);
     bb6:	63 e0       	ldi	r22, 0x03	; 3
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	8c ec       	ldi	r24, 0xCC	; 204
     bbc:	93 e0       	ldi	r25, 0x03	; 3
     bbe:	0e 94 3a 01 	call	0x274	; 0x274 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyLeft, TECLA2);
     bc2:	63 e0       	ldi	r22, 0x03	; 3
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	8d ec       	ldi	r24, 0xCD	; 205
     bc8:	93 e0       	ldi	r25, 0x03	; 3
     bca:	0e 94 47 01 	call	0x28e	; 0x28e <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keyRight, TECLA3);
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	8e ec       	ldi	r24, 0xCE	; 206
     bd4:	93 e0       	ldi	r25, 0x03	; 3
     bd6:	0e 94 3a 01 	call	0x274	; 0x274 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keyRight, TECLA3);
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	8f ec       	ldi	r24, 0xCF	; 207
     be0:	93 e0       	ldi	r25, 0x03	; 3
     be2:	0e 94 47 01 	call	0x28e	; 0x28e <_Z17key_down_callbackPFvvEi>
	key_up_callback( up_keySelect, TECLA4);
     be6:	64 e0       	ldi	r22, 0x04	; 4
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	8c ee       	ldi	r24, 0xEC	; 236
     bec:	93 e0       	ldi	r25, 0x03	; 3
     bee:	0e 94 3a 01 	call	0x274	; 0x274 <_Z15key_up_callbackPFvvEi>
	key_down_callback( down_keySelect, TECLA4);
     bf2:	64 e0       	ldi	r22, 0x04	; 4
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	87 ed       	ldi	r24, 0xD7	; 215
     bf8:	93 e0       	ldi	r25, 0x03	; 3
     bfa:	0e 94 47 01 	call	0x28e	; 0x28e <_Z17key_down_callbackPFvvEi>
     bfe:	e5 ee       	ldi	r30, 0xE5	; 229
     c00:	f1 e0       	ldi	r31, 0x01	; 1
     c02:	89 ef       	ldi	r24, 0xF9	; 249
     c04:	91 e0       	ldi	r25, 0x01	; 1
	
	// Inicializa los tiempos
	for(int i = 0; i<MAX_TIEMPOS; i++)
	tiempos[i] = 0;
     c06:	11 92       	st	Z+, r1
     c08:	11 92       	st	Z+, r1
	key_down_callback( down_keyRight, TECLA3);
	key_up_callback( up_keySelect, TECLA4);
	key_down_callback( down_keySelect, TECLA4);
	
	// Inicializa los tiempos
	for(int i = 0; i<MAX_TIEMPOS; i++)
     c0a:	e8 17       	cp	r30, r24
     c0c:	f9 07       	cpc	r31, r25
     c0e:	d9 f7       	brne	.-10     	; 0xc06 <setup+0x88>
	tiempos[i] = 0;
	
	// set up the LCD's number of columns and rows:
	lcd.begin(numCols, numRows);
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	42 e0       	ldi	r20, 0x02	; 2
     c14:	60 e1       	ldi	r22, 0x10	; 16
     c16:	80 ec       	ldi	r24, 0xC0	; 192
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN13LiquidCrystal5beginEhhh>
	analogWrite(10, brilloActual * COEFBRILLO); //Controla intensidad backlight
     c1e:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <_ZL12brilloActual>
     c22:	83 e3       	ldi	r24, 0x33	; 51
     c24:	68 9f       	mul	r22, r24
     c26:	b0 01       	movw	r22, r0
     c28:	11 24       	eor	r1, r1
     c2a:	8a e0       	ldi	r24, 0x0A	; 10
     c2c:	0e 94 48 07 	call	0xe90	; 0xe90 <analogWrite>
	lcd.setCursor(0, 0);
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	80 ec       	ldi	r24, 0xC0	; 192
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("Lab 2 Sist. Emb.");
     c3c:	62 e6       	ldi	r22, 0x62	; 98
     c3e:	71 e0       	ldi	r23, 0x01	; 1
     c40:	80 ec       	ldi	r24, 0xC0	; 192
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 8d 08 	call	0x111a	; 0x111a <_ZN5Print5printEPKc>
	lcd.setCursor(0, 1);
     c48:	41 e0       	ldi	r20, 0x01	; 1
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	80 ec       	ldi	r24, 0xC0	; 192
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("2do.C 2019 COM 3");
     c54:	63 e7       	ldi	r22, 0x73	; 115
     c56:	71 e0       	ldi	r23, 0x01	; 1
     c58:	80 ec       	ldi	r24, 0xC0	; 192
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	0e 94 8d 08 	call	0x111a	; 0x111a <_ZN5Print5printEPKc>
	
	
	modo = START;
     c60:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <_ZL4modo>
	
	//setup del timer2
	cli();
     c64:	f8 94       	cli
	TCCR2A = 0;// set entire TCCR2A register to 0
     c66:	a0 eb       	ldi	r26, 0xB0	; 176
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	1c 92       	st	X, r1
	TCCR2B = 0;// same for TCCR2B
     c6c:	e1 eb       	ldi	r30, 0xB1	; 177
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	10 82       	st	Z, r1
	TCCR2A |= (1 << WGM21);  // ctc for timer 0
     c72:	8c 91       	ld	r24, X
     c74:	82 60       	ori	r24, 0x02	; 2
     c76:	8c 93       	st	X, r24
	TIMSK2 |= (1<<TOIE2); //setea la interrupcion por overflow
     c78:	a0 e7       	ldi	r26, 0x70	; 112
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	8c 91       	ld	r24, X
     c7e:	81 60       	ori	r24, 0x01	; 1
     c80:	8c 93       	st	X, r24
	TCNT2 = 0; //set timer en 0
     c82:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  // CS#2 y CS#0 bits -> Timer0 preescaler = 1024
     c86:	80 81       	ld	r24, Z
     c88:	87 60       	ori	r24, 0x07	; 7
     c8a:	80 83       	st	Z, r24
	sei();
     c8c:	78 94       	sei
     c8e:	08 95       	ret

00000c90 <loop>:
	
}

void loop()
{
	fnqueue_run();
     c90:	0e 94 b8 01 	call	0x370	; 0x370 <_Z11fnqueue_runv>
     c94:	08 95       	ret

00000c96 <__vector_9>:
		lcd.print(contadorPosta);
	}
}

ISR(TIMER2_OVF_vect) // TIMER2_OVF_vect
{
     c96:	1f 92       	push	r1
     c98:	0f 92       	push	r0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	2f 93       	push	r18
     ca2:	3f 93       	push	r19
     ca4:	4f 93       	push	r20
     ca6:	5f 93       	push	r21
     ca8:	6f 93       	push	r22
     caa:	7f 93       	push	r23
     cac:	8f 93       	push	r24
     cae:	9f 93       	push	r25
     cb0:	af 93       	push	r26
     cb2:	bf 93       	push	r27
     cb4:	ef 93       	push	r30
     cb6:	ff 93       	push	r31
	TCNT2 = 0;
     cb8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	timerOvf= (timerOvf + 1) % 60;
     cbc:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <_ZL8timerOvf>
     cc0:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <_ZL8timerOvf+0x1>
     cc4:	4f 5f       	subi	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	9a 01       	movw	r18, r20
     cca:	a9 e8       	ldi	r26, 0x89	; 137
     ccc:	b8 e8       	ldi	r27, 0x88	; 136
     cce:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__umulhisi3>
     cd2:	96 95       	lsr	r25
     cd4:	87 95       	ror	r24
     cd6:	92 95       	swap	r25
     cd8:	82 95       	swap	r24
     cda:	8f 70       	andi	r24, 0x0F	; 15
     cdc:	89 27       	eor	r24, r25
     cde:	9f 70       	andi	r25, 0x0F	; 15
     ce0:	89 27       	eor	r24, r25
     ce2:	6c e3       	ldi	r22, 0x3C	; 60
     ce4:	68 9f       	mul	r22, r24
     ce6:	90 01       	movw	r18, r0
     ce8:	69 9f       	mul	r22, r25
     cea:	30 0d       	add	r19, r0
     cec:	11 24       	eor	r1, r1
     cee:	ca 01       	movw	r24, r20
     cf0:	82 1b       	sub	r24, r18
     cf2:	93 0b       	sbc	r25, r19
     cf4:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <_ZL8timerOvf+0x1>
     cf8:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <_ZL8timerOvf>
	// El modo START para contemplar el estado incial con la info de la materia, etc.
	if(timerOvf == 0 ) //como el prescaler esta seteado en 1024, cada 60 interrupciones cuento 1 seg(0.98 seg)
     cfc:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <_ZL8timerOvf>
     d00:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <_ZL8timerOvf+0x1>
     d04:	89 2b       	or	r24, r25
     d06:	69 f4       	brne	.+26     	; 0xd22 <__vector_9+0x8c>
	{
		contador++;
     d08:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <_ZL8contador>
     d0c:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <_ZL8contador+0x1>
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <_ZL8contador+0x1>
     d16:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <_ZL8contador>
		//timerOvf=0;
		fnqueue_add(procesarTimer);
     d1a:	8e e2       	ldi	r24, 0x2E	; 46
     d1c:	95 e0       	ldi	r25, 0x05	; 5
     d1e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z11fnqueue_addPFvvE>
	}
	
}
     d22:	ff 91       	pop	r31
     d24:	ef 91       	pop	r30
     d26:	bf 91       	pop	r27
     d28:	af 91       	pop	r26
     d2a:	9f 91       	pop	r25
     d2c:	8f 91       	pop	r24
     d2e:	7f 91       	pop	r23
     d30:	6f 91       	pop	r22
     d32:	5f 91       	pop	r21
     d34:	4f 91       	pop	r20
     d36:	3f 91       	pop	r19
     d38:	2f 91       	pop	r18
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <_GLOBAL__sub_I_sentido>:
     d44:	cf 92       	push	r12
     d46:	ef 92       	push	r14
     d48:	0f 93       	push	r16

bool sentido=true;

int contScroll=0;

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
     d4a:	0f 2e       	mov	r0, r31
     d4c:	f7 e0       	ldi	r31, 0x07	; 7
     d4e:	cf 2e       	mov	r12, r31
     d50:	f0 2d       	mov	r31, r0
     d52:	0f 2e       	mov	r0, r31
     d54:	f6 e0       	ldi	r31, 0x06	; 6
     d56:	ef 2e       	mov	r14, r31
     d58:	f0 2d       	mov	r31, r0
     d5a:	05 e0       	ldi	r16, 0x05	; 5
     d5c:	24 e0       	ldi	r18, 0x04	; 4
     d5e:	49 e0       	ldi	r20, 0x09	; 9
     d60:	68 e0       	ldi	r22, 0x08	; 8
     d62:	80 ec       	ldi	r24, 0xC0	; 192
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0e 94 99 03 	call	0x732	; 0x732 <_ZN13LiquidCrystalC1Ehhhhhh>
		contador++;
		//timerOvf=0;
		fnqueue_add(procesarTimer);
	}
	
}
     d6a:	0f 91       	pop	r16
     d6c:	ef 90       	pop	r14
     d6e:	cf 90       	pop	r12
     d70:	08 95       	ret

00000d72 <__vector_16>:
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2f 93       	push	r18
     d7e:	3f 93       	push	r19
     d80:	8f 93       	push	r24
     d82:	9f 93       	push	r25
     d84:	af 93       	push	r26
     d86:	bf 93       	push	r27
     d88:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <timer0_millis>
     d8c:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <timer0_millis+0x1>
     d90:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <timer0_millis+0x2>
     d94:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <timer0_millis+0x3>
     d98:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <timer0_fract>
     d9c:	23 e0       	ldi	r18, 0x03	; 3
     d9e:	23 0f       	add	r18, r19
     da0:	2d 37       	cpi	r18, 0x7D	; 125
     da2:	20 f4       	brcc	.+8      	; 0xdac <__vector_16+0x3a>
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	a1 1d       	adc	r26, r1
     da8:	b1 1d       	adc	r27, r1
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <__vector_16+0x44>
     dac:	26 e8       	ldi	r18, 0x86	; 134
     dae:	23 0f       	add	r18, r19
     db0:	02 96       	adiw	r24, 0x02	; 2
     db2:	a1 1d       	adc	r26, r1
     db4:	b1 1d       	adc	r27, r1
     db6:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <timer0_fract>
     dba:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <timer0_millis>
     dbe:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <timer0_millis+0x1>
     dc2:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <timer0_millis+0x2>
     dc6:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <timer0_millis+0x3>
     dca:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <timer0_overflow_count>
     dce:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <timer0_overflow_count+0x1>
     dd2:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <timer0_overflow_count+0x2>
     dd6:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <timer0_overflow_count+0x3>
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	a1 1d       	adc	r26, r1
     dde:	b1 1d       	adc	r27, r1
     de0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <timer0_overflow_count>
     de4:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <timer0_overflow_count+0x1>
     de8:	a0 93 05 02 	sts	0x0205, r26	; 0x800205 <timer0_overflow_count+0x2>
     dec:	b0 93 06 02 	sts	0x0206, r27	; 0x800206 <timer0_overflow_count+0x3>
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <delayMicroseconds>:
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	39 f0       	breq	.+14     	; 0xe18 <delayMicroseconds+0x12>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	02 97       	sbiw	r24, 0x02	; 2
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <delayMicroseconds+0xe>
     e18:	08 95       	ret

00000e1a <init>:
     e1a:	78 94       	sei
     e1c:	84 b5       	in	r24, 0x24	; 36
     e1e:	82 60       	ori	r24, 0x02	; 2
     e20:	84 bd       	out	0x24, r24	; 36
     e22:	84 b5       	in	r24, 0x24	; 36
     e24:	81 60       	ori	r24, 0x01	; 1
     e26:	84 bd       	out	0x24, r24	; 36
     e28:	85 b5       	in	r24, 0x25	; 37
     e2a:	82 60       	ori	r24, 0x02	; 2
     e2c:	85 bd       	out	0x25, r24	; 37
     e2e:	85 b5       	in	r24, 0x25	; 37
     e30:	81 60       	ori	r24, 0x01	; 1
     e32:	85 bd       	out	0x25, r24	; 37
     e34:	ee e6       	ldi	r30, 0x6E	; 110
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	81 60       	ori	r24, 0x01	; 1
     e3c:	80 83       	st	Z, r24
     e3e:	e1 e8       	ldi	r30, 0x81	; 129
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	10 82       	st	Z, r1
     e44:	80 81       	ld	r24, Z
     e46:	82 60       	ori	r24, 0x02	; 2
     e48:	80 83       	st	Z, r24
     e4a:	80 81       	ld	r24, Z
     e4c:	81 60       	ori	r24, 0x01	; 1
     e4e:	80 83       	st	Z, r24
     e50:	e0 e8       	ldi	r30, 0x80	; 128
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	81 60       	ori	r24, 0x01	; 1
     e58:	80 83       	st	Z, r24
     e5a:	e1 eb       	ldi	r30, 0xB1	; 177
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	84 60       	ori	r24, 0x04	; 4
     e62:	80 83       	st	Z, r24
     e64:	e0 eb       	ldi	r30, 0xB0	; 176
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	80 83       	st	Z, r24
     e6e:	ea e7       	ldi	r30, 0x7A	; 122
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	84 60       	ori	r24, 0x04	; 4
     e76:	80 83       	st	Z, r24
     e78:	80 81       	ld	r24, Z
     e7a:	82 60       	ori	r24, 0x02	; 2
     e7c:	80 83       	st	Z, r24
     e7e:	80 81       	ld	r24, Z
     e80:	81 60       	ori	r24, 0x01	; 1
     e82:	80 83       	st	Z, r24
     e84:	80 81       	ld	r24, Z
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	80 83       	st	Z, r24
     e8a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     e8e:	08 95       	ret

00000e90 <analogWrite>:
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	18 2f       	mov	r17, r24
     e98:	eb 01       	movw	r28, r22
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <pinMode>
     ea0:	20 97       	sbiw	r28, 0x00	; 0
     ea2:	11 f4       	brne	.+4      	; 0xea8 <analogWrite+0x18>
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <analogWrite+0x20>
     ea8:	cf 3f       	cpi	r28, 0xFF	; 255
     eaa:	d1 05       	cpc	r29, r1
     eac:	39 f4       	brne	.+14     	; 0xebc <analogWrite+0x2c>
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	81 2f       	mov	r24, r17
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0c 94 09 08 	jmp	0x1012	; 0x1012 <digitalWrite>
     ebc:	e1 2f       	mov	r30, r17
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	e8 59       	subi	r30, 0x98	; 152
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	e4 91       	lpm	r30, Z
     ec6:	e3 30       	cpi	r30, 0x03	; 3
     ec8:	f9 f0       	breq	.+62     	; 0xf08 <analogWrite+0x78>
     eca:	48 f4       	brcc	.+18     	; 0xede <analogWrite+0x4e>
     ecc:	e1 30       	cpi	r30, 0x01	; 1
     ece:	b9 f0       	breq	.+46     	; 0xefe <analogWrite+0x6e>
     ed0:	e2 30       	cpi	r30, 0x02	; 2
     ed2:	a1 f5       	brne	.+104    	; 0xf3c <analogWrite+0xac>
     ed4:	84 b5       	in	r24, 0x24	; 36
     ed6:	80 62       	ori	r24, 0x20	; 32
     ed8:	84 bd       	out	0x24, r24	; 36
     eda:	c8 bd       	out	0x28, r28	; 40
     edc:	34 c0       	rjmp	.+104    	; 0xf46 <analogWrite+0xb6>
     ede:	e7 30       	cpi	r30, 0x07	; 7
     ee0:	e9 f0       	breq	.+58     	; 0xf1c <analogWrite+0x8c>
     ee2:	e8 30       	cpi	r30, 0x08	; 8
     ee4:	19 f1       	breq	.+70     	; 0xf2c <analogWrite+0x9c>
     ee6:	e4 30       	cpi	r30, 0x04	; 4
     ee8:	49 f5       	brne	.+82     	; 0xf3c <analogWrite+0xac>
     eea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     eee:	80 62       	ori	r24, 0x20	; 32
     ef0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     ef4:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     ef8:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     efc:	24 c0       	rjmp	.+72     	; 0xf46 <analogWrite+0xb6>
     efe:	84 b5       	in	r24, 0x24	; 36
     f00:	80 68       	ori	r24, 0x80	; 128
     f02:	84 bd       	out	0x24, r24	; 36
     f04:	c7 bd       	out	0x27, r28	; 39
     f06:	1f c0       	rjmp	.+62     	; 0xf46 <analogWrite+0xb6>
     f08:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f0c:	80 68       	ori	r24, 0x80	; 128
     f0e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f12:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f16:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f1a:	15 c0       	rjmp	.+42     	; 0xf46 <analogWrite+0xb6>
     f1c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f20:	80 68       	ori	r24, 0x80	; 128
     f22:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f26:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     f2a:	0d c0       	rjmp	.+26     	; 0xf46 <analogWrite+0xb6>
     f2c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f30:	80 62       	ori	r24, 0x20	; 32
     f32:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f36:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <analogWrite+0xb6>
     f3c:	c0 38       	cpi	r28, 0x80	; 128
     f3e:	d1 05       	cpc	r29, r1
     f40:	0c f0       	brlt	.+2      	; 0xf44 <analogWrite+0xb4>
     f42:	b5 cf       	rjmp	.-150    	; 0xeae <analogWrite+0x1e>
     f44:	af cf       	rjmp	.-162    	; 0xea4 <analogWrite+0x14>
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	08 95       	ret

00000f4e <turnOffPWM>:
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	81 f0       	breq	.+32     	; 0xf72 <turnOffPWM+0x24>
     f52:	28 f4       	brcc	.+10     	; 0xf5e <turnOffPWM+0x10>
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	99 f0       	breq	.+38     	; 0xf7e <turnOffPWM+0x30>
     f58:	82 30       	cpi	r24, 0x02	; 2
     f5a:	a1 f0       	breq	.+40     	; 0xf84 <turnOffPWM+0x36>
     f5c:	08 95       	ret
     f5e:	87 30       	cpi	r24, 0x07	; 7
     f60:	a9 f0       	breq	.+42     	; 0xf8c <turnOffPWM+0x3e>
     f62:	88 30       	cpi	r24, 0x08	; 8
     f64:	b9 f0       	breq	.+46     	; 0xf94 <turnOffPWM+0x46>
     f66:	84 30       	cpi	r24, 0x04	; 4
     f68:	d1 f4       	brne	.+52     	; 0xf9e <turnOffPWM+0x50>
     f6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f6e:	8f 7d       	andi	r24, 0xDF	; 223
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <turnOffPWM+0x2a>
     f72:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f76:	8f 77       	andi	r24, 0x7F	; 127
     f78:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     f7c:	08 95       	ret
     f7e:	84 b5       	in	r24, 0x24	; 36
     f80:	8f 77       	andi	r24, 0x7F	; 127
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <turnOffPWM+0x3a>
     f84:	84 b5       	in	r24, 0x24	; 36
     f86:	8f 7d       	andi	r24, 0xDF	; 223
     f88:	84 bd       	out	0x24, r24	; 36
     f8a:	08 95       	ret
     f8c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f90:	8f 77       	andi	r24, 0x7F	; 127
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <turnOffPWM+0x4c>
     f94:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f98:	8f 7d       	andi	r24, 0xDF	; 223
     f9a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f9e:	08 95       	ret

00000fa0 <pinMode>:
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	e4 58       	subi	r30, 0x84	; 132
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	24 91       	lpm	r18, Z
     fae:	fc 01       	movw	r30, r24
     fb0:	e0 57       	subi	r30, 0x70	; 112
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	84 91       	lpm	r24, Z
     fb6:	88 23       	and	r24, r24
     fb8:	49 f1       	breq	.+82     	; 0x100c <pinMode+0x6c>
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	fc 01       	movw	r30, r24
     fc2:	e2 55       	subi	r30, 0x52	; 82
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	a5 91       	lpm	r26, Z+
     fc8:	b4 91       	lpm	r27, Z
     fca:	8c 55       	subi	r24, 0x5C	; 92
     fcc:	9f 4f       	sbci	r25, 0xFF	; 255
     fce:	fc 01       	movw	r30, r24
     fd0:	c5 91       	lpm	r28, Z+
     fd2:	d4 91       	lpm	r29, Z
     fd4:	9f b7       	in	r25, 0x3f	; 63
     fd6:	61 11       	cpse	r22, r1
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <pinMode+0x4a>
     fda:	f8 94       	cli
     fdc:	8c 91       	ld	r24, X
     fde:	20 95       	com	r18
     fe0:	82 23       	and	r24, r18
     fe2:	8c 93       	st	X, r24
     fe4:	88 81       	ld	r24, Y
     fe6:	82 23       	and	r24, r18
     fe8:	0a c0       	rjmp	.+20     	; 0xffe <pinMode+0x5e>
     fea:	62 30       	cpi	r22, 0x02	; 2
     fec:	51 f4       	brne	.+20     	; 0x1002 <pinMode+0x62>
     fee:	f8 94       	cli
     ff0:	8c 91       	ld	r24, X
     ff2:	32 2f       	mov	r19, r18
     ff4:	30 95       	com	r19
     ff6:	83 23       	and	r24, r19
     ff8:	8c 93       	st	X, r24
     ffa:	88 81       	ld	r24, Y
     ffc:	82 2b       	or	r24, r18
     ffe:	88 83       	st	Y, r24
    1000:	04 c0       	rjmp	.+8      	; 0x100a <pinMode+0x6a>
    1002:	f8 94       	cli
    1004:	8c 91       	ld	r24, X
    1006:	82 2b       	or	r24, r18
    1008:	8c 93       	st	X, r24
    100a:	9f bf       	out	0x3f, r25	; 63
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	08 95       	ret

00001012 <digitalWrite>:
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	1f 92       	push	r1
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	f9 01       	movw	r30, r18
    1026:	e8 59       	subi	r30, 0x98	; 152
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	84 91       	lpm	r24, Z
    102c:	f9 01       	movw	r30, r18
    102e:	e4 58       	subi	r30, 0x84	; 132
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	14 91       	lpm	r17, Z
    1034:	f9 01       	movw	r30, r18
    1036:	e0 57       	subi	r30, 0x70	; 112
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	04 91       	lpm	r16, Z
    103c:	00 23       	and	r16, r16
    103e:	c9 f0       	breq	.+50     	; 0x1072 <digitalWrite+0x60>
    1040:	88 23       	and	r24, r24
    1042:	21 f0       	breq	.+8      	; 0x104c <digitalWrite+0x3a>
    1044:	69 83       	std	Y+1, r22	; 0x01
    1046:	0e 94 a7 07 	call	0xf4e	; 0xf4e <turnOffPWM>
    104a:	69 81       	ldd	r22, Y+1	; 0x01
    104c:	e0 2f       	mov	r30, r16
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	ec 55       	subi	r30, 0x5C	; 92
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	a5 91       	lpm	r26, Z+
    105a:	b4 91       	lpm	r27, Z
    105c:	9f b7       	in	r25, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	8c 91       	ld	r24, X
    1062:	61 11       	cpse	r22, r1
    1064:	03 c0       	rjmp	.+6      	; 0x106c <digitalWrite+0x5a>
    1066:	10 95       	com	r17
    1068:	81 23       	and	r24, r17
    106a:	01 c0       	rjmp	.+2      	; 0x106e <digitalWrite+0x5c>
    106c:	81 2b       	or	r24, r17
    106e:	8c 93       	st	X, r24
    1070:	9f bf       	out	0x3f, r25	; 63
    1072:	0f 90       	pop	r0
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	08 95       	ret

0000107e <initVariant>:
    107e:	08 95       	ret

00001080 <main>:
    1080:	0e 94 0d 07 	call	0xe1a	; 0xe1a <init>
    1084:	0e 94 3f 08 	call	0x107e	; 0x107e <initVariant>
    1088:	0e 94 bf 05 	call	0xb7e	; 0xb7e <setup>
    108c:	c0 e0       	ldi	r28, 0x00	; 0
    108e:	d0 e0       	ldi	r29, 0x00	; 0
    1090:	0e 94 48 06 	call	0xc90	; 0xc90 <loop>
    1094:	20 97       	sbiw	r28, 0x00	; 0
    1096:	e1 f3       	breq	.-8      	; 0x1090 <main+0x10>
    1098:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    109c:	f9 cf       	rjmp	.-14     	; 0x1090 <main+0x10>

0000109e <_ZN5Print5writeEPKhj>:
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	6c 01       	movw	r12, r24
    10b0:	7a 01       	movw	r14, r20
    10b2:	eb 01       	movw	r28, r22
    10b4:	e6 0e       	add	r14, r22
    10b6:	f7 1e       	adc	r15, r23
    10b8:	00 e0       	ldi	r16, 0x00	; 0
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	ce 15       	cp	r28, r14
    10be:	df 05       	cpc	r29, r15
    10c0:	61 f0       	breq	.+24     	; 0x10da <_ZN5Print5writeEPKhj+0x3c>
    10c2:	69 91       	ld	r22, Y+
    10c4:	d6 01       	movw	r26, r12
    10c6:	ed 91       	ld	r30, X+
    10c8:	fc 91       	ld	r31, X
    10ca:	01 90       	ld	r0, Z+
    10cc:	f0 81       	ld	r31, Z
    10ce:	e0 2d       	mov	r30, r0
    10d0:	c6 01       	movw	r24, r12
    10d2:	09 95       	icall
    10d4:	08 0f       	add	r16, r24
    10d6:	19 1f       	adc	r17, r25
    10d8:	f1 cf       	rjmp	.-30     	; 0x10bc <_ZN5Print5writeEPKhj+0x1e>
    10da:	c8 01       	movw	r24, r16
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	08 95       	ret

000010ee <_ZN5Print5writeEPKc>:
    10ee:	61 15       	cp	r22, r1
    10f0:	71 05       	cpc	r23, r1
    10f2:	81 f0       	breq	.+32     	; 0x1114 <_ZN5Print5writeEPKc+0x26>
    10f4:	db 01       	movw	r26, r22
    10f6:	0d 90       	ld	r0, X+
    10f8:	00 20       	and	r0, r0
    10fa:	e9 f7       	brne	.-6      	; 0x10f6 <_ZN5Print5writeEPKc+0x8>
    10fc:	ad 01       	movw	r20, r26
    10fe:	41 50       	subi	r20, 0x01	; 1
    1100:	51 09       	sbc	r21, r1
    1102:	46 1b       	sub	r20, r22
    1104:	57 0b       	sbc	r21, r23
    1106:	dc 01       	movw	r26, r24
    1108:	ed 91       	ld	r30, X+
    110a:	fc 91       	ld	r31, X
    110c:	02 80       	ldd	r0, Z+2	; 0x02
    110e:	f3 81       	ldd	r31, Z+3	; 0x03
    1110:	e0 2d       	mov	r30, r0
    1112:	09 94       	ijmp
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	08 95       	ret

0000111a <_ZN5Print5printEPKc>:
    111a:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <_ZN5Print5writeEPKc>

0000111e <_ZN5Print5printEc>:
    111e:	dc 01       	movw	r26, r24
    1120:	ed 91       	ld	r30, X+
    1122:	fc 91       	ld	r31, X
    1124:	01 90       	ld	r0, Z+
    1126:	f0 81       	ld	r31, Z
    1128:	e0 2d       	mov	r30, r0
    112a:	09 94       	ijmp

0000112c <_ZN5Print11printNumberEmh>:
    112c:	8f 92       	push	r8
    112e:	9f 92       	push	r9
    1130:	af 92       	push	r10
    1132:	bf 92       	push	r11
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	a1 97       	sbiw	r28, 0x21	; 33
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	7c 01       	movw	r14, r24
    1156:	c4 2e       	mov	r12, r20
    1158:	e5 2f       	mov	r30, r21
    115a:	cb 01       	movw	r24, r22
    115c:	d2 2e       	mov	r13, r18
    115e:	19 a2       	std	Y+33, r1	; 0x21
    1160:	21 e0       	ldi	r18, 0x01	; 1
    1162:	2d 15       	cp	r18, r13
    1164:	10 f0       	brcs	.+4      	; 0x116a <_ZN5Print11printNumberEmh+0x3e>
    1166:	2a e0       	ldi	r18, 0x0A	; 10
    1168:	d2 2e       	mov	r13, r18
    116a:	8e 01       	movw	r16, r28
    116c:	0f 5d       	subi	r16, 0xDF	; 223
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    1170:	8d 2c       	mov	r8, r13
    1172:	91 2c       	mov	r9, r1
    1174:	a1 2c       	mov	r10, r1
    1176:	b1 2c       	mov	r11, r1
    1178:	6c 2d       	mov	r22, r12
    117a:	7e 2f       	mov	r23, r30
    117c:	a5 01       	movw	r20, r10
    117e:	94 01       	movw	r18, r8
    1180:	0e 94 41 09 	call	0x1282	; 0x1282 <__udivmodsi4>
    1184:	8c 2d       	mov	r24, r12
    1186:	d2 9e       	mul	r13, r18
    1188:	80 19       	sub	r24, r0
    118a:	11 24       	eor	r1, r1
    118c:	01 50       	subi	r16, 0x01	; 1
    118e:	11 09       	sbc	r17, r1
    1190:	8a 30       	cpi	r24, 0x0A	; 10
    1192:	14 f4       	brge	.+4      	; 0x1198 <_ZN5Print11printNumberEmh+0x6c>
    1194:	80 5d       	subi	r24, 0xD0	; 208
    1196:	01 c0       	rjmp	.+2      	; 0x119a <_ZN5Print11printNumberEmh+0x6e>
    1198:	89 5c       	subi	r24, 0xC9	; 201
    119a:	f8 01       	movw	r30, r16
    119c:	80 83       	st	Z, r24
    119e:	21 15       	cp	r18, r1
    11a0:	31 05       	cpc	r19, r1
    11a2:	41 05       	cpc	r20, r1
    11a4:	51 05       	cpc	r21, r1
    11a6:	21 f0       	breq	.+8      	; 0x11b0 <_ZN5Print11printNumberEmh+0x84>
    11a8:	c2 2e       	mov	r12, r18
    11aa:	e3 2f       	mov	r30, r19
    11ac:	ca 01       	movw	r24, r20
    11ae:	e4 cf       	rjmp	.-56     	; 0x1178 <_ZN5Print11printNumberEmh+0x4c>
    11b0:	b8 01       	movw	r22, r16
    11b2:	c7 01       	movw	r24, r14
    11b4:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN5Print5writeEPKc>
    11b8:	a1 96       	adiw	r28, 0x21	; 33
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	bf 90       	pop	r11
    11d6:	af 90       	pop	r10
    11d8:	9f 90       	pop	r9
    11da:	8f 90       	pop	r8
    11dc:	08 95       	ret

000011de <_ZN5Print5printEli>:
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
    11f0:	6a 01       	movw	r12, r20
    11f2:	7b 01       	movw	r14, r22
    11f4:	21 15       	cp	r18, r1
    11f6:	31 05       	cpc	r19, r1
    11f8:	79 f4       	brne	.+30     	; 0x1218 <_ZN5Print5printEli+0x3a>
    11fa:	e8 81       	ld	r30, Y
    11fc:	f9 81       	ldd	r31, Y+1	; 0x01
    11fe:	01 90       	ld	r0, Z+
    1200:	f0 81       	ld	r31, Z
    1202:	e0 2d       	mov	r30, r0
    1204:	64 2f       	mov	r22, r20
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	09 94       	ijmp
    1218:	2a 30       	cpi	r18, 0x0A	; 10
    121a:	31 05       	cpc	r19, r1
    121c:	e9 f4       	brne	.+58     	; 0x1258 <_ZN5Print5printEli+0x7a>
    121e:	77 ff       	sbrs	r23, 7
    1220:	1a c0       	rjmp	.+52     	; 0x1256 <_ZN5Print5printEli+0x78>
    1222:	6d e2       	ldi	r22, 0x2D	; 45
    1224:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN5Print5printEc>
    1228:	8c 01       	movw	r16, r24
    122a:	44 27       	eor	r20, r20
    122c:	55 27       	eor	r21, r21
    122e:	ba 01       	movw	r22, r20
    1230:	4c 19       	sub	r20, r12
    1232:	5d 09       	sbc	r21, r13
    1234:	6e 09       	sbc	r22, r14
    1236:	7f 09       	sbc	r23, r15
    1238:	2a e0       	ldi	r18, 0x0A	; 10
    123a:	ce 01       	movw	r24, r28
    123c:	0e 94 96 08 	call	0x112c	; 0x112c <_ZN5Print11printNumberEmh>
    1240:	80 0f       	add	r24, r16
    1242:	91 1f       	adc	r25, r17
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	08 95       	ret
    1256:	2a e0       	ldi	r18, 0x0A	; 10
    1258:	b7 01       	movw	r22, r14
    125a:	a6 01       	movw	r20, r12
    125c:	ce 01       	movw	r24, r28
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	0c 94 96 08 	jmp	0x112c	; 0x112c <_ZN5Print11printNumberEmh>

00001272 <_ZN5Print5printEii>:
    1272:	9a 01       	movw	r18, r20
    1274:	ab 01       	movw	r20, r22
    1276:	66 27       	eor	r22, r22
    1278:	57 fd       	sbrc	r21, 7
    127a:	60 95       	com	r22
    127c:	76 2f       	mov	r23, r22
    127e:	0c 94 ef 08 	jmp	0x11de	; 0x11de <_ZN5Print5printEli>

00001282 <__udivmodsi4>:
    1282:	a1 e2       	ldi	r26, 0x21	; 33
    1284:	1a 2e       	mov	r1, r26
    1286:	aa 1b       	sub	r26, r26
    1288:	bb 1b       	sub	r27, r27
    128a:	fd 01       	movw	r30, r26
    128c:	0d c0       	rjmp	.+26     	; 0x12a8 <__udivmodsi4_ep>

0000128e <__udivmodsi4_loop>:
    128e:	aa 1f       	adc	r26, r26
    1290:	bb 1f       	adc	r27, r27
    1292:	ee 1f       	adc	r30, r30
    1294:	ff 1f       	adc	r31, r31
    1296:	a2 17       	cp	r26, r18
    1298:	b3 07       	cpc	r27, r19
    129a:	e4 07       	cpc	r30, r20
    129c:	f5 07       	cpc	r31, r21
    129e:	20 f0       	brcs	.+8      	; 0x12a8 <__udivmodsi4_ep>
    12a0:	a2 1b       	sub	r26, r18
    12a2:	b3 0b       	sbc	r27, r19
    12a4:	e4 0b       	sbc	r30, r20
    12a6:	f5 0b       	sbc	r31, r21

000012a8 <__udivmodsi4_ep>:
    12a8:	66 1f       	adc	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	88 1f       	adc	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	1a 94       	dec	r1
    12b2:	69 f7       	brne	.-38     	; 0x128e <__udivmodsi4_loop>
    12b4:	60 95       	com	r22
    12b6:	70 95       	com	r23
    12b8:	80 95       	com	r24
    12ba:	90 95       	com	r25
    12bc:	9b 01       	movw	r18, r22
    12be:	ac 01       	movw	r20, r24
    12c0:	bd 01       	movw	r22, r26
    12c2:	cf 01       	movw	r24, r30
    12c4:	08 95       	ret

000012c6 <__umulhisi3>:
    12c6:	a2 9f       	mul	r26, r18
    12c8:	b0 01       	movw	r22, r0
    12ca:	b3 9f       	mul	r27, r19
    12cc:	c0 01       	movw	r24, r0
    12ce:	a3 9f       	mul	r26, r19
    12d0:	70 0d       	add	r23, r0
    12d2:	81 1d       	adc	r24, r1
    12d4:	11 24       	eor	r1, r1
    12d6:	91 1d       	adc	r25, r1
    12d8:	b2 9f       	mul	r27, r18
    12da:	70 0d       	add	r23, r0
    12dc:	81 1d       	adc	r24, r1
    12de:	11 24       	eor	r1, r1
    12e0:	91 1d       	adc	r25, r1
    12e2:	08 95       	ret

000012e4 <__tablejump2__>:
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	05 90       	lpm	r0, Z+
    12ea:	f4 91       	lpm	r31, Z
    12ec:	e0 2d       	mov	r30, r0
    12ee:	09 94       	ijmp

000012f0 <_exit>:
    12f0:	f8 94       	cli

000012f2 <__stop_program>:
    12f2:	ff cf       	rjmp	.-2      	; 0x12f2 <__stop_program>
